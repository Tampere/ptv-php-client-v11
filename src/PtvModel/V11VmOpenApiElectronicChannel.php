<?php
/**
 * V11VmOpenApiElectronicChannel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * The version of the OpenAPI document: v11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * V11VmOpenApiElectronicChannel Class Doc Comment
 *
 * @category Class
 * @description OPEN API V11 - View Model of electronic channel
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V11VmOpenApiElectronicChannel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V11VmOpenApiElectronicChannel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'sourceId' => 'string',
        'serviceChannelDescriptions' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
        'areaType' => 'string',
        'supportPhones' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiPhone[]',
        'supportEmails' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
        'languages' => 'string[]',
        'webPages' => '\Tampere\PtvV11\PtvModel\V9VmOpenApiWebPage[]',
        'serviceHours' => '\Tampere\PtvV11\PtvModel\V11VmOpenApiServiceHour[]',
        'channelId' => 'string',
        'versionId' => 'string',
        'serviceChannelType' => 'string',
        'organizationId' => 'string',
        'serviceChannelNames' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
        'areas' => '\Tampere\PtvV11\PtvModel\VmOpenApiArea[]',
        'services' => '\Tampere\PtvV11\PtvModel\V11VmOpenApiServiceChannelService[]',
        'serviceCollections' => '\Tampere\PtvV11\PtvModel\VmOpenApiServiceServiceCollection[]',
        'publishingStatus' => 'string',
        'modified' => '\DateTime',
        'responsibleSoteOrganization' => 'string',
        'ontologyTerms' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiOntologyTerm[]',
        'areaMunicipalities' => '\Tampere\PtvV11\PtvModel\VmOpenApiMunicipality[]',
        'isVisibleForAll' => 'bool',
        'security' => '\Tampere\PtvV11\PtvModel\ISecurityOwnOrganization',
        'availableLanguages' => 'string[]',
        'signatureQuantity' => 'int',
        'requiresSignature' => 'bool',
        'requiresAuthentication' => 'bool',
        'attachments' => '\Tampere\PtvV11\PtvModel\VmOpenApiAttachmentWithType[]',
        'accessibilityClassification' => '\Tampere\PtvV11\PtvModel\VmOpenApiAccessibilityClassification[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'sourceId' => null,
        'serviceChannelDescriptions' => null,
        'areaType' => null,
        'supportPhones' => null,
        'supportEmails' => null,
        'languages' => null,
        'webPages' => null,
        'serviceHours' => null,
        'channelId' => 'uuid',
        'versionId' => 'uuid',
        'serviceChannelType' => null,
        'organizationId' => 'uuid',
        'serviceChannelNames' => null,
        'areas' => null,
        'services' => null,
        'serviceCollections' => null,
        'publishingStatus' => null,
        'modified' => 'date-time',
        'responsibleSoteOrganization' => null,
        'ontologyTerms' => null,
        'areaMunicipalities' => null,
        'isVisibleForAll' => null,
        'security' => null,
        'availableLanguages' => null,
        'signatureQuantity' => 'int32',
        'requiresSignature' => null,
        'requiresAuthentication' => null,
        'attachments' => null,
        'accessibilityClassification' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'sourceId' => true,
		'serviceChannelDescriptions' => true,
		'areaType' => true,
		'supportPhones' => true,
		'supportEmails' => true,
		'languages' => true,
		'webPages' => true,
		'serviceHours' => true,
		'channelId' => true,
		'versionId' => true,
		'serviceChannelType' => true,
		'organizationId' => false,
		'serviceChannelNames' => true,
		'areas' => true,
		'services' => true,
		'serviceCollections' => true,
		'publishingStatus' => true,
		'modified' => false,
		'responsibleSoteOrganization' => true,
		'ontologyTerms' => true,
		'areaMunicipalities' => true,
		'isVisibleForAll' => false,
		'security' => false,
		'availableLanguages' => true,
		'signatureQuantity' => true,
		'requiresSignature' => false,
		'requiresAuthentication' => false,
		'attachments' => true,
		'accessibilityClassification' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'sourceId' => 'sourceId',
        'serviceChannelDescriptions' => 'serviceChannelDescriptions',
        'areaType' => 'areaType',
        'supportPhones' => 'supportPhones',
        'supportEmails' => 'supportEmails',
        'languages' => 'languages',
        'webPages' => 'webPages',
        'serviceHours' => 'serviceHours',
        'channelId' => 'channelId',
        'versionId' => 'versionId',
        'serviceChannelType' => 'serviceChannelType',
        'organizationId' => 'organizationId',
        'serviceChannelNames' => 'serviceChannelNames',
        'areas' => 'areas',
        'services' => 'services',
        'serviceCollections' => 'serviceCollections',
        'publishingStatus' => 'publishingStatus',
        'modified' => 'modified',
        'responsibleSoteOrganization' => 'responsibleSoteOrganization',
        'ontologyTerms' => 'ontologyTerms',
        'areaMunicipalities' => 'areaMunicipalities',
        'isVisibleForAll' => 'isVisibleForAll',
        'security' => 'security',
        'availableLanguages' => 'availableLanguages',
        'signatureQuantity' => 'signatureQuantity',
        'requiresSignature' => 'requiresSignature',
        'requiresAuthentication' => 'requiresAuthentication',
        'attachments' => 'attachments',
        'accessibilityClassification' => 'accessibilityClassification'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'sourceId' => 'setSourceId',
        'serviceChannelDescriptions' => 'setServiceChannelDescriptions',
        'areaType' => 'setAreaType',
        'supportPhones' => 'setSupportPhones',
        'supportEmails' => 'setSupportEmails',
        'languages' => 'setLanguages',
        'webPages' => 'setWebPages',
        'serviceHours' => 'setServiceHours',
        'channelId' => 'setChannelId',
        'versionId' => 'setVersionId',
        'serviceChannelType' => 'setServiceChannelType',
        'organizationId' => 'setOrganizationId',
        'serviceChannelNames' => 'setServiceChannelNames',
        'areas' => 'setAreas',
        'services' => 'setServices',
        'serviceCollections' => 'setServiceCollections',
        'publishingStatus' => 'setPublishingStatus',
        'modified' => 'setModified',
        'responsibleSoteOrganization' => 'setResponsibleSoteOrganization',
        'ontologyTerms' => 'setOntologyTerms',
        'areaMunicipalities' => 'setAreaMunicipalities',
        'isVisibleForAll' => 'setIsVisibleForAll',
        'security' => 'setSecurity',
        'availableLanguages' => 'setAvailableLanguages',
        'signatureQuantity' => 'setSignatureQuantity',
        'requiresSignature' => 'setRequiresSignature',
        'requiresAuthentication' => 'setRequiresAuthentication',
        'attachments' => 'setAttachments',
        'accessibilityClassification' => 'setAccessibilityClassification'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'sourceId' => 'getSourceId',
        'serviceChannelDescriptions' => 'getServiceChannelDescriptions',
        'areaType' => 'getAreaType',
        'supportPhones' => 'getSupportPhones',
        'supportEmails' => 'getSupportEmails',
        'languages' => 'getLanguages',
        'webPages' => 'getWebPages',
        'serviceHours' => 'getServiceHours',
        'channelId' => 'getChannelId',
        'versionId' => 'getVersionId',
        'serviceChannelType' => 'getServiceChannelType',
        'organizationId' => 'getOrganizationId',
        'serviceChannelNames' => 'getServiceChannelNames',
        'areas' => 'getAreas',
        'services' => 'getServices',
        'serviceCollections' => 'getServiceCollections',
        'publishingStatus' => 'getPublishingStatus',
        'modified' => 'getModified',
        'responsibleSoteOrganization' => 'getResponsibleSoteOrganization',
        'ontologyTerms' => 'getOntologyTerms',
        'areaMunicipalities' => 'getAreaMunicipalities',
        'isVisibleForAll' => 'getIsVisibleForAll',
        'security' => 'getSecurity',
        'availableLanguages' => 'getAvailableLanguages',
        'signatureQuantity' => 'getSignatureQuantity',
        'requiresSignature' => 'getRequiresSignature',
        'requiresAuthentication' => 'getRequiresAuthentication',
        'attachments' => 'getAttachments',
        'accessibilityClassification' => 'getAccessibilityClassification'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('sourceId', $data ?? [], null);
        $this->setIfExists('serviceChannelDescriptions', $data ?? [], null);
        $this->setIfExists('areaType', $data ?? [], null);
        $this->setIfExists('supportPhones', $data ?? [], null);
        $this->setIfExists('supportEmails', $data ?? [], null);
        $this->setIfExists('languages', $data ?? [], null);
        $this->setIfExists('webPages', $data ?? [], null);
        $this->setIfExists('serviceHours', $data ?? [], null);
        $this->setIfExists('channelId', $data ?? [], null);
        $this->setIfExists('versionId', $data ?? [], null);
        $this->setIfExists('serviceChannelType', $data ?? [], null);
        $this->setIfExists('organizationId', $data ?? [], null);
        $this->setIfExists('serviceChannelNames', $data ?? [], null);
        $this->setIfExists('areas', $data ?? [], null);
        $this->setIfExists('services', $data ?? [], null);
        $this->setIfExists('serviceCollections', $data ?? [], null);
        $this->setIfExists('publishingStatus', $data ?? [], null);
        $this->setIfExists('modified', $data ?? [], null);
        $this->setIfExists('responsibleSoteOrganization', $data ?? [], null);
        $this->setIfExists('ontologyTerms', $data ?? [], null);
        $this->setIfExists('areaMunicipalities', $data ?? [], null);
        $this->setIfExists('isVisibleForAll', $data ?? [], null);
        $this->setIfExists('security', $data ?? [], null);
        $this->setIfExists('availableLanguages', $data ?? [], null);
        $this->setIfExists('signatureQuantity', $data ?? [], null);
        $this->setIfExists('requiresSignature', $data ?? [], null);
        $this->setIfExists('requiresAuthentication', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('accessibilityClassification', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sourceId']) && !preg_match("/^[A-Za-z0-9-.]*$/", $this->container['sourceId'])) {
            $invalidProperties[] = "invalid value for 'sourceId', must be conform to the pattern /^[A-Za-z0-9-.]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id PTV identifier for the service channel.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sourceId
     *
     * @return string|null
     */
    public function getSourceId()
    {
        return $this->container['sourceId'];
    }

    /**
     * Sets sourceId
     *
     * @param string|null $sourceId External system identifier for this service channel. User needs to be logged in to be able to get/set value.
     *
     * @return self
     */
    public function setSourceId($sourceId)
    {
        if (is_null($sourceId)) {
            array_push($this->openAPINullablesSetToNull, 'sourceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($sourceId) && (!preg_match("/^[A-Za-z0-9-.]*$/", $sourceId))) {
            throw new \InvalidArgumentException("invalid value for \$sourceId when calling V11VmOpenApiElectronicChannel., must conform to the pattern /^[A-Za-z0-9-.]*$/.");
        }

        $this->container['sourceId'] = $sourceId;

        return $this;
    }

    /**
     * Gets serviceChannelDescriptions
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null
     */
    public function getServiceChannelDescriptions()
    {
        return $this->container['serviceChannelDescriptions'];
    }

    /**
     * Sets serviceChannelDescriptions
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null $serviceChannelDescriptions List of localized service channel descriptions. Possible type values are: Description, Summary (in version 7 ShortDescription). (Max.Length: 2500 Description).
     *
     * @return self
     */
    public function setServiceChannelDescriptions($serviceChannelDescriptions)
    {
        if (is_null($serviceChannelDescriptions)) {
            array_push($this->openAPINullablesSetToNull, 'serviceChannelDescriptions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceChannelDescriptions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceChannelDescriptions'] = $serviceChannelDescriptions;

        return $this;
    }

    /**
     * Gets areaType
     *
     * @return string|null
     */
    public function getAreaType()
    {
        return $this->container['areaType'];
    }

    /**
     * Sets areaType
     *
     * @param string|null $areaType Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.  In version 7 and older: WholeCountry, WholeCountryExceptAlandIslands, AreaType.
     *
     * @return self
     */
    public function setAreaType($areaType)
    {
        if (is_null($areaType)) {
            array_push($this->openAPINullablesSetToNull, 'areaType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('areaType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['areaType'] = $areaType;

        return $this;
    }

    /**
     * Gets supportPhones
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiPhone[]|null
     */
    public function getSupportPhones()
    {
        return $this->container['supportPhones'];
    }

    /**
     * Sets supportPhones
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiPhone[]|null $supportPhones List of support phone numbers for the service channel.
     *
     * @return self
     */
    public function setSupportPhones($supportPhones)
    {
        if (is_null($supportPhones)) {
            array_push($this->openAPINullablesSetToNull, 'supportPhones');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supportPhones', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supportPhones'] = $supportPhones;

        return $this;
    }

    /**
     * Gets supportEmails
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null
     */
    public function getSupportEmails()
    {
        return $this->container['supportEmails'];
    }

    /**
     * Sets supportEmails
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null $supportEmails List of support email addresses for the service channel. (Max.Length: 100).
     *
     * @return self
     */
    public function setSupportEmails($supportEmails)
    {
        if (is_null($supportEmails)) {
            array_push($this->openAPINullablesSetToNull, 'supportEmails');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supportEmails', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supportEmails'] = $supportEmails;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return string[]|null
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param string[]|null $languages List of languages the service channel is available in (two letter language code).
     *
     * @return self
     */
    public function setLanguages($languages)
    {
        if (is_null($languages)) {
            array_push($this->openAPINullablesSetToNull, 'languages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('languages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets webPages
     *
     * @return \Tampere\PtvV11\PtvModel\V9VmOpenApiWebPage[]|null
     */
    public function getWebPages()
    {
        return $this->container['webPages'];
    }

    /**
     * Sets webPages
     *
     * @param \Tampere\PtvV11\PtvModel\V9VmOpenApiWebPage[]|null $webPages List of service channel web pages.
     *
     * @return self
     */
    public function setWebPages($webPages)
    {
        if (is_null($webPages)) {
            array_push($this->openAPINullablesSetToNull, 'webPages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('webPages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['webPages'] = $webPages;

        return $this;
    }

    /**
     * Gets serviceHours
     *
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceHour[]|null
     */
    public function getServiceHours()
    {
        return $this->container['serviceHours'];
    }

    /**
     * Sets serviceHours
     *
     * @param \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceHour[]|null $serviceHours List of service channel service hours.
     *
     * @return self
     */
    public function setServiceHours($serviceHours)
    {
        if (is_null($serviceHours)) {
            array_push($this->openAPINullablesSetToNull, 'serviceHours');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceHours', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceHours'] = $serviceHours;

        return $this;
    }

    /**
     * Gets channelId
     *
     * @return string|null
     */
    public function getChannelId()
    {
        return $this->container['channelId'];
    }

    /**
     * Sets channelId
     *
     * @param string|null $channelId Gets or sets the special channel identifier.
     *
     * @return self
     */
    public function setChannelId($channelId)
    {
        if (is_null($channelId)) {
            array_push($this->openAPINullablesSetToNull, 'channelId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channelId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channelId'] = $channelId;

        return $this;
    }

    /**
     * Gets versionId
     *
     * @return string|null
     */
    public function getVersionId()
    {
        return $this->container['versionId'];
    }

    /**
     * Sets versionId
     *
     * @param string|null $versionId The identifier for current version.
     *
     * @return self
     */
    public function setVersionId($versionId)
    {
        if (is_null($versionId)) {
            array_push($this->openAPINullablesSetToNull, 'versionId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('versionId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['versionId'] = $versionId;

        return $this;
    }

    /**
     * Gets serviceChannelType
     *
     * @return string|null
     */
    public function getServiceChannelType()
    {
        return $this->container['serviceChannelType'];
    }

    /**
     * Sets serviceChannelType
     *
     * @param string|null $serviceChannelType Type of the service channel. Channel types: EChannel, WebPage, PrintableForm, Phone or ServiceLocation.
     *
     * @return self
     */
    public function setServiceChannelType($serviceChannelType)
    {
        if (is_null($serviceChannelType)) {
            array_push($this->openAPINullablesSetToNull, 'serviceChannelType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceChannelType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceChannelType'] = $serviceChannelType;

        return $this;
    }

    /**
     * Gets organizationId
     *
     * @return string|null
     */
    public function getOrganizationId()
    {
        return $this->container['organizationId'];
    }

    /**
     * Sets organizationId
     *
     * @param string|null $organizationId PTV organization identifier responsible for the channel.
     *
     * @return self
     */
    public function setOrganizationId($organizationId)
    {
        if (is_null($organizationId)) {
            throw new \InvalidArgumentException('non-nullable organizationId cannot be null');
        }
        $this->container['organizationId'] = $organizationId;

        return $this;
    }

    /**
     * Gets serviceChannelNames
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null
     */
    public function getServiceChannelNames()
    {
        return $this->container['serviceChannelNames'];
    }

    /**
     * Sets serviceChannelNames
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null $serviceChannelNames Localized list of service channel names. Possible type values are: Name, AlternativeName (in version 7 AlternateName).
     *
     * @return self
     */
    public function setServiceChannelNames($serviceChannelNames)
    {
        if (is_null($serviceChannelNames)) {
            array_push($this->openAPINullablesSetToNull, 'serviceChannelNames');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceChannelNames', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceChannelNames'] = $serviceChannelNames;

        return $this;
    }

    /**
     * Gets areas
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiArea[]|null
     */
    public function getAreas()
    {
        return $this->container['areas'];
    }

    /**
     * Sets areas
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiArea[]|null $areas List of service channel areas.
     *
     * @return self
     */
    public function setAreas($areas)
    {
        if (is_null($areas)) {
            array_push($this->openAPINullablesSetToNull, 'areas');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('areas', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['areas'] = $areas;

        return $this;
    }

    /**
     * Gets services
     *
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceChannelService[]|null
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceChannelService[]|null $services List of linked services including relationship data.
     *
     * @return self
     */
    public function setServices($services)
    {
        if (is_null($services)) {
            array_push($this->openAPINullablesSetToNull, 'services');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('services', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets serviceCollections
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiServiceServiceCollection[]|null
     */
    public function getServiceCollections()
    {
        return $this->container['serviceCollections'];
    }

    /**
     * Sets serviceCollections
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiServiceServiceCollection[]|null $serviceCollections 
     *
     * @return self
     */
    public function setServiceCollections($serviceCollections)
    {
        if (is_null($serviceCollections)) {
            array_push($this->openAPINullablesSetToNull, 'serviceCollections');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceCollections', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceCollections'] = $serviceCollections;

        return $this;
    }

    /**
     * Gets publishingStatus
     *
     * @return string|null
     */
    public function getPublishingStatus()
    {
        return $this->container['publishingStatus'];
    }

    /**
     * Sets publishingStatus
     *
     * @param string|null $publishingStatus Publishing status. Possible values are: Draft, Published, Deleted or Modified.
     *
     * @return self
     */
    public function setPublishingStatus($publishingStatus)
    {
        if (is_null($publishingStatus)) {
            array_push($this->openAPINullablesSetToNull, 'publishingStatus');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('publishingStatus', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['publishingStatus'] = $publishingStatus;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime|null
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime|null $modified Date when item was modified/created (UTC).
     *
     * @return self
     */
    public function setModified($modified)
    {
        if (is_null($modified)) {
            throw new \InvalidArgumentException('non-nullable modified cannot be null');
        }
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets responsibleSoteOrganization
     *
     * @return string|null
     */
    public function getResponsibleSoteOrganization()
    {
        return $this->container['responsibleSoteOrganization'];
    }

    /**
     * Sets responsibleSoteOrganization
     *
     * @param string|null $responsibleSoteOrganization Sote organization that is responsible for the service channel. Notice! At the moment always empty - the property is a placeholder for later use.
     *
     * @return self
     */
    public function setResponsibleSoteOrganization($responsibleSoteOrganization)
    {
        if (is_null($responsibleSoteOrganization)) {
            array_push($this->openAPINullablesSetToNull, 'responsibleSoteOrganization');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('responsibleSoteOrganization', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['responsibleSoteOrganization'] = $responsibleSoteOrganization;

        return $this;
    }

    /**
     * Gets ontologyTerms
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiOntologyTerm[]|null
     */
    public function getOntologyTerms()
    {
        return $this->container['ontologyTerms'];
    }

    /**
     * Sets ontologyTerms
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiOntologyTerm[]|null $ontologyTerms List of ontology terms related to the all service connections.
     *
     * @return self
     */
    public function setOntologyTerms($ontologyTerms)
    {
        if (is_null($ontologyTerms)) {
            array_push($this->openAPINullablesSetToNull, 'ontologyTerms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ontologyTerms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ontologyTerms'] = $ontologyTerms;

        return $this;
    }

    /**
     * Gets areaMunicipalities
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiMunicipality[]|null
     */
    public function getAreaMunicipalities()
    {
        return $this->container['areaMunicipalities'];
    }

    /**
     * Sets areaMunicipalities
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiMunicipality[]|null $areaMunicipalities List of municipalities including municipality code and a localized list of municipality names.
     *
     * @return self
     */
    public function setAreaMunicipalities($areaMunicipalities)
    {
        if (is_null($areaMunicipalities)) {
            array_push($this->openAPINullablesSetToNull, 'areaMunicipalities');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('areaMunicipalities', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['areaMunicipalities'] = $areaMunicipalities;

        return $this;
    }

    /**
     * Gets isVisibleForAll
     *
     * @return bool|null
     */
    public function getIsVisibleForAll()
    {
        return $this->container['isVisibleForAll'];
    }

    /**
     * Sets isVisibleForAll
     *
     * @param bool|null $isVisibleForAll Indicates if channel can be used (referenced within services) by other users from other organizations.
     *
     * @return self
     */
    public function setIsVisibleForAll($isVisibleForAll)
    {
        if (is_null($isVisibleForAll)) {
            throw new \InvalidArgumentException('non-nullable isVisibleForAll cannot be null');
        }
        $this->container['isVisibleForAll'] = $isVisibleForAll;

        return $this;
    }

    /**
     * Gets security
     *
     * @return \Tampere\PtvV11\PtvModel\ISecurityOwnOrganization|null
     */
    public function getSecurity()
    {
        return $this->container['security'];
    }

    /**
     * Sets security
     *
     * @param \Tampere\PtvV11\PtvModel\ISecurityOwnOrganization|null $security security
     *
     * @return self
     */
    public function setSecurity($security)
    {
        if (is_null($security)) {
            throw new \InvalidArgumentException('non-nullable security cannot be null');
        }
        $this->container['security'] = $security;

        return $this;
    }

    /**
     * Gets availableLanguages
     *
     * @return string[]|null
     */
    public function getAvailableLanguages()
    {
        return $this->container['availableLanguages'];
    }

    /**
     * Sets availableLanguages
     *
     * @param string[]|null $availableLanguages Gets or sets available languages
     *
     * @return self
     */
    public function setAvailableLanguages($availableLanguages)
    {
        if (is_null($availableLanguages)) {
            array_push($this->openAPINullablesSetToNull, 'availableLanguages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('availableLanguages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['availableLanguages'] = $availableLanguages;

        return $this;
    }

    /**
     * Gets signatureQuantity
     *
     * @return int|null
     */
    public function getSignatureQuantity()
    {
        return $this->container['signatureQuantity'];
    }

    /**
     * Sets signatureQuantity
     *
     * @param int|null $signatureQuantity How many signatures are required.
     *
     * @return self
     */
    public function setSignatureQuantity($signatureQuantity)
    {
        if (is_null($signatureQuantity)) {
            array_push($this->openAPINullablesSetToNull, 'signatureQuantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signatureQuantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signatureQuantity'] = $signatureQuantity;

        return $this;
    }

    /**
     * Gets requiresSignature
     *
     * @return bool|null
     */
    public function getRequiresSignature()
    {
        return $this->container['requiresSignature'];
    }

    /**
     * Sets requiresSignature
     *
     * @param bool|null $requiresSignature Is signature required.
     *
     * @return self
     */
    public function setRequiresSignature($requiresSignature)
    {
        if (is_null($requiresSignature)) {
            throw new \InvalidArgumentException('non-nullable requiresSignature cannot be null');
        }
        $this->container['requiresSignature'] = $requiresSignature;

        return $this;
    }

    /**
     * Gets requiresAuthentication
     *
     * @return bool|null
     */
    public function getRequiresAuthentication()
    {
        return $this->container['requiresAuthentication'];
    }

    /**
     * Sets requiresAuthentication
     *
     * @param bool|null $requiresAuthentication Does the electronic channel require authentication.
     *
     * @return self
     */
    public function setRequiresAuthentication($requiresAuthentication)
    {
        if (is_null($requiresAuthentication)) {
            throw new \InvalidArgumentException('non-nullable requiresAuthentication cannot be null');
        }
        $this->container['requiresAuthentication'] = $requiresAuthentication;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiAttachmentWithType[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiAttachmentWithType[]|null $attachments List of attachments.
     *
     * @return self
     */
    public function setAttachments($attachments)
    {
        if (is_null($attachments)) {
            array_push($this->openAPINullablesSetToNull, 'attachments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('attachments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets accessibilityClassification
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiAccessibilityClassification[]|null
     */
    public function getAccessibilityClassification()
    {
        return $this->container['accessibilityClassification'];
    }

    /**
     * Sets accessibilityClassification
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiAccessibilityClassification[]|null $accessibilityClassification The accessibility classification.
     *
     * @return self
     */
    public function setAccessibilityClassification($accessibilityClassification)
    {
        if (is_null($accessibilityClassification)) {
            array_push($this->openAPINullablesSetToNull, 'accessibilityClassification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accessibilityClassification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accessibilityClassification'] = $accessibilityClassification;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


