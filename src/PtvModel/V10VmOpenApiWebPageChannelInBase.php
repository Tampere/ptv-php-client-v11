<?php
/**
 * V10VmOpenApiWebPageChannelInBase
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * The version of the OpenAPI document: v11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * V10VmOpenApiWebPageChannelInBase Class Doc Comment
 *
 * @category Class
 * @description OPEN API V10 - View Model of web page channel for IN api - base
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V10VmOpenApiWebPageChannelInBase implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V10VmOpenApiWebPageChannelInBase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sourceId' => 'string',
        'supportEmails' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
        'languages' => 'string[]',
        'isVisibleForAll' => 'bool',
        'channelId' => 'string',
        'versionId' => 'string',
        'id' => 'string',
        'organizationId' => 'string',
        'serviceChannelNamesWithType' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
        'deleteAllSupportEmails' => 'bool',
        'deleteAllSupportPhones' => 'bool',
        'validFrom' => '\DateTime',
        'validTo' => '\DateTime',
        'currentPublishingStatus' => 'string',
        'serviceChannelServices' => 'string[]',
        'userName' => 'string',
        'serviceChannelNames' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
        'webPage' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
        'accessibilityClassification' => '\Tampere\PtvV11\PtvModel\VmOpenApiAccessibilityClassification[]',
        'webPages' => '\Tampere\PtvV11\PtvModel\V9VmOpenApiWebPage[]',
        'serviceHours' => '\Tampere\PtvV11\PtvModel\V11VmOpenApiServiceHour[]',
        'deleteAllWebPages' => 'bool',
        'deleteAllServiceHours' => 'bool',
        'availableLanguages' => 'string[]',
        'requiredPropertiesAvailableLanguages' => 'string[]',
        'serviceChannelDescriptions' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
        'publishingStatus' => 'string',
        'areaType' => 'string',
        'areas' => '\Tampere\PtvV11\PtvModel\VmOpenApiAreaIn[]',
        'supportPhones' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiPhone[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sourceId' => null,
        'supportEmails' => null,
        'languages' => null,
        'isVisibleForAll' => null,
        'channelId' => 'uuid',
        'versionId' => 'uuid',
        'id' => 'uuid',
        'organizationId' => null,
        'serviceChannelNamesWithType' => null,
        'deleteAllSupportEmails' => null,
        'deleteAllSupportPhones' => null,
        'validFrom' => 'date-time',
        'validTo' => 'date-time',
        'currentPublishingStatus' => null,
        'serviceChannelServices' => 'uuid',
        'userName' => null,
        'serviceChannelNames' => null,
        'webPage' => null,
        'accessibilityClassification' => null,
        'webPages' => null,
        'serviceHours' => null,
        'deleteAllWebPages' => null,
        'deleteAllServiceHours' => null,
        'availableLanguages' => null,
        'requiredPropertiesAvailableLanguages' => null,
        'serviceChannelDescriptions' => null,
        'publishingStatus' => null,
        'areaType' => null,
        'areas' => null,
        'supportPhones' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sourceId' => true,
		'supportEmails' => true,
		'languages' => true,
		'isVisibleForAll' => false,
		'channelId' => true,
		'versionId' => true,
		'id' => true,
		'organizationId' => true,
		'serviceChannelNamesWithType' => true,
		'deleteAllSupportEmails' => false,
		'deleteAllSupportPhones' => false,
		'validFrom' => true,
		'validTo' => true,
		'currentPublishingStatus' => true,
		'serviceChannelServices' => true,
		'userName' => true,
		'serviceChannelNames' => true,
		'webPage' => true,
		'accessibilityClassification' => true,
		'webPages' => true,
		'serviceHours' => true,
		'deleteAllWebPages' => false,
		'deleteAllServiceHours' => false,
		'availableLanguages' => true,
		'requiredPropertiesAvailableLanguages' => true,
		'serviceChannelDescriptions' => true,
		'publishingStatus' => false,
		'areaType' => true,
		'areas' => true,
		'supportPhones' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sourceId' => 'sourceId',
        'supportEmails' => 'supportEmails',
        'languages' => 'languages',
        'isVisibleForAll' => 'isVisibleForAll',
        'channelId' => 'channelId',
        'versionId' => 'versionId',
        'id' => 'id',
        'organizationId' => 'organizationId',
        'serviceChannelNamesWithType' => 'serviceChannelNamesWithType',
        'deleteAllSupportEmails' => 'deleteAllSupportEmails',
        'deleteAllSupportPhones' => 'deleteAllSupportPhones',
        'validFrom' => 'validFrom',
        'validTo' => 'validTo',
        'currentPublishingStatus' => 'currentPublishingStatus',
        'serviceChannelServices' => 'serviceChannelServices',
        'userName' => 'userName',
        'serviceChannelNames' => 'serviceChannelNames',
        'webPage' => 'webPage',
        'accessibilityClassification' => 'accessibilityClassification',
        'webPages' => 'webPages',
        'serviceHours' => 'serviceHours',
        'deleteAllWebPages' => 'deleteAllWebPages',
        'deleteAllServiceHours' => 'deleteAllServiceHours',
        'availableLanguages' => 'availableLanguages',
        'requiredPropertiesAvailableLanguages' => 'requiredPropertiesAvailableLanguages',
        'serviceChannelDescriptions' => 'serviceChannelDescriptions',
        'publishingStatus' => 'publishingStatus',
        'areaType' => 'areaType',
        'areas' => 'areas',
        'supportPhones' => 'supportPhones'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sourceId' => 'setSourceId',
        'supportEmails' => 'setSupportEmails',
        'languages' => 'setLanguages',
        'isVisibleForAll' => 'setIsVisibleForAll',
        'channelId' => 'setChannelId',
        'versionId' => 'setVersionId',
        'id' => 'setId',
        'organizationId' => 'setOrganizationId',
        'serviceChannelNamesWithType' => 'setServiceChannelNamesWithType',
        'deleteAllSupportEmails' => 'setDeleteAllSupportEmails',
        'deleteAllSupportPhones' => 'setDeleteAllSupportPhones',
        'validFrom' => 'setValidFrom',
        'validTo' => 'setValidTo',
        'currentPublishingStatus' => 'setCurrentPublishingStatus',
        'serviceChannelServices' => 'setServiceChannelServices',
        'userName' => 'setUserName',
        'serviceChannelNames' => 'setServiceChannelNames',
        'webPage' => 'setWebPage',
        'accessibilityClassification' => 'setAccessibilityClassification',
        'webPages' => 'setWebPages',
        'serviceHours' => 'setServiceHours',
        'deleteAllWebPages' => 'setDeleteAllWebPages',
        'deleteAllServiceHours' => 'setDeleteAllServiceHours',
        'availableLanguages' => 'setAvailableLanguages',
        'requiredPropertiesAvailableLanguages' => 'setRequiredPropertiesAvailableLanguages',
        'serviceChannelDescriptions' => 'setServiceChannelDescriptions',
        'publishingStatus' => 'setPublishingStatus',
        'areaType' => 'setAreaType',
        'areas' => 'setAreas',
        'supportPhones' => 'setSupportPhones'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sourceId' => 'getSourceId',
        'supportEmails' => 'getSupportEmails',
        'languages' => 'getLanguages',
        'isVisibleForAll' => 'getIsVisibleForAll',
        'channelId' => 'getChannelId',
        'versionId' => 'getVersionId',
        'id' => 'getId',
        'organizationId' => 'getOrganizationId',
        'serviceChannelNamesWithType' => 'getServiceChannelNamesWithType',
        'deleteAllSupportEmails' => 'getDeleteAllSupportEmails',
        'deleteAllSupportPhones' => 'getDeleteAllSupportPhones',
        'validFrom' => 'getValidFrom',
        'validTo' => 'getValidTo',
        'currentPublishingStatus' => 'getCurrentPublishingStatus',
        'serviceChannelServices' => 'getServiceChannelServices',
        'userName' => 'getUserName',
        'serviceChannelNames' => 'getServiceChannelNames',
        'webPage' => 'getWebPage',
        'accessibilityClassification' => 'getAccessibilityClassification',
        'webPages' => 'getWebPages',
        'serviceHours' => 'getServiceHours',
        'deleteAllWebPages' => 'getDeleteAllWebPages',
        'deleteAllServiceHours' => 'getDeleteAllServiceHours',
        'availableLanguages' => 'getAvailableLanguages',
        'requiredPropertiesAvailableLanguages' => 'getRequiredPropertiesAvailableLanguages',
        'serviceChannelDescriptions' => 'getServiceChannelDescriptions',
        'publishingStatus' => 'getPublishingStatus',
        'areaType' => 'getAreaType',
        'areas' => 'getAreas',
        'supportPhones' => 'getSupportPhones'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sourceId', $data ?? [], null);
        $this->setIfExists('supportEmails', $data ?? [], null);
        $this->setIfExists('languages', $data ?? [], null);
        $this->setIfExists('isVisibleForAll', $data ?? [], null);
        $this->setIfExists('channelId', $data ?? [], null);
        $this->setIfExists('versionId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('organizationId', $data ?? [], null);
        $this->setIfExists('serviceChannelNamesWithType', $data ?? [], null);
        $this->setIfExists('deleteAllSupportEmails', $data ?? [], null);
        $this->setIfExists('deleteAllSupportPhones', $data ?? [], null);
        $this->setIfExists('validFrom', $data ?? [], null);
        $this->setIfExists('validTo', $data ?? [], null);
        $this->setIfExists('currentPublishingStatus', $data ?? [], null);
        $this->setIfExists('serviceChannelServices', $data ?? [], null);
        $this->setIfExists('userName', $data ?? [], null);
        $this->setIfExists('serviceChannelNames', $data ?? [], null);
        $this->setIfExists('webPage', $data ?? [], null);
        $this->setIfExists('accessibilityClassification', $data ?? [], null);
        $this->setIfExists('webPages', $data ?? [], null);
        $this->setIfExists('serviceHours', $data ?? [], null);
        $this->setIfExists('deleteAllWebPages', $data ?? [], null);
        $this->setIfExists('deleteAllServiceHours', $data ?? [], null);
        $this->setIfExists('availableLanguages', $data ?? [], null);
        $this->setIfExists('requiredPropertiesAvailableLanguages', $data ?? [], null);
        $this->setIfExists('serviceChannelDescriptions', $data ?? [], null);
        $this->setIfExists('publishingStatus', $data ?? [], null);
        $this->setIfExists('areaType', $data ?? [], null);
        $this->setIfExists('areas', $data ?? [], null);
        $this->setIfExists('supportPhones', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sourceId']) && !preg_match("/^[A-Za-z0-9-.]*$/", $this->container['sourceId'])) {
            $invalidProperties[] = "invalid value for 'sourceId', must be conform to the pattern /^[A-Za-z0-9-.]*$/.";
        }

        if ($this->container['publishingStatus'] === null) {
            $invalidProperties[] = "'publishingStatus' can't be null";
        }
        if ((mb_strlen($this->container['publishingStatus']) < 1)) {
            $invalidProperties[] = "invalid value for 'publishingStatus', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sourceId
     *
     * @return string|null
     */
    public function getSourceId()
    {
        return $this->container['sourceId'];
    }

    /**
     * Sets sourceId
     *
     * @param string|null $sourceId External system identifier for this service channel. User needs to be logged in to be able to get/set value.
     *
     * @return self
     */
    public function setSourceId($sourceId)
    {
        if (is_null($sourceId)) {
            array_push($this->openAPINullablesSetToNull, 'sourceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($sourceId) && (!preg_match("/^[A-Za-z0-9-.]*$/", $sourceId))) {
            throw new \InvalidArgumentException("invalid value for \$sourceId when calling V10VmOpenApiWebPageChannelInBase., must conform to the pattern /^[A-Za-z0-9-.]*$/.");
        }

        $this->container['sourceId'] = $sourceId;

        return $this;
    }

    /**
     * Gets supportEmails
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null
     */
    public function getSupportEmails()
    {
        return $this->container['supportEmails'];
    }

    /**
     * Sets supportEmails
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null $supportEmails List of support email addresses for the service channel. (Max.Length: 100).
     *
     * @return self
     */
    public function setSupportEmails($supportEmails)
    {
        if (is_null($supportEmails)) {
            array_push($this->openAPINullablesSetToNull, 'supportEmails');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supportEmails', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supportEmails'] = $supportEmails;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return string[]|null
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param string[]|null $languages List of languages the service channel is available in (two letter language code).
     *
     * @return self
     */
    public function setLanguages($languages)
    {
        if (is_null($languages)) {
            array_push($this->openAPINullablesSetToNull, 'languages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('languages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets isVisibleForAll
     *
     * @return bool|null
     */
    public function getIsVisibleForAll()
    {
        return $this->container['isVisibleForAll'];
    }

    /**
     * Sets isVisibleForAll
     *
     * @param bool|null $isVisibleForAll Indicates if channel can be used (referenced within services) by other users from other organizations.
     *
     * @return self
     */
    public function setIsVisibleForAll($isVisibleForAll)
    {
        if (is_null($isVisibleForAll)) {
            throw new \InvalidArgumentException('non-nullable isVisibleForAll cannot be null');
        }
        $this->container['isVisibleForAll'] = $isVisibleForAll;

        return $this;
    }

    /**
     * Gets channelId
     *
     * @return string|null
     */
    public function getChannelId()
    {
        return $this->container['channelId'];
    }

    /**
     * Sets channelId
     *
     * @param string|null $channelId Gets or sets the special channel identifier.
     *
     * @return self
     */
    public function setChannelId($channelId)
    {
        if (is_null($channelId)) {
            array_push($this->openAPINullablesSetToNull, 'channelId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channelId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channelId'] = $channelId;

        return $this;
    }

    /**
     * Gets versionId
     *
     * @return string|null
     */
    public function getVersionId()
    {
        return $this->container['versionId'];
    }

    /**
     * Sets versionId
     *
     * @param string|null $versionId The identifier for current version.
     *
     * @return self
     */
    public function setVersionId($versionId)
    {
        if (is_null($versionId)) {
            array_push($this->openAPINullablesSetToNull, 'versionId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('versionId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['versionId'] = $versionId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id PTV identifier for the service channel.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets organizationId
     *
     * @return string|null
     */
    public function getOrganizationId()
    {
        return $this->container['organizationId'];
    }

    /**
     * Sets organizationId
     *
     * @param string|null $organizationId PTV organization identifier for organization responsible for this service channel.
     *
     * @return self
     */
    public function setOrganizationId($organizationId)
    {
        if (is_null($organizationId)) {
            array_push($this->openAPINullablesSetToNull, 'organizationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organizationId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organizationId'] = $organizationId;

        return $this;
    }

    /**
     * Gets serviceChannelNamesWithType
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null
     */
    public function getServiceChannelNamesWithType()
    {
        return $this->container['serviceChannelNamesWithType'];
    }

    /**
     * Sets serviceChannelNamesWithType
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null $serviceChannelNamesWithType Localized list of service channel names.
     *
     * @return self
     */
    public function setServiceChannelNamesWithType($serviceChannelNamesWithType)
    {
        if (is_null($serviceChannelNamesWithType)) {
            array_push($this->openAPINullablesSetToNull, 'serviceChannelNamesWithType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceChannelNamesWithType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceChannelNamesWithType'] = $serviceChannelNamesWithType;

        return $this;
    }

    /**
     * Gets deleteAllSupportEmails
     *
     * @return bool|null
     */
    public function getDeleteAllSupportEmails()
    {
        return $this->container['deleteAllSupportEmails'];
    }

    /**
     * Sets deleteAllSupportEmails
     *
     * @param bool|null $deleteAllSupportEmails Set to true to delete all existing support email addresses for the service channel. The SupportEmails collection should be empty when this property is set to true.
     *
     * @return self
     */
    public function setDeleteAllSupportEmails($deleteAllSupportEmails)
    {
        if (is_null($deleteAllSupportEmails)) {
            throw new \InvalidArgumentException('non-nullable deleteAllSupportEmails cannot be null');
        }
        $this->container['deleteAllSupportEmails'] = $deleteAllSupportEmails;

        return $this;
    }

    /**
     * Gets deleteAllSupportPhones
     *
     * @return bool|null
     */
    public function getDeleteAllSupportPhones()
    {
        return $this->container['deleteAllSupportPhones'];
    }

    /**
     * Sets deleteAllSupportPhones
     *
     * @param bool|null $deleteAllSupportPhones Set to true to delete all existing support phone numbers for the service channel. The SupportPhones collection should be empty when this property is set to true.
     *
     * @return self
     */
    public function setDeleteAllSupportPhones($deleteAllSupportPhones)
    {
        if (is_null($deleteAllSupportPhones)) {
            throw new \InvalidArgumentException('non-nullable deleteAllSupportPhones cannot be null');
        }
        $this->container['deleteAllSupportPhones'] = $deleteAllSupportPhones;

        return $this;
    }

    /**
     * Gets validFrom
     *
     * @return \DateTime|null
     */
    public function getValidFrom()
    {
        return $this->container['validFrom'];
    }

    /**
     * Sets validFrom
     *
     * @param \DateTime|null $validFrom Date when item should be published.
     *
     * @return self
     */
    public function setValidFrom($validFrom)
    {
        if (is_null($validFrom)) {
            array_push($this->openAPINullablesSetToNull, 'validFrom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validFrom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validFrom'] = $validFrom;

        return $this;
    }

    /**
     * Gets validTo
     *
     * @return \DateTime|null
     */
    public function getValidTo()
    {
        return $this->container['validTo'];
    }

    /**
     * Sets validTo
     *
     * @param \DateTime|null $validTo Date when item should be archived.
     *
     * @return self
     */
    public function setValidTo($validTo)
    {
        if (is_null($validTo)) {
            array_push($this->openAPINullablesSetToNull, 'validTo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validTo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validTo'] = $validTo;

        return $this;
    }

    /**
     * Gets currentPublishingStatus
     *
     * @return string|null
     */
    public function getCurrentPublishingStatus()
    {
        return $this->container['currentPublishingStatus'];
    }

    /**
     * Sets currentPublishingStatus
     *
     * @param string|null $currentPublishingStatus Current version publishing status.
     *
     * @return self
     */
    public function setCurrentPublishingStatus($currentPublishingStatus)
    {
        if (is_null($currentPublishingStatus)) {
            array_push($this->openAPINullablesSetToNull, 'currentPublishingStatus');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currentPublishingStatus', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currentPublishingStatus'] = $currentPublishingStatus;

        return $this;
    }

    /**
     * Gets serviceChannelServices
     *
     * @return string[]|null
     */
    public function getServiceChannelServices()
    {
        return $this->container['serviceChannelServices'];
    }

    /**
     * Sets serviceChannelServices
     *
     * @param string[]|null $serviceChannelServices Internal property for adding service relations for a service channel.
     *
     * @return self
     */
    public function setServiceChannelServices($serviceChannelServices)
    {
        if (is_null($serviceChannelServices)) {
            array_push($this->openAPINullablesSetToNull, 'serviceChannelServices');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceChannelServices', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceChannelServices'] = $serviceChannelServices;

        return $this;
    }

    /**
     * Gets userName
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['userName'];
    }

    /**
     * Sets userName
     *
     * @param string|null $userName User name.
     *
     * @return self
     */
    public function setUserName($userName)
    {
        if (is_null($userName)) {
            array_push($this->openAPINullablesSetToNull, 'userName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('userName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['userName'] = $userName;

        return $this;
    }

    /**
     * Gets serviceChannelNames
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null
     */
    public function getServiceChannelNames()
    {
        return $this->container['serviceChannelNames'];
    }

    /**
     * Sets serviceChannelNames
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null $serviceChannelNames Localized list of service channel names. (Max.Length: 100).
     *
     * @return self
     */
    public function setServiceChannelNames($serviceChannelNames)
    {
        if (is_null($serviceChannelNames)) {
            array_push($this->openAPINullablesSetToNull, 'serviceChannelNames');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceChannelNames', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceChannelNames'] = $serviceChannelNames;

        return $this;
    }

    /**
     * Gets webPage
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null
     */
    public function getWebPage()
    {
        return $this->container['webPage'];
    }

    /**
     * Sets webPage
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null $webPage List of localized urls. (Max.Length: 500).
     *
     * @return self
     */
    public function setWebPage($webPage)
    {
        if (is_null($webPage)) {
            array_push($this->openAPINullablesSetToNull, 'webPage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('webPage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['webPage'] = $webPage;

        return $this;
    }

    /**
     * Gets accessibilityClassification
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiAccessibilityClassification[]|null
     */
    public function getAccessibilityClassification()
    {
        return $this->container['accessibilityClassification'];
    }

    /**
     * Sets accessibilityClassification
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiAccessibilityClassification[]|null $accessibilityClassification The accessibility classification.
     *
     * @return self
     */
    public function setAccessibilityClassification($accessibilityClassification)
    {
        if (is_null($accessibilityClassification)) {
            array_push($this->openAPINullablesSetToNull, 'accessibilityClassification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accessibilityClassification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accessibilityClassification'] = $accessibilityClassification;

        return $this;
    }

    /**
     * Gets webPages
     *
     * @return \Tampere\PtvV11\PtvModel\V9VmOpenApiWebPage[]|null
     */
    public function getWebPages()
    {
        return $this->container['webPages'];
    }

    /**
     * Sets webPages
     *
     * @param \Tampere\PtvV11\PtvModel\V9VmOpenApiWebPage[]|null $webPages List of service channel web pages.
     *
     * @return self
     */
    public function setWebPages($webPages)
    {
        if (is_null($webPages)) {
            array_push($this->openAPINullablesSetToNull, 'webPages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('webPages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['webPages'] = $webPages;

        return $this;
    }

    /**
     * Gets serviceHours
     *
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceHour[]|null
     */
    public function getServiceHours()
    {
        return $this->container['serviceHours'];
    }

    /**
     * Sets serviceHours
     *
     * @param \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceHour[]|null $serviceHours List of service channel service hours.
     *
     * @return self
     */
    public function setServiceHours($serviceHours)
    {
        if (is_null($serviceHours)) {
            array_push($this->openAPINullablesSetToNull, 'serviceHours');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceHours', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceHours'] = $serviceHours;

        return $this;
    }

    /**
     * Gets deleteAllWebPages
     *
     * @return bool|null
     */
    public function getDeleteAllWebPages()
    {
        return $this->container['deleteAllWebPages'];
    }

    /**
     * Sets deleteAllWebPages
     *
     * @param bool|null $deleteAllWebPages Set to true to delete all existing web pages for the service channel. The WebPages collection should be empty when this property is set to true.
     *
     * @return self
     */
    public function setDeleteAllWebPages($deleteAllWebPages)
    {
        if (is_null($deleteAllWebPages)) {
            throw new \InvalidArgumentException('non-nullable deleteAllWebPages cannot be null');
        }
        $this->container['deleteAllWebPages'] = $deleteAllWebPages;

        return $this;
    }

    /**
     * Gets deleteAllServiceHours
     *
     * @return bool|null
     */
    public function getDeleteAllServiceHours()
    {
        return $this->container['deleteAllServiceHours'];
    }

    /**
     * Sets deleteAllServiceHours
     *
     * @param bool|null $deleteAllServiceHours Set to true to delete all existing service hours for the service channel. The ServiceHours collection should be empty when this property is set to true.
     *
     * @return self
     */
    public function setDeleteAllServiceHours($deleteAllServiceHours)
    {
        if (is_null($deleteAllServiceHours)) {
            throw new \InvalidArgumentException('non-nullable deleteAllServiceHours cannot be null');
        }
        $this->container['deleteAllServiceHours'] = $deleteAllServiceHours;

        return $this;
    }

    /**
     * Gets availableLanguages
     *
     * @return string[]|null
     */
    public function getAvailableLanguages()
    {
        return $this->container['availableLanguages'];
    }

    /**
     * Sets availableLanguages
     *
     * @param string[]|null $availableLanguages Gets or sets available languages
     *
     * @return self
     */
    public function setAvailableLanguages($availableLanguages)
    {
        if (is_null($availableLanguages)) {
            array_push($this->openAPINullablesSetToNull, 'availableLanguages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('availableLanguages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['availableLanguages'] = $availableLanguages;

        return $this;
    }

    /**
     * Gets requiredPropertiesAvailableLanguages
     *
     * @return string[]|null
     */
    public function getRequiredPropertiesAvailableLanguages()
    {
        return $this->container['requiredPropertiesAvailableLanguages'];
    }

    /**
     * Sets requiredPropertiesAvailableLanguages
     *
     * @param string[]|null $requiredPropertiesAvailableLanguages Internal property to check the languages within required lists: ServiceChannelNames, ServiceChannelDescriptions  and ChannelUrls lists.
     *
     * @return self
     */
    public function setRequiredPropertiesAvailableLanguages($requiredPropertiesAvailableLanguages)
    {
        if (is_null($requiredPropertiesAvailableLanguages)) {
            array_push($this->openAPINullablesSetToNull, 'requiredPropertiesAvailableLanguages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requiredPropertiesAvailableLanguages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requiredPropertiesAvailableLanguages'] = $requiredPropertiesAvailableLanguages;

        return $this;
    }

    /**
     * Gets serviceChannelDescriptions
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null
     */
    public function getServiceChannelDescriptions()
    {
        return $this->container['serviceChannelDescriptions'];
    }

    /**
     * Sets serviceChannelDescriptions
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null $serviceChannelDescriptions List of localized service channel descriptions. Possible type values are: Summary, Description. (Max.Length: 150 Summary).
     *
     * @return self
     */
    public function setServiceChannelDescriptions($serviceChannelDescriptions)
    {
        if (is_null($serviceChannelDescriptions)) {
            array_push($this->openAPINullablesSetToNull, 'serviceChannelDescriptions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceChannelDescriptions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceChannelDescriptions'] = $serviceChannelDescriptions;

        return $this;
    }

    /**
     * Gets publishingStatus
     *
     * @return string
     */
    public function getPublishingStatus()
    {
        return $this->container['publishingStatus'];
    }

    /**
     * Sets publishingStatus
     *
     * @param string $publishingStatus Service channel publishing status. Values: Draft, Published, Deleted or Modified.
     *
     * @return self
     */
    public function setPublishingStatus($publishingStatus)
    {
        if (is_null($publishingStatus)) {
            throw new \InvalidArgumentException('non-nullable publishingStatus cannot be null');
        }

        if ((mb_strlen($publishingStatus) < 1)) {
            throw new \InvalidArgumentException('invalid length for $publishingStatus when calling V10VmOpenApiWebPageChannelInBase., must be bigger than or equal to 1.');
        }

        $this->container['publishingStatus'] = $publishingStatus;

        return $this;
    }

    /**
     * Gets areaType
     *
     * @return string|null
     */
    public function getAreaType()
    {
        return $this->container['areaType'];
    }

    /**
     * Sets areaType
     *
     * @param string|null $areaType Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.
     *
     * @return self
     */
    public function setAreaType($areaType)
    {
        if (is_null($areaType)) {
            array_push($this->openAPINullablesSetToNull, 'areaType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('areaType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['areaType'] = $areaType;

        return $this;
    }

    /**
     * Gets areas
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiAreaIn[]|null
     */
    public function getAreas()
    {
        return $this->container['areas'];
    }

    /**
     * Sets areas
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiAreaIn[]|null $areas List of areas. List can contain different types of areas.
     *
     * @return self
     */
    public function setAreas($areas)
    {
        if (is_null($areas)) {
            array_push($this->openAPINullablesSetToNull, 'areas');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('areas', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['areas'] = $areas;

        return $this;
    }

    /**
     * Gets supportPhones
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiPhone[]|null
     */
    public function getSupportPhones()
    {
        return $this->container['supportPhones'];
    }

    /**
     * Sets supportPhones
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiPhone[]|null $supportPhones List of support phone numbers for the service channel.
     *
     * @return self
     */
    public function setSupportPhones($supportPhones)
    {
        if (is_null($supportPhones)) {
            array_push($this->openAPINullablesSetToNull, 'supportPhones');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supportPhones', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supportPhones'] = $supportPhones;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


