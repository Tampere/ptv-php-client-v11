<?php
/**
 * V7VmOpenApiFintoItemWithDescription
 *
 * PHP version 5
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * OpenAPI spec version: v11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * V7VmOpenApiFintoItemWithDescription Class Doc Comment
 *
 * @category Class
 * @description OPEN API V7 - View Model of finto item with description
 * @package  Tampere\PtvV11
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V7VmOpenApiFintoItemWithDescription implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'V7VmOpenApiFintoItemWithDescription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'name' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
'description' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
'code' => 'string',
'ontologyType' => 'string',
'uri' => 'string',
'parentId' => 'string',
'parentUri' => 'string',
'override' => 'bool',
'newUri' => 'string',
'newParentUri' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
'name' => null,
'description' => null,
'code' => null,
'ontologyType' => null,
'uri' => null,
'parentId' => 'uuid',
'parentUri' => null,
'override' => null,
'newUri' => null,
'newParentUri' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'description' => 'description',
'code' => 'code',
'ontologyType' => 'ontologyType',
'uri' => 'uri',
'parentId' => 'parentId',
'parentUri' => 'parentUri',
'override' => 'override',
'newUri' => 'newUri',
'newParentUri' => 'newParentUri'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'description' => 'setDescription',
'code' => 'setCode',
'ontologyType' => 'setOntologyType',
'uri' => 'setUri',
'parentId' => 'setParentId',
'parentUri' => 'setParentUri',
'override' => 'setOverride',
'newUri' => 'setNewUri',
'newParentUri' => 'setNewParentUri'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'description' => 'getDescription',
'code' => 'getCode',
'ontologyType' => 'getOntologyType',
'uri' => 'getUri',
'parentId' => 'getParentId',
'parentUri' => 'getParentUri',
'override' => 'getOverride',
'newUri' => 'getNewUri',
'newParentUri' => 'getNewParentUri'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['ontologyType'] = isset($data['ontologyType']) ? $data['ontologyType'] : null;
        $this->container['uri'] = isset($data['uri']) ? $data['uri'] : null;
        $this->container['parentId'] = isset($data['parentId']) ? $data['parentId'] : null;
        $this->container['parentUri'] = isset($data['parentUri']) ? $data['parentUri'] : null;
        $this->container['override'] = isset($data['override']) ? $data['override'] : null;
        $this->container['newUri'] = isset($data['newUri']) ? $data['newUri'] : null;
        $this->container['newParentUri'] = isset($data['newParentUri']) ? $data['newParentUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Entity Guid identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[] $name List of localized entity names.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[] $description List of localized entity descriptions.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Entity code.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets ontologyType
     *
     * @return string
     */
    public function getOntologyType()
    {
        return $this->container['ontologyType'];
    }

    /**
     * Sets ontologyType
     *
     * @param string $ontologyType Ontology term type.
     *
     * @return $this
     */
    public function setOntologyType($ontologyType)
    {
        $this->container['ontologyType'] = $ontologyType;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string $uri Entity uri.
     *
     * @return $this
     */
    public function setUri($uri)
    {
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets parentId
     *
     * @return string
     */
    public function getParentId()
    {
        return $this->container['parentId'];
    }

    /**
     * Sets parentId
     *
     * @param string $parentId Entity parent identifier.
     *
     * @return $this
     */
    public function setParentId($parentId)
    {
        $this->container['parentId'] = $parentId;

        return $this;
    }

    /**
     * Gets parentUri
     *
     * @return string
     */
    public function getParentUri()
    {
        return $this->container['parentUri'];
    }

    /**
     * Sets parentUri
     *
     * @param string $parentUri Entity parent uri.
     *
     * @return $this
     */
    public function setParentUri($parentUri)
    {
        $this->container['parentUri'] = $parentUri;

        return $this;
    }

    /**
     * Gets override
     *
     * @return bool
     */
    public function getOverride()
    {
        return $this->container['override'];
    }

    /**
     * Sets override
     *
     * @param bool $override Indicates if item is overriden by general description.
     *
     * @return $this
     */
    public function setOverride($override)
    {
        $this->container['override'] = $override;

        return $this;
    }

    /**
     * Gets newUri
     *
     * @return string
     */
    public function getNewUri()
    {
        return $this->container['newUri'];
    }

    /**
     * Sets newUri
     *
     * @param string $newUri New URI from Y-platform.
     *
     * @return $this
     */
    public function setNewUri($newUri)
    {
        $this->container['newUri'] = $newUri;

        return $this;
    }

    /**
     * Gets newParentUri
     *
     * @return string
     */
    public function getNewParentUri()
    {
        return $this->container['newParentUri'];
    }

    /**
     * Sets newParentUri
     *
     * @param string $newParentUri New parent URI from Y-platform.
     *
     * @return $this
     */
    public function setNewParentUri($newParentUri)
    {
        $this->container['newParentUri'] = $newParentUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
