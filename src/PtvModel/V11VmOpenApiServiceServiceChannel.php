<?php
/**
 * V11VmOpenApiServiceServiceChannel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * OpenAPI spec version: v11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * V11VmOpenApiServiceServiceChannel Class Doc Comment
 *
 * @category Class
 * @description OPEN API V11 - View Model of service service channel
 * @package  Tampere\PtvV11
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V11VmOpenApiServiceServiceChannel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'V11VmOpenApiServiceServiceChannel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'serviceChargeType' => 'string',
'description' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
'serviceHours' => '\Tampere\PtvV11\PtvModel\V11VmOpenApiServiceHour[]',
'isASTIConnection' => 'bool',
'ownerReferenceId' => 'string',
'serviceChannel' => '\Tampere\PtvV11\PtvModel\VmOpenApiItem',
'extraTypes' => '\Tampere\PtvV11\PtvModel\V9VmOpenApiExtraType[]',
'contactDetails' => '\Tampere\PtvV11\PtvModel\V9VmOpenApiContactDetails',
'digitalAuthorizations' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]',
'modified' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'serviceChargeType' => null,
'description' => null,
'serviceHours' => null,
'isASTIConnection' => null,
'ownerReferenceId' => 'uuid',
'serviceChannel' => null,
'extraTypes' => null,
'contactDetails' => null,
'digitalAuthorizations' => null,
'modified' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'serviceChargeType' => 'serviceChargeType',
'description' => 'description',
'serviceHours' => 'serviceHours',
'isASTIConnection' => 'isASTIConnection',
'ownerReferenceId' => 'ownerReferenceId',
'serviceChannel' => 'serviceChannel',
'extraTypes' => 'extraTypes',
'contactDetails' => 'contactDetails',
'digitalAuthorizations' => 'digitalAuthorizations',
'modified' => 'modified'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'serviceChargeType' => 'setServiceChargeType',
'description' => 'setDescription',
'serviceHours' => 'setServiceHours',
'isASTIConnection' => 'setIsASTIConnection',
'ownerReferenceId' => 'setOwnerReferenceId',
'serviceChannel' => 'setServiceChannel',
'extraTypes' => 'setExtraTypes',
'contactDetails' => 'setContactDetails',
'digitalAuthorizations' => 'setDigitalAuthorizations',
'modified' => 'setModified'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'serviceChargeType' => 'getServiceChargeType',
'description' => 'getDescription',
'serviceHours' => 'getServiceHours',
'isASTIConnection' => 'getIsASTIConnection',
'ownerReferenceId' => 'getOwnerReferenceId',
'serviceChannel' => 'getServiceChannel',
'extraTypes' => 'getExtraTypes',
'contactDetails' => 'getContactDetails',
'digitalAuthorizations' => 'getDigitalAuthorizations',
'modified' => 'getModified'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['serviceChargeType'] = isset($data['serviceChargeType']) ? $data['serviceChargeType'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['serviceHours'] = isset($data['serviceHours']) ? $data['serviceHours'] : null;
        $this->container['isASTIConnection'] = isset($data['isASTIConnection']) ? $data['isASTIConnection'] : null;
        $this->container['ownerReferenceId'] = isset($data['ownerReferenceId']) ? $data['ownerReferenceId'] : null;
        $this->container['serviceChannel'] = isset($data['serviceChannel']) ? $data['serviceChannel'] : null;
        $this->container['extraTypes'] = isset($data['extraTypes']) ? $data['extraTypes'] : null;
        $this->container['contactDetails'] = isset($data['contactDetails']) ? $data['contactDetails'] : null;
        $this->container['digitalAuthorizations'] = isset($data['digitalAuthorizations']) ? $data['digitalAuthorizations'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets serviceChargeType
     *
     * @return string
     */
    public function getServiceChargeType()
    {
        return isset($this->container['serviceChargeType']) ? $this->container['serviceChargeType'] : null;
    }

    /**
     * Sets serviceChargeType
     *
     * @param string $serviceChargeType Service charge type. Possible values are: Chargeable, FreeOfCharge or Other.
     *
     * @return $this
     */
    public function setServiceChargeType($serviceChargeType)
    {
        $this->container['serviceChargeType'] = $serviceChargeType;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]
     */
    public function getDescription()
    {
        return isset($this->container['description']) ? $this->container['description'] : null;
    }

    /**
     * Sets description
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[] $description List of localized service channel relationship descriptions. (Max.Length: 500 Description). (Max.Length: 500 ChargeTypeAdditionalInfo).
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets serviceHours
     *
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceHour[]
     */
    public function getServiceHours()
    {
        return isset($this->container['serviceHours']) ? $this->container['serviceHours'] : null;
    }

    /**
     * Sets serviceHours
     *
     * @param \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceHour[] $serviceHours List of connection related service hours.
     *
     * @return $this
     */
    public function setServiceHours($serviceHours)
    {
        $this->container['serviceHours'] = $serviceHours;

        return $this;
    }

    /**
     * Gets isASTIConnection
     *
     * @return bool
     */
    public function getIsASTIConnection()
    {
        return isset($this->container['isASTIConnection']) ? $this->container['isASTIConnection'] : null;
    }

    /**
     * Sets isASTIConnection
     *
     * @param bool $isASTIConnection Indicates if connection between service and service channel is ASTI related.
     *
     * @return $this
     */
    public function setIsASTIConnection($isASTIConnection)
    {
        $this->container['isASTIConnection'] = $isASTIConnection;

        return $this;
    }

    /**
     * Gets ownerReferenceId
     *
     * @return string
     */
    public function getOwnerReferenceId()
    {
        return isset($this->container['ownerReferenceId']) ? $this->container['ownerReferenceId'] : null;
    }

    /**
     * Sets ownerReferenceId
     *
     * @param string $ownerReferenceId Contact details for connection.
     *
     * @return $this
     */
    public function setOwnerReferenceId($ownerReferenceId)
    {
        $this->container['ownerReferenceId'] = $ownerReferenceId;

        return $this;
    }

    /**
     * Gets serviceChannel
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiItem
     */
    public function getServiceChannel()
    {
        return isset($this->container['serviceChannel']) ? $this->container['serviceChannel'] : null;
    }

    /**
     * Sets serviceChannel
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiItem $serviceChannel serviceChannel
     *
     * @return $this
     */
    public function setServiceChannel($serviceChannel)
    {
        $this->container['serviceChannel'] = $serviceChannel;

        return $this;
    }

    /**
     * Gets extraTypes
     *
     * @return \Tampere\PtvV11\PtvModel\V9VmOpenApiExtraType[]
     */
    public function getExtraTypes()
    {
        return isset($this->container['extraTypes']) ? $this->container['extraTypes'] : null;
    }

    /**
     * Sets extraTypes
     *
     * @param \Tampere\PtvV11\PtvModel\V9VmOpenApiExtraType[] $extraTypes The extra types related to service and service channel connection.
     *
     * @return $this
     */
    public function setExtraTypes($extraTypes)
    {
        $this->container['extraTypes'] = $extraTypes;

        return $this;
    }

    /**
     * Gets contactDetails
     *
     * @return \Tampere\PtvV11\PtvModel\V9VmOpenApiContactDetails
     */
    public function getContactDetails()
    {
        return isset($this->container['contactDetails']) ? $this->container['contactDetails'] : null;
    }

    /**
     * Sets contactDetails
     *
     * @param \Tampere\PtvV11\PtvModel\V9VmOpenApiContactDetails $contactDetails contactDetails
     *
     * @return $this
     */
    public function setContactDetails($contactDetails)
    {
        $this->container['contactDetails'] = $contactDetails;

        return $this;
    }

    /**
     * Gets digitalAuthorizations
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]
     */
    public function getDigitalAuthorizations()
    {
        return isset($this->container['digitalAuthorizations']) ? $this->container['digitalAuthorizations'] : null;
    }

    /**
     * Sets digitalAuthorizations
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[] $digitalAuthorizations List of digital authorizations related to the service.
     *
     * @return $this
     */
    public function setDigitalAuthorizations($digitalAuthorizations)
    {
        $this->container['digitalAuthorizations'] = $digitalAuthorizations;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime
     */
    public function getModified()
    {
        return isset($this->container['modified']) ? $this->container['modified'] : null;
    }

    /**
     * Sets modified
     *
     * @param \DateTime $modified Date when connection was modified/created (UTC).
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
