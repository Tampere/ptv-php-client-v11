<?php
/**
 * V10VmOpenApiGeneralDescriptionIn
 *
 * PHP version 5
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * OpenAPI spec version: v11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * V10VmOpenApiGeneralDescriptionIn Class Doc Comment
 *
 * @category Class
 * @description OPEN API V10 - View Model of general description for IN api (POST)
 * @package  Tampere\PtvV11
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V10VmOpenApiGeneralDescriptionIn implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'V10VmOpenApiGeneralDescriptionIn';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sourceId' => 'string',
'requirements' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
'legislation' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiLaw[]',
'generalDescriptionTypeId' => 'string',
'availableLanguages' => 'string[]',
'versionId' => 'string',
'id' => 'string',
'lifeEvents' => 'string[]',
'industrialClasses' => 'string[]',
'currentPublishingStatus' => 'string',
'requiredPropertiesAvailableLanguages' => 'string[]',
'type' => 'string',
'serviceChargeType' => 'string',
'names' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
'descriptions' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
'serviceClasses' => 'string[]',
'ontologyTerms' => 'string[]',
'targetGroups' => 'string[]',
'generalDescriptionType' => 'string',
'publishingStatus' => 'string',
'deleteAllIndustrialClasses' => 'bool',
'deleteAllLaws' => 'bool',
'deleteAllLifeEvents' => 'bool',
'deleteServiceChargeType' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sourceId' => null,
'requirements' => null,
'legislation' => null,
'generalDescriptionTypeId' => 'uuid',
'availableLanguages' => null,
'versionId' => 'uuid',
'id' => 'uuid',
'lifeEvents' => null,
'industrialClasses' => null,
'currentPublishingStatus' => null,
'requiredPropertiesAvailableLanguages' => null,
'type' => null,
'serviceChargeType' => null,
'names' => null,
'descriptions' => null,
'serviceClasses' => null,
'ontologyTerms' => null,
'targetGroups' => null,
'generalDescriptionType' => null,
'publishingStatus' => null,
'deleteAllIndustrialClasses' => null,
'deleteAllLaws' => null,
'deleteAllLifeEvents' => null,
'deleteServiceChargeType' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sourceId' => 'sourceId',
'requirements' => 'requirements',
'legislation' => 'legislation',
'generalDescriptionTypeId' => 'generalDescriptionTypeId',
'availableLanguages' => 'availableLanguages',
'versionId' => 'versionId',
'id' => 'id',
'lifeEvents' => 'lifeEvents',
'industrialClasses' => 'industrialClasses',
'currentPublishingStatus' => 'currentPublishingStatus',
'requiredPropertiesAvailableLanguages' => 'requiredPropertiesAvailableLanguages',
'type' => 'type',
'serviceChargeType' => 'serviceChargeType',
'names' => 'names',
'descriptions' => 'descriptions',
'serviceClasses' => 'serviceClasses',
'ontologyTerms' => 'ontologyTerms',
'targetGroups' => 'targetGroups',
'generalDescriptionType' => 'generalDescriptionType',
'publishingStatus' => 'publishingStatus',
'deleteAllIndustrialClasses' => 'deleteAllIndustrialClasses',
'deleteAllLaws' => 'deleteAllLaws',
'deleteAllLifeEvents' => 'deleteAllLifeEvents',
'deleteServiceChargeType' => 'deleteServiceChargeType'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sourceId' => 'setSourceId',
'requirements' => 'setRequirements',
'legislation' => 'setLegislation',
'generalDescriptionTypeId' => 'setGeneralDescriptionTypeId',
'availableLanguages' => 'setAvailableLanguages',
'versionId' => 'setVersionId',
'id' => 'setId',
'lifeEvents' => 'setLifeEvents',
'industrialClasses' => 'setIndustrialClasses',
'currentPublishingStatus' => 'setCurrentPublishingStatus',
'requiredPropertiesAvailableLanguages' => 'setRequiredPropertiesAvailableLanguages',
'type' => 'setType',
'serviceChargeType' => 'setServiceChargeType',
'names' => 'setNames',
'descriptions' => 'setDescriptions',
'serviceClasses' => 'setServiceClasses',
'ontologyTerms' => 'setOntologyTerms',
'targetGroups' => 'setTargetGroups',
'generalDescriptionType' => 'setGeneralDescriptionType',
'publishingStatus' => 'setPublishingStatus',
'deleteAllIndustrialClasses' => 'setDeleteAllIndustrialClasses',
'deleteAllLaws' => 'setDeleteAllLaws',
'deleteAllLifeEvents' => 'setDeleteAllLifeEvents',
'deleteServiceChargeType' => 'setDeleteServiceChargeType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sourceId' => 'getSourceId',
'requirements' => 'getRequirements',
'legislation' => 'getLegislation',
'generalDescriptionTypeId' => 'getGeneralDescriptionTypeId',
'availableLanguages' => 'getAvailableLanguages',
'versionId' => 'getVersionId',
'id' => 'getId',
'lifeEvents' => 'getLifeEvents',
'industrialClasses' => 'getIndustrialClasses',
'currentPublishingStatus' => 'getCurrentPublishingStatus',
'requiredPropertiesAvailableLanguages' => 'getRequiredPropertiesAvailableLanguages',
'type' => 'getType',
'serviceChargeType' => 'getServiceChargeType',
'names' => 'getNames',
'descriptions' => 'getDescriptions',
'serviceClasses' => 'getServiceClasses',
'ontologyTerms' => 'getOntologyTerms',
'targetGroups' => 'getTargetGroups',
'generalDescriptionType' => 'getGeneralDescriptionType',
'publishingStatus' => 'getPublishingStatus',
'deleteAllIndustrialClasses' => 'getDeleteAllIndustrialClasses',
'deleteAllLaws' => 'getDeleteAllLaws',
'deleteAllLifeEvents' => 'getDeleteAllLifeEvents',
'deleteServiceChargeType' => 'getDeleteServiceChargeType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sourceId'] = isset($data['sourceId']) ? $data['sourceId'] : null;
        $this->container['requirements'] = isset($data['requirements']) ? $data['requirements'] : null;
        $this->container['legislation'] = isset($data['legislation']) ? $data['legislation'] : null;
        $this->container['generalDescriptionTypeId'] = isset($data['generalDescriptionTypeId']) ? $data['generalDescriptionTypeId'] : null;
        $this->container['availableLanguages'] = isset($data['availableLanguages']) ? $data['availableLanguages'] : null;
        $this->container['versionId'] = isset($data['versionId']) ? $data['versionId'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['lifeEvents'] = isset($data['lifeEvents']) ? $data['lifeEvents'] : null;
        $this->container['industrialClasses'] = isset($data['industrialClasses']) ? $data['industrialClasses'] : null;
        $this->container['currentPublishingStatus'] = isset($data['currentPublishingStatus']) ? $data['currentPublishingStatus'] : null;
        $this->container['requiredPropertiesAvailableLanguages'] = isset($data['requiredPropertiesAvailableLanguages']) ? $data['requiredPropertiesAvailableLanguages'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['serviceChargeType'] = isset($data['serviceChargeType']) ? $data['serviceChargeType'] : null;
        $this->container['names'] = isset($data['names']) ? $data['names'] : null;
        $this->container['descriptions'] = isset($data['descriptions']) ? $data['descriptions'] : null;
        $this->container['serviceClasses'] = isset($data['serviceClasses']) ? $data['serviceClasses'] : null;
        $this->container['ontologyTerms'] = isset($data['ontologyTerms']) ? $data['ontologyTerms'] : null;
        $this->container['targetGroups'] = isset($data['targetGroups']) ? $data['targetGroups'] : null;
        $this->container['generalDescriptionType'] = isset($data['generalDescriptionType']) ? $data['generalDescriptionType'] : null;
        $this->container['publishingStatus'] = isset($data['publishingStatus']) ? $data['publishingStatus'] : null;
        $this->container['deleteAllIndustrialClasses'] = isset($data['deleteAllIndustrialClasses']) ? $data['deleteAllIndustrialClasses'] : null;
        $this->container['deleteAllLaws'] = isset($data['deleteAllLaws']) ? $data['deleteAllLaws'] : null;
        $this->container['deleteAllLifeEvents'] = isset($data['deleteAllLifeEvents']) ? $data['deleteAllLifeEvents'] : null;
        $this->container['deleteServiceChargeType'] = isset($data['deleteServiceChargeType']) ? $data['deleteServiceChargeType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['names'] === null) {
            $invalidProperties[] = "'names' can't be null";
        }
        if ($this->container['descriptions'] === null) {
            $invalidProperties[] = "'descriptions' can't be null";
        }
        if ($this->container['serviceClasses'] === null) {
            $invalidProperties[] = "'serviceClasses' can't be null";
        }
        if ($this->container['ontologyTerms'] === null) {
            $invalidProperties[] = "'ontologyTerms' can't be null";
        }
        if ($this->container['targetGroups'] === null) {
            $invalidProperties[] = "'targetGroups' can't be null";
        }
        if ($this->container['generalDescriptionType'] === null) {
            $invalidProperties[] = "'generalDescriptionType' can't be null";
        }
        if ($this->container['publishingStatus'] === null) {
            $invalidProperties[] = "'publishingStatus' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sourceId
     *
     * @return string
     */
    public function getSourceId()
    {
        return isset($this->container['sourceId']) ? $this->container['sourceId'] : null;
    }

    /**
     * Sets sourceId
     *
     * @param string $sourceId External system identifier. User needs to be logged in to be able to get/set value.
     *
     * @return $this
     */
    public function setSourceId($sourceId)
    {
        $this->container['sourceId'] = $sourceId;

        return $this;
    }

    /**
     * Gets requirements
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]
     */
    public function getRequirements()
    {
        return isset($this->container['requirements']) ? $this->container['requirements'] : null;
    }

    /**
     * Sets requirements
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[] $requirements Localized service usage requirements (description of requirement). (Max.Length: 2500).
     *
     * @return $this
     */
    public function setRequirements($requirements)
    {
        $this->container['requirements'] = $requirements;

        return $this;
    }

    /**
     * Gets legislation
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiLaw[]
     */
    public function getLegislation()
    {
        return isset($this->container['legislation']) ? $this->container['legislation'] : null;
    }

    /**
     * Sets legislation
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiLaw[] $legislation Laws that a general description is based on.
     *
     * @return $this
     */
    public function setLegislation($legislation)
    {
        $this->container['legislation'] = $legislation;

        return $this;
    }

    /**
     * Gets generalDescriptionTypeId
     *
     * @return string
     */
    public function getGeneralDescriptionTypeId()
    {
        return isset($this->container['generalDescriptionTypeId']) ? $this->container['generalDescriptionTypeId'] : null;
    }

    /**
     * Sets generalDescriptionTypeId
     *
     * @param string $generalDescriptionTypeId General description type id. Used internally to check the restrictions for usage.  In older versions: Default general description is Municipality.
     *
     * @return $this
     */
    public function setGeneralDescriptionTypeId($generalDescriptionTypeId)
    {
        $this->container['generalDescriptionTypeId'] = $generalDescriptionTypeId;

        return $this;
    }

    /**
     * Gets availableLanguages
     *
     * @return string[]
     */
    public function getAvailableLanguages()
    {
        return isset($this->container['availableLanguages']) ? $this->container['availableLanguages'] : null;
    }

    /**
     * Sets availableLanguages
     *
     * @param string[] $availableLanguages Gets or sets available languages
     *
     * @return $this
     */
    public function setAvailableLanguages($availableLanguages)
    {
        $this->container['availableLanguages'] = $availableLanguages;

        return $this;
    }

    /**
     * Gets versionId
     *
     * @return string
     */
    public function getVersionId()
    {
        return isset($this->container['versionId']) ? $this->container['versionId'] : null;
    }

    /**
     * Sets versionId
     *
     * @param string $versionId The identifier for current version.
     *
     * @return $this
     */
    public function setVersionId($versionId)
    {
        $this->container['versionId'] = $versionId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return isset($this->container['id']) ? $this->container['id'] : null;
    }

    /**
     * Sets id
     *
     * @param string $id Entity Guid identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lifeEvents
     *
     * @return string[]
     */
    public function getLifeEvents()
    {
        return isset($this->container['lifeEvents']) ? $this->container['lifeEvents'] : null;
    }

    /**
     * Sets lifeEvents
     *
     * @param string[] $lifeEvents List of life event urls. Sample url: http://urn.fi/URN:NBN:fi:au:ptvl:v3017
     *
     * @return $this
     */
    public function setLifeEvents($lifeEvents)
    {
        $this->container['lifeEvents'] = $lifeEvents;

        return $this;
    }

    /**
     * Gets industrialClasses
     *
     * @return string[]
     */
    public function getIndustrialClasses()
    {
        return isset($this->container['industrialClasses']) ? $this->container['industrialClasses'] : null;
    }

    /**
     * Sets industrialClasses
     *
     * @param string[] $industrialClasses List of industrial class codes (see http://tilastokeskus.fi/meta/luokitukset/toimiala/001-2008/tekstitiedosto_en.txt).
     *
     * @return $this
     */
    public function setIndustrialClasses($industrialClasses)
    {
        $this->container['industrialClasses'] = $industrialClasses;

        return $this;
    }

    /**
     * Gets currentPublishingStatus
     *
     * @return string
     */
    public function getCurrentPublishingStatus()
    {
        return isset($this->container['currentPublishingStatus']) ? $this->container['currentPublishingStatus'] : null;
    }

    /**
     * Sets currentPublishingStatus
     *
     * @param string $currentPublishingStatus Current version publishing status.
     *
     * @return $this
     */
    public function setCurrentPublishingStatus($currentPublishingStatus)
    {
        $this->container['currentPublishingStatus'] = $currentPublishingStatus;

        return $this;
    }

    /**
     * Gets requiredPropertiesAvailableLanguages
     *
     * @return string[]
     */
    public function getRequiredPropertiesAvailableLanguages()
    {
        return isset($this->container['requiredPropertiesAvailableLanguages']) ? $this->container['requiredPropertiesAvailableLanguages'] : null;
    }

    /**
     * Sets requiredPropertiesAvailableLanguages
     *
     * @param string[] $requiredPropertiesAvailableLanguages Internal property to check the languages within required lists: Names and Descriptions
     *
     * @return $this
     */
    public function setRequiredPropertiesAvailableLanguages($requiredPropertiesAvailableLanguages)
    {
        $this->container['requiredPropertiesAvailableLanguages'] = $requiredPropertiesAvailableLanguages;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return isset($this->container['type']) ? $this->container['type'] : null;
    }

    /**
     * Sets type
     *
     * @param string $type Service type. Possible values are: Service, PermitOrObligation or ProfessionalQualification.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets serviceChargeType
     *
     * @return string
     */
    public function getServiceChargeType()
    {
        return isset($this->container['serviceChargeType']) ? $this->container['serviceChargeType'] : null;
    }

    /**
     * Sets serviceChargeType
     *
     * @param string $serviceChargeType Service charge type. Possible values are:  Chargeable or FreeOfCharge.
     *
     * @return $this
     */
    public function setServiceChargeType($serviceChargeType)
    {
        $this->container['serviceChargeType'] = $serviceChargeType;

        return $this;
    }

    /**
     * Gets names
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]
     */
    public function getNames()
    {
        return isset($this->container['names']) ? $this->container['names'] : null;
    }

    /**
     * Sets names
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[] $names List of name entities. Possible type values are: Name, AlternativeName.   Sample single JSON object: {\"language\": \"fi\", \"value\": \"Perhepäivähoito esiopetusikäisille\", \"type\": \"Name\"}.
     *
     * @return $this
     */
    public function setNames($names)
    {
        $this->container['names'] = $names;

        return $this;
    }

    /**
     * Gets descriptions
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]
     */
    public function getDescriptions()
    {
        return isset($this->container['descriptions']) ? $this->container['descriptions'] : null;
    }

    /**
     * Sets descriptions
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[] $descriptions List of description entities. Requires two entities where ones type is \"Description\" or \"BackgroundDescription\" and the other ones type is \"Summary\".  Sample single JSON object: {\"language\": \"fi\", \"value\": \"Lyhyen kuvauksen kuvaus esimerkki teksti.\", \"type\": \"Summary\"}.  Other optional description types are UserInstruction, ChargeTypeAdditionalInfo, DeadLine, ProcessingTime, ValidityTime, GeneralDescriptionTypeAdditionalInformation.
     *
     * @return $this
     */
    public function setDescriptions($descriptions)
    {
        $this->container['descriptions'] = $descriptions;

        return $this;
    }

    /**
     * Gets serviceClasses
     *
     * @return string[]
     */
    public function getServiceClasses()
    {
        return isset($this->container['serviceClasses']) ? $this->container['serviceClasses'] : null;
    }

    /**
     * Sets serviceClasses
     *
     * @param string[] $serviceClasses List of service class urls. Sample url: http://urn.fi/URN:NBN:fi:au:ptvl:v1065
     *
     * @return $this
     */
    public function setServiceClasses($serviceClasses)
    {
        $this->container['serviceClasses'] = $serviceClasses;

        return $this;
    }

    /**
     * Gets ontologyTerms
     *
     * @return string[]
     */
    public function getOntologyTerms()
    {
        return isset($this->container['ontologyTerms']) ? $this->container['ontologyTerms'] : null;
    }

    /**
     * Sets ontologyTerms
     *
     * @param string[] $ontologyTerms List of ontology term urls. Sample url: http://www.yso.fi/onto/koko/p2435
     *
     * @return $this
     */
    public function setOntologyTerms($ontologyTerms)
    {
        $this->container['ontologyTerms'] = $ontologyTerms;

        return $this;
    }

    /**
     * Gets targetGroups
     *
     * @return string[]
     */
    public function getTargetGroups()
    {
        return isset($this->container['targetGroups']) ? $this->container['targetGroups'] : null;
    }

    /**
     * Sets targetGroups
     *
     * @param string[] $targetGroups List of target group urls. Sample url: http://urn.fi/URN:NBN:fi:au:ptvl:v2004
     *
     * @return $this
     */
    public function setTargetGroups($targetGroups)
    {
        $this->container['targetGroups'] = $targetGroups;

        return $this;
    }

    /**
     * Gets generalDescriptionType
     *
     * @return string
     */
    public function getGeneralDescriptionType()
    {
        return isset($this->container['generalDescriptionType']) ? $this->container['generalDescriptionType'] : null;
    }

    /**
     * Sets generalDescriptionType
     *
     * @param string $generalDescriptionType General description type. Possible values are: Municipality, BusinessSubregion, Church.
     *
     * @return $this
     */
    public function setGeneralDescriptionType($generalDescriptionType)
    {
        $this->container['generalDescriptionType'] = $generalDescriptionType;

        return $this;
    }

    /**
     * Gets publishingStatus
     *
     * @return string
     */
    public function getPublishingStatus()
    {
        return isset($this->container['publishingStatus']) ? $this->container['publishingStatus'] : null;
    }

    /**
     * Sets publishingStatus
     *
     * @param string $publishingStatus Publishing status. Possible values are: Draft or Published.
     *
     * @return $this
     */
    public function setPublishingStatus($publishingStatus)
    {
        $this->container['publishingStatus'] = $publishingStatus;

        return $this;
    }

    /**
     * Gets deleteAllIndustrialClasses
     *
     * @return bool
     */
    public function getDeleteAllIndustrialClasses()
    {
        return isset($this->container['deleteAllIndustrialClasses']) ? $this->container['deleteAllIndustrialClasses'] : null;
    }

    /**
     * Sets deleteAllIndustrialClasses
     *
     * @param bool $deleteAllIndustrialClasses Set to true to delete all existing industrial classes (the IndustrialClasses collection for this object should be empty collection when this option is used).
     *
     * @return $this
     */
    public function setDeleteAllIndustrialClasses($deleteAllIndustrialClasses)
    {
        $this->container['deleteAllIndustrialClasses'] = $deleteAllIndustrialClasses;

        return $this;
    }

    /**
     * Gets deleteAllLaws
     *
     * @return bool
     */
    public function getDeleteAllLaws()
    {
        return isset($this->container['deleteAllLaws']) ? $this->container['deleteAllLaws'] : null;
    }

    /**
     * Sets deleteAllLaws
     *
     * @param bool $deleteAllLaws Set to true to delete all existing laws within legislation (the legislation collection for this object should be empty collection when this option is used).
     *
     * @return $this
     */
    public function setDeleteAllLaws($deleteAllLaws)
    {
        $this->container['deleteAllLaws'] = $deleteAllLaws;

        return $this;
    }

    /**
     * Gets deleteAllLifeEvents
     *
     * @return bool
     */
    public function getDeleteAllLifeEvents()
    {
        return isset($this->container['deleteAllLifeEvents']) ? $this->container['deleteAllLifeEvents'] : null;
    }

    /**
     * Sets deleteAllLifeEvents
     *
     * @param bool $deleteAllLifeEvents Set to true to delete all existing life events (the LifeEvents collection for this object should be empty collection when this option is used).
     *
     * @return $this
     */
    public function setDeleteAllLifeEvents($deleteAllLifeEvents)
    {
        $this->container['deleteAllLifeEvents'] = $deleteAllLifeEvents;

        return $this;
    }

    /**
     * Gets deleteServiceChargeType
     *
     * @return bool
     */
    public function getDeleteServiceChargeType()
    {
        return isset($this->container['deleteServiceChargeType']) ? $this->container['deleteServiceChargeType'] : null;
    }

    /**
     * Sets deleteServiceChargeType
     *
     * @param bool $deleteServiceChargeType Set to true to delete service charge type (ServiceChargeType property for this object should be empty when this option is used).
     *
     * @return $this
     */
    public function setDeleteServiceChargeType($deleteServiceChargeType)
    {
        $this->container['deleteServiceChargeType'] = $deleteServiceChargeType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
