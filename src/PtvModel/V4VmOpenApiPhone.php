<?php
/**
 * V4VmOpenApiPhone
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * The version of the OpenAPI document: v11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * V4VmOpenApiPhone Class Doc Comment
 *
 * @category Class
 * @description OPEN API V4 - View Model of phone
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V4VmOpenApiPhone implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V4VmOpenApiPhone';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'number' => 'string',
        'language' => 'string',
        'ownerReferenceId' => 'string',
        'ownerReferenceId2' => 'string',
        'orderNumber' => 'int',
        'prefixNumber' => 'string',
        'isFinnishServiceNumber' => 'bool',
        'additionalInformation' => 'string',
        'serviceChargeType' => 'string',
        'chargeDescription' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'number' => 'tel',
        'language' => null,
        'ownerReferenceId' => 'uuid',
        'ownerReferenceId2' => 'uuid',
        'orderNumber' => 'int32',
        'prefixNumber' => null,
        'isFinnishServiceNumber' => null,
        'additionalInformation' => null,
        'serviceChargeType' => null,
        'chargeDescription' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'number' => false,
		'language' => false,
		'ownerReferenceId' => true,
		'ownerReferenceId2' => true,
		'orderNumber' => true,
		'prefixNumber' => true,
		'isFinnishServiceNumber' => false,
		'additionalInformation' => true,
		'serviceChargeType' => true,
		'chargeDescription' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'number' => 'number',
        'language' => 'language',
        'ownerReferenceId' => 'ownerReferenceId',
        'ownerReferenceId2' => 'ownerReferenceId2',
        'orderNumber' => 'orderNumber',
        'prefixNumber' => 'prefixNumber',
        'isFinnishServiceNumber' => 'isFinnishServiceNumber',
        'additionalInformation' => 'additionalInformation',
        'serviceChargeType' => 'serviceChargeType',
        'chargeDescription' => 'chargeDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'number' => 'setNumber',
        'language' => 'setLanguage',
        'ownerReferenceId' => 'setOwnerReferenceId',
        'ownerReferenceId2' => 'setOwnerReferenceId2',
        'orderNumber' => 'setOrderNumber',
        'prefixNumber' => 'setPrefixNumber',
        'isFinnishServiceNumber' => 'setIsFinnishServiceNumber',
        'additionalInformation' => 'setAdditionalInformation',
        'serviceChargeType' => 'setServiceChargeType',
        'chargeDescription' => 'setChargeDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'number' => 'getNumber',
        'language' => 'getLanguage',
        'ownerReferenceId' => 'getOwnerReferenceId',
        'ownerReferenceId2' => 'getOwnerReferenceId2',
        'orderNumber' => 'getOrderNumber',
        'prefixNumber' => 'getPrefixNumber',
        'isFinnishServiceNumber' => 'getIsFinnishServiceNumber',
        'additionalInformation' => 'getAdditionalInformation',
        'serviceChargeType' => 'getServiceChargeType',
        'chargeDescription' => 'getChargeDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('ownerReferenceId', $data ?? [], null);
        $this->setIfExists('ownerReferenceId2', $data ?? [], null);
        $this->setIfExists('orderNumber', $data ?? [], null);
        $this->setIfExists('prefixNumber', $data ?? [], null);
        $this->setIfExists('isFinnishServiceNumber', $data ?? [], null);
        $this->setIfExists('additionalInformation', $data ?? [], null);
        $this->setIfExists('serviceChargeType', $data ?? [], null);
        $this->setIfExists('chargeDescription', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ((mb_strlen($this->container['number']) < 1)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^\\d{1,20}$/", $this->container['number'])) {
            $invalidProperties[] = "invalid value for 'number', must be conform to the pattern /^\\d{1,20}$/.";
        }

        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        if ((mb_strlen($this->container['language']) < 1)) {
            $invalidProperties[] = "invalid value for 'language', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['additionalInformation']) && (mb_strlen($this->container['additionalInformation']) > 150)) {
            $invalidProperties[] = "invalid value for 'additionalInformation', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['chargeDescription']) && (mb_strlen($this->container['chargeDescription']) > 150)) {
            $invalidProperties[] = "invalid value for 'chargeDescription', the character length must be smaller than or equal to 150.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Gets or sets the identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Phone number.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }

        if ((mb_strlen($number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $number when calling V4VmOpenApiPhone., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\+?\\d{1,20}$/", $number))) {
            throw new \InvalidArgumentException("invalid value for \$number when calling V4VmOpenApiPhone., must conform to the pattern /^\\+?\\d{1,20}$/.");
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language Language of this object. Valid values are: fi, sv or en.
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }

        if ((mb_strlen($language) < 1)) {
            throw new \InvalidArgumentException('invalid length for $language when calling V4VmOpenApiPhone., must be bigger than or equal to 1.');
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets ownerReferenceId
     *
     * @return string|null
     */
    public function getOwnerReferenceId()
    {
        return $this->container['ownerReferenceId'];
    }

    /**
     * Sets ownerReferenceId
     *
     * @param string|null $ownerReferenceId Gets or sets the owner reference identifier.
     *
     * @return self
     */
    public function setOwnerReferenceId($ownerReferenceId)
    {
        if (is_null($ownerReferenceId)) {
            array_push($this->openAPINullablesSetToNull, 'ownerReferenceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ownerReferenceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ownerReferenceId'] = $ownerReferenceId;

        return $this;
    }

    /**
     * Gets ownerReferenceId2
     *
     * @return string|null
     */
    public function getOwnerReferenceId2()
    {
        return $this->container['ownerReferenceId2'];
    }

    /**
     * Sets ownerReferenceId2
     *
     * @param string|null $ownerReferenceId2 Gets or sets the owner reference identifier.
     *
     * @return self
     */
    public function setOwnerReferenceId2($ownerReferenceId2)
    {
        if (is_null($ownerReferenceId2)) {
            array_push($this->openAPINullablesSetToNull, 'ownerReferenceId2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ownerReferenceId2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ownerReferenceId2'] = $ownerReferenceId2;

        return $this;
    }

    /**
     * Gets orderNumber
     *
     * @return int|null
     */
    public function getOrderNumber()
    {
        return $this->container['orderNumber'];
    }

    /**
     * Sets orderNumber
     *
     * @param int|null $orderNumber The order of phone number.
     *
     * @return self
     */
    public function setOrderNumber($orderNumber)
    {
        if (is_null($orderNumber)) {
            array_push($this->openAPINullablesSetToNull, 'orderNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orderNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orderNumber'] = $orderNumber;

        return $this;
    }

    /**
     * Gets prefixNumber
     *
     * @return string|null
     */
    public function getPrefixNumber()
    {
        return $this->container['prefixNumber'];
    }

    /**
     * Sets prefixNumber
     *
     * @param string|null $prefixNumber Prefix for the phone number.
     *
     * @return self
     */
    public function setPrefixNumber($prefixNumber)
    {
        if (is_null($prefixNumber)) {
            array_push($this->openAPINullablesSetToNull, 'prefixNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prefixNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prefixNumber'] = $prefixNumber;

        return $this;
    }

    /**
     * Gets isFinnishServiceNumber
     *
     * @return bool|null
     */
    public function getIsFinnishServiceNumber()
    {
        return $this->container['isFinnishServiceNumber'];
    }

    /**
     * Sets isFinnishServiceNumber
     *
     * @param bool|null $isFinnishServiceNumber Defines if number is Finnish service number. If true prefix number can be left empty.
     *
     * @return self
     */
    public function setIsFinnishServiceNumber($isFinnishServiceNumber)
    {
        if (is_null($isFinnishServiceNumber)) {
            throw new \InvalidArgumentException('non-nullable isFinnishServiceNumber cannot be null');
        }
        $this->container['isFinnishServiceNumber'] = $isFinnishServiceNumber;

        return $this;
    }

    /**
     * Gets additionalInformation
     *
     * @return string|null
     */
    public function getAdditionalInformation()
    {
        return $this->container['additionalInformation'];
    }

    /**
     * Sets additionalInformation
     *
     * @param string|null $additionalInformation Additional information. (Max.Length: 150).
     *
     * @return self
     */
    public function setAdditionalInformation($additionalInformation)
    {
        if (is_null($additionalInformation)) {
            array_push($this->openAPINullablesSetToNull, 'additionalInformation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additionalInformation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additionalInformation) && (mb_strlen($additionalInformation) > 150)) {
            throw new \InvalidArgumentException('invalid length for $additionalInformation when calling V4VmOpenApiPhone., must be smaller than or equal to 150.');
        }

        $this->container['additionalInformation'] = $additionalInformation;

        return $this;
    }

    /**
     * Gets serviceChargeType
     *
     * @return string|null
     */
    public function getServiceChargeType()
    {
        return $this->container['serviceChargeType'];
    }

    /**
     * Sets serviceChargeType
     *
     * @param string|null $serviceChargeType Service charge type. Possible values are: Chargeable, FreeOfCharge or Other.  In version 7 and older: Charged, Free or Other.
     *
     * @return self
     */
    public function setServiceChargeType($serviceChargeType)
    {
        if (is_null($serviceChargeType)) {
            array_push($this->openAPINullablesSetToNull, 'serviceChargeType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceChargeType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceChargeType'] = $serviceChargeType;

        return $this;
    }

    /**
     * Gets chargeDescription
     *
     * @return string|null
     */
    public function getChargeDescription()
    {
        return $this->container['chargeDescription'];
    }

    /**
     * Sets chargeDescription
     *
     * @param string|null $chargeDescription Charge description. (Max.Length: 150).
     *
     * @return self
     */
    public function setChargeDescription($chargeDescription)
    {
        if (is_null($chargeDescription)) {
            array_push($this->openAPINullablesSetToNull, 'chargeDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chargeDescription', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($chargeDescription) && (mb_strlen($chargeDescription) > 150)) {
            throw new \InvalidArgumentException('invalid length for $chargeDescription when calling V4VmOpenApiPhone., must be smaller than or equal to 150.');
        }

        $this->container['chargeDescription'] = $chargeDescription;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


