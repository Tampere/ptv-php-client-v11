<?php
/**
 * V11VmOpenApiServiceHour
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * The version of the OpenAPI document: v11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * V11VmOpenApiServiceHour Class Doc Comment
 *
 * @category Class
 * @description OPEN API V11 - View Model of service hour
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V11VmOpenApiServiceHour implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V11VmOpenApiServiceHour';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'serviceHourType' => 'string',
        'validFrom' => '\DateTime',
        'validTo' => '\DateTime',
        'isClosed' => 'bool',
        'validForNow' => 'bool',
        'isAlwaysOpen' => 'bool',
        'isReservation' => 'bool',
        'additionalInformation' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
        'openingHour' => '\Tampere\PtvV11\PtvModel\V8VmOpenApiDailyOpeningTime[]',
        'orderNumber' => 'int',
        'ownerReferenceId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'serviceHourType' => null,
        'validFrom' => 'date-time',
        'validTo' => 'date-time',
        'isClosed' => null,
        'validForNow' => null,
        'isAlwaysOpen' => null,
        'isReservation' => null,
        'additionalInformation' => null,
        'openingHour' => null,
        'orderNumber' => 'int32',
        'ownerReferenceId' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'serviceHourType' => false,
		'validFrom' => true,
		'validTo' => true,
		'isClosed' => false,
		'validForNow' => false,
		'isAlwaysOpen' => false,
		'isReservation' => false,
		'additionalInformation' => true,
		'openingHour' => true,
		'orderNumber' => true,
		'ownerReferenceId' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'serviceHourType' => 'serviceHourType',
        'validFrom' => 'validFrom',
        'validTo' => 'validTo',
        'isClosed' => 'isClosed',
        'validForNow' => 'validForNow',
        'isAlwaysOpen' => 'isAlwaysOpen',
        'isReservation' => 'isReservation',
        'additionalInformation' => 'additionalInformation',
        'openingHour' => 'openingHour',
        'orderNumber' => 'orderNumber',
        'ownerReferenceId' => 'ownerReferenceId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'serviceHourType' => 'setServiceHourType',
        'validFrom' => 'setValidFrom',
        'validTo' => 'setValidTo',
        'isClosed' => 'setIsClosed',
        'validForNow' => 'setValidForNow',
        'isAlwaysOpen' => 'setIsAlwaysOpen',
        'isReservation' => 'setIsReservation',
        'additionalInformation' => 'setAdditionalInformation',
        'openingHour' => 'setOpeningHour',
        'orderNumber' => 'setOrderNumber',
        'ownerReferenceId' => 'setOwnerReferenceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'serviceHourType' => 'getServiceHourType',
        'validFrom' => 'getValidFrom',
        'validTo' => 'getValidTo',
        'isClosed' => 'getIsClosed',
        'validForNow' => 'getValidForNow',
        'isAlwaysOpen' => 'getIsAlwaysOpen',
        'isReservation' => 'getIsReservation',
        'additionalInformation' => 'getAdditionalInformation',
        'openingHour' => 'getOpeningHour',
        'orderNumber' => 'getOrderNumber',
        'ownerReferenceId' => 'getOwnerReferenceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('serviceHourType', $data ?? [], null);
        $this->setIfExists('validFrom', $data ?? [], null);
        $this->setIfExists('validTo', $data ?? [], null);
        $this->setIfExists('isClosed', $data ?? [], null);
        $this->setIfExists('validForNow', $data ?? [], null);
        $this->setIfExists('isAlwaysOpen', $data ?? [], null);
        $this->setIfExists('isReservation', $data ?? [], null);
        $this->setIfExists('additionalInformation', $data ?? [], null);
        $this->setIfExists('openingHour', $data ?? [], null);
        $this->setIfExists('orderNumber', $data ?? [], null);
        $this->setIfExists('ownerReferenceId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['serviceHourType'] === null) {
            $invalidProperties[] = "'serviceHourType' can't be null";
        }
        if ((mb_strlen($this->container['serviceHourType']) < 1)) {
            $invalidProperties[] = "invalid value for 'serviceHourType', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets serviceHourType
     *
     * @return string
     */
    public function getServiceHourType()
    {
        return $this->container['serviceHourType'];
    }

    /**
     * Sets serviceHourType
     *
     * @param string $serviceHourType Type of service hour. Valid values are: DaysOfTheWeek, Exceptional or OverMidnight.  In version 7 and older: Standard, Exception or Special.
     *
     * @return self
     */
    public function setServiceHourType($serviceHourType)
    {
        if (is_null($serviceHourType)) {
            throw new \InvalidArgumentException('non-nullable serviceHourType cannot be null');
        }

        if ((mb_strlen($serviceHourType) < 1)) {
            throw new \InvalidArgumentException('invalid length for $serviceHourType when calling V11VmOpenApiServiceHour., must be bigger than or equal to 1.');
        }

        $this->container['serviceHourType'] = $serviceHourType;

        return $this;
    }

    /**
     * Gets validFrom
     *
     * @return \DateTime|null
     */
    public function getValidFrom()
    {
        return $this->container['validFrom'];
    }

    /**
     * Sets validFrom
     *
     * @param \DateTime|null $validFrom Date time where from this entry is valid.
     *
     * @return self
     */
    public function setValidFrom($validFrom)
    {
        if (is_null($validFrom)) {
            array_push($this->openAPINullablesSetToNull, 'validFrom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validFrom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validFrom'] = $validFrom;

        return $this;
    }

    /**
     * Gets validTo
     *
     * @return \DateTime|null
     */
    public function getValidTo()
    {
        return $this->container['validTo'];
    }

    /**
     * Sets validTo
     *
     * @param \DateTime|null $validTo Date time to this entry is valid.
     *
     * @return self
     */
    public function setValidTo($validTo)
    {
        if (is_null($validTo)) {
            array_push($this->openAPINullablesSetToNull, 'validTo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validTo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validTo'] = $validTo;

        return $this;
    }

    /**
     * Gets isClosed
     *
     * @return bool|null
     */
    public function getIsClosed()
    {
        return $this->container['isClosed'];
    }

    /**
     * Sets isClosed
     *
     * @param bool|null $isClosed Set to true to present a time between the valid from and to times as closed.
     *
     * @return self
     */
    public function setIsClosed($isClosed)
    {
        if (is_null($isClosed)) {
            throw new \InvalidArgumentException('non-nullable isClosed cannot be null');
        }
        $this->container['isClosed'] = $isClosed;

        return $this;
    }

    /**
     * Gets validForNow
     *
     * @return bool|null
     */
    public function getValidForNow()
    {
        return $this->container['validForNow'];
    }

    /**
     * Sets validForNow
     *
     * @param bool|null $validForNow Set to true to present that this entry is valid for now.
     *
     * @return self
     */
    public function setValidForNow($validForNow)
    {
        if (is_null($validForNow)) {
            throw new \InvalidArgumentException('non-nullable validForNow cannot be null');
        }
        $this->container['validForNow'] = $validForNow;

        return $this;
    }

    /**
     * Gets isAlwaysOpen
     *
     * @return bool|null
     */
    public function getIsAlwaysOpen()
    {
        return $this->container['isAlwaysOpen'];
    }

    /**
     * Sets isAlwaysOpen
     *
     * @param bool|null $isAlwaysOpen Set to true to present a time between the valid from and to times as allways open.
     *
     * @return self
     */
    public function setIsAlwaysOpen($isAlwaysOpen)
    {
        if (is_null($isAlwaysOpen)) {
            throw new \InvalidArgumentException('non-nullable isAlwaysOpen cannot be null');
        }
        $this->container['isAlwaysOpen'] = $isAlwaysOpen;

        return $this;
    }

    /**
     * Gets isReservation
     *
     * @return bool|null
     */
    public function getIsReservation()
    {
        return $this->container['isReservation'];
    }

    /**
     * Sets isReservation
     *
     * @param bool|null $isReservation Gets or sets a value indicating whether this instance is open on reservation.
     *
     * @return self
     */
    public function setIsReservation($isReservation)
    {
        if (is_null($isReservation)) {
            throw new \InvalidArgumentException('non-nullable isReservation cannot be null');
        }
        $this->container['isReservation'] = $isReservation;

        return $this;
    }

    /**
     * Gets additionalInformation
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null
     */
    public function getAdditionalInformation()
    {
        return $this->container['additionalInformation'];
    }

    /**
     * Sets additionalInformation
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null $additionalInformation Localized list of additional information. (Max.Length: 150).
     *
     * @return self
     */
    public function setAdditionalInformation($additionalInformation)
    {
        if (is_null($additionalInformation)) {
            array_push($this->openAPINullablesSetToNull, 'additionalInformation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additionalInformation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additionalInformation'] = $additionalInformation;

        return $this;
    }

    /**
     * Gets openingHour
     *
     * @return \Tampere\PtvV11\PtvModel\V8VmOpenApiDailyOpeningTime[]|null
     */
    public function getOpeningHour()
    {
        return $this->container['openingHour'];
    }

    /**
     * Sets openingHour
     *
     * @param \Tampere\PtvV11\PtvModel\V8VmOpenApiDailyOpeningTime[]|null $openingHour Gets or sets the opening hour.
     *
     * @return self
     */
    public function setOpeningHour($openingHour)
    {
        if (is_null($openingHour)) {
            array_push($this->openAPINullablesSetToNull, 'openingHour');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('openingHour', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['openingHour'] = $openingHour;

        return $this;
    }

    /**
     * Gets orderNumber
     *
     * @return int|null
     */
    public function getOrderNumber()
    {
        return $this->container['orderNumber'];
    }

    /**
     * Sets orderNumber
     *
     * @param int|null $orderNumber The order of service hours.
     *
     * @return self
     */
    public function setOrderNumber($orderNumber)
    {
        if (is_null($orderNumber)) {
            array_push($this->openAPINullablesSetToNull, 'orderNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orderNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orderNumber'] = $orderNumber;

        return $this;
    }

    /**
     * Gets ownerReferenceId
     *
     * @return string|null
     */
    public function getOwnerReferenceId()
    {
        return $this->container['ownerReferenceId'];
    }

    /**
     * Sets ownerReferenceId
     *
     * @param string|null $ownerReferenceId Gets or sets the owner reference identifier.
     *
     * @return self
     */
    public function setOwnerReferenceId($ownerReferenceId)
    {
        if (is_null($ownerReferenceId)) {
            array_push($this->openAPINullablesSetToNull, 'ownerReferenceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ownerReferenceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ownerReferenceId'] = $ownerReferenceId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


