<?php
/**
 * V11VmOpenApiService
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * The version of the OpenAPI document: v11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * V11VmOpenApiService Class Doc Comment
 *
 * @category Class
 * @description OPEN API V11 - View Model of service
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V11VmOpenApiService implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V11VmOpenApiService';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'sourceId' => 'string',
        'type' => 'string',
        'fundingType' => 'string',
        'serviceNames' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
        'serviceChargeType' => 'string',
        'areaType' => 'string',
        'serviceDescriptions' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
        'languages' => 'string[]',
        'legislation' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiLaw[]',
        'keywords' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
        'requirements' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
        'serviceVouchersInUse' => 'bool',
        'serviceVouchers' => '\Tampere\PtvV11\PtvModel\V9VmOpenApiServiceVoucher[]',
        'versionId' => 'string',
        'generalDescriptionId' => 'string',
        'subType' => 'string',
        'areas' => '\Tampere\PtvV11\PtvModel\VmOpenApiArea[]',
        'serviceClasses' => '\Tampere\PtvV11\PtvModel\V7VmOpenApiFintoItemWithDescription[]',
        'ontologyTerms' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiOntologyTerm[]',
        'targetGroups' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]',
        'lifeEvents' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]',
        'industrialClasses' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]',
        'serviceChannels' => '\Tampere\PtvV11\PtvModel\V11VmOpenApiServiceServiceChannel[]',
        'organizations' => '\Tampere\PtvV11\PtvModel\V6VmOpenApiServiceOrganization[]',
        'serviceCollections' => '\Tampere\PtvV11\PtvModel\VmOpenApiServiceServiceCollection[]',
        'publishingStatus' => 'string',
        'modified' => '\DateTime',
        'responsibleSoteOrganization' => 'string',
        'mainOrganization' => '\Tampere\PtvV11\PtvModel\VmOpenApiItem',
        'serviceProducers' => '\Tampere\PtvV11\PtvModel\VmOpenApiServiceProducer[]',
        'security' => '\Tampere\PtvV11\PtvModel\ISecurityOwnOrganization',
        'municipalities' => '\Tampere\PtvV11\PtvModel\VmOpenApiMunicipality[]',
        'availableLanguages' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'sourceId' => null,
        'type' => null,
        'fundingType' => null,
        'serviceNames' => null,
        'serviceChargeType' => null,
        'areaType' => null,
        'serviceDescriptions' => null,
        'languages' => null,
        'legislation' => null,
        'keywords' => null,
        'requirements' => null,
        'serviceVouchersInUse' => null,
        'serviceVouchers' => null,
        'versionId' => 'uuid',
        'generalDescriptionId' => 'uuid',
        'subType' => null,
        'areas' => null,
        'serviceClasses' => null,
        'ontologyTerms' => null,
        'targetGroups' => null,
        'lifeEvents' => null,
        'industrialClasses' => null,
        'serviceChannels' => null,
        'organizations' => null,
        'serviceCollections' => null,
        'publishingStatus' => null,
        'modified' => 'date-time',
        'responsibleSoteOrganization' => null,
        'mainOrganization' => null,
        'serviceProducers' => null,
        'security' => null,
        'municipalities' => null,
        'availableLanguages' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'sourceId' => true,
		'type' => true,
		'fundingType' => true,
		'serviceNames' => true,
		'serviceChargeType' => true,
		'areaType' => true,
		'serviceDescriptions' => true,
		'languages' => true,
		'legislation' => true,
		'keywords' => true,
		'requirements' => true,
		'serviceVouchersInUse' => false,
		'serviceVouchers' => true,
		'versionId' => true,
		'generalDescriptionId' => true,
		'subType' => true,
		'areas' => true,
		'serviceClasses' => true,
		'ontologyTerms' => true,
		'targetGroups' => true,
		'lifeEvents' => true,
		'industrialClasses' => true,
		'serviceChannels' => true,
		'organizations' => true,
		'serviceCollections' => true,
		'publishingStatus' => true,
		'modified' => false,
		'responsibleSoteOrganization' => true,
		'mainOrganization' => false,
		'serviceProducers' => true,
		'security' => false,
		'municipalities' => true,
		'availableLanguages' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'sourceId' => 'sourceId',
        'type' => 'type',
        'fundingType' => 'fundingType',
        'serviceNames' => 'serviceNames',
        'serviceChargeType' => 'serviceChargeType',
        'areaType' => 'areaType',
        'serviceDescriptions' => 'serviceDescriptions',
        'languages' => 'languages',
        'legislation' => 'legislation',
        'keywords' => 'keywords',
        'requirements' => 'requirements',
        'serviceVouchersInUse' => 'serviceVouchersInUse',
        'serviceVouchers' => 'serviceVouchers',
        'versionId' => 'versionId',
        'generalDescriptionId' => 'generalDescriptionId',
        'subType' => 'subType',
        'areas' => 'areas',
        'serviceClasses' => 'serviceClasses',
        'ontologyTerms' => 'ontologyTerms',
        'targetGroups' => 'targetGroups',
        'lifeEvents' => 'lifeEvents',
        'industrialClasses' => 'industrialClasses',
        'serviceChannels' => 'serviceChannels',
        'organizations' => 'organizations',
        'serviceCollections' => 'serviceCollections',
        'publishingStatus' => 'publishingStatus',
        'modified' => 'modified',
        'responsibleSoteOrganization' => 'responsibleSoteOrganization',
        'mainOrganization' => 'mainOrganization',
        'serviceProducers' => 'serviceProducers',
        'security' => 'security',
        'municipalities' => 'municipalities',
        'availableLanguages' => 'availableLanguages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'sourceId' => 'setSourceId',
        'type' => 'setType',
        'fundingType' => 'setFundingType',
        'serviceNames' => 'setServiceNames',
        'serviceChargeType' => 'setServiceChargeType',
        'areaType' => 'setAreaType',
        'serviceDescriptions' => 'setServiceDescriptions',
        'languages' => 'setLanguages',
        'legislation' => 'setLegislation',
        'keywords' => 'setKeywords',
        'requirements' => 'setRequirements',
        'serviceVouchersInUse' => 'setServiceVouchersInUse',
        'serviceVouchers' => 'setServiceVouchers',
        'versionId' => 'setVersionId',
        'generalDescriptionId' => 'setGeneralDescriptionId',
        'subType' => 'setSubType',
        'areas' => 'setAreas',
        'serviceClasses' => 'setServiceClasses',
        'ontologyTerms' => 'setOntologyTerms',
        'targetGroups' => 'setTargetGroups',
        'lifeEvents' => 'setLifeEvents',
        'industrialClasses' => 'setIndustrialClasses',
        'serviceChannels' => 'setServiceChannels',
        'organizations' => 'setOrganizations',
        'serviceCollections' => 'setServiceCollections',
        'publishingStatus' => 'setPublishingStatus',
        'modified' => 'setModified',
        'responsibleSoteOrganization' => 'setResponsibleSoteOrganization',
        'mainOrganization' => 'setMainOrganization',
        'serviceProducers' => 'setServiceProducers',
        'security' => 'setSecurity',
        'municipalities' => 'setMunicipalities',
        'availableLanguages' => 'setAvailableLanguages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'sourceId' => 'getSourceId',
        'type' => 'getType',
        'fundingType' => 'getFundingType',
        'serviceNames' => 'getServiceNames',
        'serviceChargeType' => 'getServiceChargeType',
        'areaType' => 'getAreaType',
        'serviceDescriptions' => 'getServiceDescriptions',
        'languages' => 'getLanguages',
        'legislation' => 'getLegislation',
        'keywords' => 'getKeywords',
        'requirements' => 'getRequirements',
        'serviceVouchersInUse' => 'getServiceVouchersInUse',
        'serviceVouchers' => 'getServiceVouchers',
        'versionId' => 'getVersionId',
        'generalDescriptionId' => 'getGeneralDescriptionId',
        'subType' => 'getSubType',
        'areas' => 'getAreas',
        'serviceClasses' => 'getServiceClasses',
        'ontologyTerms' => 'getOntologyTerms',
        'targetGroups' => 'getTargetGroups',
        'lifeEvents' => 'getLifeEvents',
        'industrialClasses' => 'getIndustrialClasses',
        'serviceChannels' => 'getServiceChannels',
        'organizations' => 'getOrganizations',
        'serviceCollections' => 'getServiceCollections',
        'publishingStatus' => 'getPublishingStatus',
        'modified' => 'getModified',
        'responsibleSoteOrganization' => 'getResponsibleSoteOrganization',
        'mainOrganization' => 'getMainOrganization',
        'serviceProducers' => 'getServiceProducers',
        'security' => 'getSecurity',
        'municipalities' => 'getMunicipalities',
        'availableLanguages' => 'getAvailableLanguages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('sourceId', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('fundingType', $data ?? [], null);
        $this->setIfExists('serviceNames', $data ?? [], null);
        $this->setIfExists('serviceChargeType', $data ?? [], null);
        $this->setIfExists('areaType', $data ?? [], null);
        $this->setIfExists('serviceDescriptions', $data ?? [], null);
        $this->setIfExists('languages', $data ?? [], null);
        $this->setIfExists('legislation', $data ?? [], null);
        $this->setIfExists('keywords', $data ?? [], null);
        $this->setIfExists('requirements', $data ?? [], null);
        $this->setIfExists('serviceVouchersInUse', $data ?? [], null);
        $this->setIfExists('serviceVouchers', $data ?? [], null);
        $this->setIfExists('versionId', $data ?? [], null);
        $this->setIfExists('generalDescriptionId', $data ?? [], null);
        $this->setIfExists('subType', $data ?? [], null);
        $this->setIfExists('areas', $data ?? [], null);
        $this->setIfExists('serviceClasses', $data ?? [], null);
        $this->setIfExists('ontologyTerms', $data ?? [], null);
        $this->setIfExists('targetGroups', $data ?? [], null);
        $this->setIfExists('lifeEvents', $data ?? [], null);
        $this->setIfExists('industrialClasses', $data ?? [], null);
        $this->setIfExists('serviceChannels', $data ?? [], null);
        $this->setIfExists('organizations', $data ?? [], null);
        $this->setIfExists('serviceCollections', $data ?? [], null);
        $this->setIfExists('publishingStatus', $data ?? [], null);
        $this->setIfExists('modified', $data ?? [], null);
        $this->setIfExists('responsibleSoteOrganization', $data ?? [], null);
        $this->setIfExists('mainOrganization', $data ?? [], null);
        $this->setIfExists('serviceProducers', $data ?? [], null);
        $this->setIfExists('security', $data ?? [], null);
        $this->setIfExists('municipalities', $data ?? [], null);
        $this->setIfExists('availableLanguages', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sourceId']) && !preg_match("/^[A-Za-z0-9-.]*$/", $this->container['sourceId'])) {
            $invalidProperties[] = "invalid value for 'sourceId', must be conform to the pattern /^[A-Za-z0-9-.]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Entity identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sourceId
     *
     * @return string|null
     */
    public function getSourceId()
    {
        return $this->container['sourceId'];
    }

    /**
     * Sets sourceId
     *
     * @param string|null $sourceId External system identifier for the entity. User needs to be logged in to be able to get/set value.
     *
     * @return self
     */
    public function setSourceId($sourceId)
    {
        if (is_null($sourceId)) {
            array_push($this->openAPINullablesSetToNull, 'sourceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($sourceId) && (!preg_match("/^[A-Za-z0-9-.]*$/", $sourceId))) {
            throw new \InvalidArgumentException("invalid value for \$sourceId when calling V11VmOpenApiService., must conform to the pattern /^[A-Za-z0-9-.]*$/.");
        }

        $this->container['sourceId'] = $sourceId;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Service type. Possible values are: Service, PermitOrObligation or ProfessionalQualification. In version 7 Service, PermissionAndObligation or ProfessionalQualifications.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets fundingType
     *
     * @return string|null
     */
    public function getFundingType()
    {
        return $this->container['fundingType'];
    }

    /**
     * Sets fundingType
     *
     * @param string|null $fundingType Service funding type. Possible values are: PubliclyFunded or MarketFunded.
     *
     * @return self
     */
    public function setFundingType($fundingType)
    {
        if (is_null($fundingType)) {
            array_push($this->openAPINullablesSetToNull, 'fundingType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fundingType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fundingType'] = $fundingType;

        return $this;
    }

    /**
     * Gets serviceNames
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null
     */
    public function getServiceNames()
    {
        return $this->container['serviceNames'];
    }

    /**
     * Sets serviceNames
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null $serviceNames List of localized service names. Possible type values are: Name, AlternativeName (in version 7 AlternateName). (Max.Length: 100).
     *
     * @return self
     */
    public function setServiceNames($serviceNames)
    {
        if (is_null($serviceNames)) {
            array_push($this->openAPINullablesSetToNull, 'serviceNames');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceNames', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceNames'] = $serviceNames;

        return $this;
    }

    /**
     * Gets serviceChargeType
     *
     * @return string|null
     */
    public function getServiceChargeType()
    {
        return $this->container['serviceChargeType'];
    }

    /**
     * Sets serviceChargeType
     *
     * @param string|null $serviceChargeType Service charge type. Possible values are: Chargeable or FreeOfCharge.  In version 7: Charged or Free.  NOTE! If service charge type has been defined within attached statutory service general description, the charge type for service is ignored.
     *
     * @return self
     */
    public function setServiceChargeType($serviceChargeType)
    {
        if (is_null($serviceChargeType)) {
            array_push($this->openAPINullablesSetToNull, 'serviceChargeType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceChargeType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceChargeType'] = $serviceChargeType;

        return $this;
    }

    /**
     * Gets areaType
     *
     * @return string|null
     */
    public function getAreaType()
    {
        return $this->container['areaType'];
    }

    /**
     * Sets areaType
     *
     * @param string|null $areaType Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.  In version 7: WholeCountry, WholeCountryExceptAlandIslands, AreaType.
     *
     * @return self
     */
    public function setAreaType($areaType)
    {
        if (is_null($areaType)) {
            array_push($this->openAPINullablesSetToNull, 'areaType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('areaType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['areaType'] = $areaType;

        return $this;
    }

    /**
     * Gets serviceDescriptions
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null
     */
    public function getServiceDescriptions()
    {
        return $this->container['serviceDescriptions'];
    }

    /**
     * Sets serviceDescriptions
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null $serviceDescriptions List of localized service descriptions. Possible type values are: Description, Summary, UserInstruction, ValidityTime, ProcessingTime, DeadLine, ChargeTypeAdditionalInfo, ServiceType.  In version 7: Description, ShortDescription, ServiceUserInstruction, ValidityTimeAdditionalInfo, ProcessingTimeAdditionalInfo, DeadLineAdditionalInfo, ChargeTypeAdditionalInfo, ServiceTypeAdditionalInfo.
     *
     * @return self
     */
    public function setServiceDescriptions($serviceDescriptions)
    {
        if (is_null($serviceDescriptions)) {
            array_push($this->openAPINullablesSetToNull, 'serviceDescriptions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceDescriptions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceDescriptions'] = $serviceDescriptions;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return string[]|null
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param string[]|null $languages List of service languages.
     *
     * @return self
     */
    public function setLanguages($languages)
    {
        if (is_null($languages)) {
            array_push($this->openAPINullablesSetToNull, 'languages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('languages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets legislation
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiLaw[]|null
     */
    public function getLegislation()
    {
        return $this->container['legislation'];
    }

    /**
     * Sets legislation
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiLaw[]|null $legislation List of laws related to the service.
     *
     * @return self
     */
    public function setLegislation($legislation)
    {
        if (is_null($legislation)) {
            array_push($this->openAPINullablesSetToNull, 'legislation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legislation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legislation'] = $legislation;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null $keywords List of localized service keywords. (Max.Length: 150).
     *
     * @return self
     */
    public function setKeywords($keywords)
    {
        if (is_null($keywords)) {
            array_push($this->openAPINullablesSetToNull, 'keywords');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('keywords', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets requirements
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null
     */
    public function getRequirements()
    {
        return $this->container['requirements'];
    }

    /**
     * Sets requirements
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null $requirements Localized service usage requirements (description of requirement). (Max.Length: 2500).
     *
     * @return self
     */
    public function setRequirements($requirements)
    {
        if (is_null($requirements)) {
            array_push($this->openAPINullablesSetToNull, 'requirements');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requirements', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requirements'] = $requirements;

        return $this;
    }

    /**
     * Gets serviceVouchersInUse
     *
     * @return bool|null
     */
    public function getServiceVouchersInUse()
    {
        return $this->container['serviceVouchersInUse'];
    }

    /**
     * Sets serviceVouchersInUse
     *
     * @param bool|null $serviceVouchersInUse Indicates if service vouchers are used in the service.
     *
     * @return self
     */
    public function setServiceVouchersInUse($serviceVouchersInUse)
    {
        if (is_null($serviceVouchersInUse)) {
            throw new \InvalidArgumentException('non-nullable serviceVouchersInUse cannot be null');
        }
        $this->container['serviceVouchersInUse'] = $serviceVouchersInUse;

        return $this;
    }

    /**
     * Gets serviceVouchers
     *
     * @return \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceVoucher[]|null
     */
    public function getServiceVouchers()
    {
        return $this->container['serviceVouchers'];
    }

    /**
     * Sets serviceVouchers
     *
     * @param \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceVoucher[]|null $serviceVouchers List of service vouchers.
     *
     * @return self
     */
    public function setServiceVouchers($serviceVouchers)
    {
        if (is_null($serviceVouchers)) {
            array_push($this->openAPINullablesSetToNull, 'serviceVouchers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceVouchers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceVouchers'] = $serviceVouchers;

        return $this;
    }

    /**
     * Gets versionId
     *
     * @return string|null
     */
    public function getVersionId()
    {
        return $this->container['versionId'];
    }

    /**
     * Sets versionId
     *
     * @param string|null $versionId The identifier for current version.
     *
     * @return self
     */
    public function setVersionId($versionId)
    {
        if (is_null($versionId)) {
            array_push($this->openAPINullablesSetToNull, 'versionId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('versionId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['versionId'] = $versionId;

        return $this;
    }

    /**
     * Gets generalDescriptionId
     *
     * @return string|null
     */
    public function getGeneralDescriptionId()
    {
        return $this->container['generalDescriptionId'];
    }

    /**
     * Sets generalDescriptionId
     *
     * @param string|null $generalDescriptionId PTV identifier for linked general description.
     *
     * @return self
     */
    public function setGeneralDescriptionId($generalDescriptionId)
    {
        if (is_null($generalDescriptionId)) {
            array_push($this->openAPINullablesSetToNull, 'generalDescriptionId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('generalDescriptionId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['generalDescriptionId'] = $generalDescriptionId;

        return $this;
    }

    /**
     * Gets subType
     *
     * @return string|null
     */
    public function getSubType()
    {
        return $this->container['subType'];
    }

    /**
     * Sets subType
     *
     * @param string|null $subType Service sub-type. It is used for SOTE and its taken from GeneralDescription's generalDescriptionType. Possible values are: PrescribedByFreedomOfChoiceAct, OtherPermissionGrantedSote.
     *
     * @return self
     */
    public function setSubType($subType)
    {
        if (is_null($subType)) {
            array_push($this->openAPINullablesSetToNull, 'subType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subType'] = $subType;

        return $this;
    }

    /**
     * Gets areas
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiArea[]|null
     */
    public function getAreas()
    {
        return $this->container['areas'];
    }

    /**
     * Sets areas
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiArea[]|null $areas List of service areas.
     *
     * @return self
     */
    public function setAreas($areas)
    {
        if (is_null($areas)) {
            array_push($this->openAPINullablesSetToNull, 'areas');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('areas', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['areas'] = $areas;

        return $this;
    }

    /**
     * Gets serviceClasses
     *
     * @return \Tampere\PtvV11\PtvModel\V7VmOpenApiFintoItemWithDescription[]|null
     */
    public function getServiceClasses()
    {
        return $this->container['serviceClasses'];
    }

    /**
     * Sets serviceClasses
     *
     * @param \Tampere\PtvV11\PtvModel\V7VmOpenApiFintoItemWithDescription[]|null $serviceClasses List of service classes related to the service.
     *
     * @return self
     */
    public function setServiceClasses($serviceClasses)
    {
        if (is_null($serviceClasses)) {
            array_push($this->openAPINullablesSetToNull, 'serviceClasses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceClasses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceClasses'] = $serviceClasses;

        return $this;
    }

    /**
     * Gets ontologyTerms
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiOntologyTerm[]|null
     */
    public function getOntologyTerms()
    {
        return $this->container['ontologyTerms'];
    }

    /**
     * Sets ontologyTerms
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiOntologyTerm[]|null $ontologyTerms List of ontology terms related to the service.
     *
     * @return self
     */
    public function setOntologyTerms($ontologyTerms)
    {
        if (is_null($ontologyTerms)) {
            array_push($this->openAPINullablesSetToNull, 'ontologyTerms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ontologyTerms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ontologyTerms'] = $ontologyTerms;

        return $this;
    }

    /**
     * Gets targetGroups
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]|null
     */
    public function getTargetGroups()
    {
        return $this->container['targetGroups'];
    }

    /**
     * Sets targetGroups
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]|null $targetGroups List of target groups related to the service.
     *
     * @return self
     */
    public function setTargetGroups($targetGroups)
    {
        if (is_null($targetGroups)) {
            array_push($this->openAPINullablesSetToNull, 'targetGroups');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('targetGroups', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['targetGroups'] = $targetGroups;

        return $this;
    }

    /**
     * Gets lifeEvents
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]|null
     */
    public function getLifeEvents()
    {
        return $this->container['lifeEvents'];
    }

    /**
     * Sets lifeEvents
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]|null $lifeEvents List of life events  related to the service.
     *
     * @return self
     */
    public function setLifeEvents($lifeEvents)
    {
        if (is_null($lifeEvents)) {
            array_push($this->openAPINullablesSetToNull, 'lifeEvents');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lifeEvents', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lifeEvents'] = $lifeEvents;

        return $this;
    }

    /**
     * Gets industrialClasses
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]|null
     */
    public function getIndustrialClasses()
    {
        return $this->container['industrialClasses'];
    }

    /**
     * Sets industrialClasses
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]|null $industrialClasses List of industrial classes related to the service.
     *
     * @return self
     */
    public function setIndustrialClasses($industrialClasses)
    {
        if (is_null($industrialClasses)) {
            array_push($this->openAPINullablesSetToNull, 'industrialClasses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industrialClasses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industrialClasses'] = $industrialClasses;

        return $this;
    }

    /**
     * Gets serviceChannels
     *
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceServiceChannel[]|null
     */
    public function getServiceChannels()
    {
        return $this->container['serviceChannels'];
    }

    /**
     * Sets serviceChannels
     *
     * @param \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceServiceChannel[]|null $serviceChannels List of linked service channels including relationship data.
     *
     * @return self
     */
    public function setServiceChannels($serviceChannels)
    {
        if (is_null($serviceChannels)) {
            array_push($this->openAPINullablesSetToNull, 'serviceChannels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceChannels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceChannels'] = $serviceChannels;

        return $this;
    }

    /**
     * Gets organizations
     *
     * @return \Tampere\PtvV11\PtvModel\V6VmOpenApiServiceOrganization[]|null
     */
    public function getOrganizations()
    {
        return $this->container['organizations'];
    }

    /**
     * Sets organizations
     *
     * @param \Tampere\PtvV11\PtvModel\V6VmOpenApiServiceOrganization[]|null $organizations List of organizations, responsible and producer organizations of the service.
     *
     * @return self
     */
    public function setOrganizations($organizations)
    {
        if (is_null($organizations)) {
            array_push($this->openAPINullablesSetToNull, 'organizations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organizations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organizations'] = $organizations;

        return $this;
    }

    /**
     * Gets serviceCollections
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiServiceServiceCollection[]|null
     */
    public function getServiceCollections()
    {
        return $this->container['serviceCollections'];
    }

    /**
     * Sets serviceCollections
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiServiceServiceCollection[]|null $serviceCollections List of service collections that the service has been linked to
     *
     * @return self
     */
    public function setServiceCollections($serviceCollections)
    {
        if (is_null($serviceCollections)) {
            array_push($this->openAPINullablesSetToNull, 'serviceCollections');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceCollections', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceCollections'] = $serviceCollections;

        return $this;
    }

    /**
     * Gets publishingStatus
     *
     * @return string|null
     */
    public function getPublishingStatus()
    {
        return $this->container['publishingStatus'];
    }

    /**
     * Sets publishingStatus
     *
     * @param string|null $publishingStatus Publishing status. Possible values are: Draft, Published, Deleted or Modified.
     *
     * @return self
     */
    public function setPublishingStatus($publishingStatus)
    {
        if (is_null($publishingStatus)) {
            array_push($this->openAPINullablesSetToNull, 'publishingStatus');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('publishingStatus', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['publishingStatus'] = $publishingStatus;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime|null
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime|null $modified Date when item was modified/created (UTC).
     *
     * @return self
     */
    public function setModified($modified)
    {
        if (is_null($modified)) {
            throw new \InvalidArgumentException('non-nullable modified cannot be null');
        }
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets responsibleSoteOrganization
     *
     * @return string|null
     */
    public function getResponsibleSoteOrganization()
    {
        return $this->container['responsibleSoteOrganization'];
    }

    /**
     * Sets responsibleSoteOrganization
     *
     * @param string|null $responsibleSoteOrganization Sote organization that is responsible for the service. Notice! At the moment always empty - the property is a placeholder for later use.
     *
     * @return self
     */
    public function setResponsibleSoteOrganization($responsibleSoteOrganization)
    {
        if (is_null($responsibleSoteOrganization)) {
            array_push($this->openAPINullablesSetToNull, 'responsibleSoteOrganization');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('responsibleSoteOrganization', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['responsibleSoteOrganization'] = $responsibleSoteOrganization;

        return $this;
    }

    /**
     * Gets mainOrganization
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiItem|null
     */
    public function getMainOrganization()
    {
        return $this->container['mainOrganization'];
    }

    /**
     * Sets mainOrganization
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiItem|null $mainOrganization mainOrganization
     *
     * @return self
     */
    public function setMainOrganization($mainOrganization)
    {
        if (is_null($mainOrganization)) {
            throw new \InvalidArgumentException('non-nullable mainOrganization cannot be null');
        }
        $this->container['mainOrganization'] = $mainOrganization;

        return $this;
    }

    /**
     * Gets serviceProducers
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiServiceProducer[]|null
     */
    public function getServiceProducers()
    {
        return $this->container['serviceProducers'];
    }

    /**
     * Sets serviceProducers
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiServiceProducer[]|null $serviceProducers List of service producers
     *
     * @return self
     */
    public function setServiceProducers($serviceProducers)
    {
        if (is_null($serviceProducers)) {
            array_push($this->openAPINullablesSetToNull, 'serviceProducers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceProducers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceProducers'] = $serviceProducers;

        return $this;
    }

    /**
     * Gets security
     *
     * @return \Tampere\PtvV11\PtvModel\ISecurityOwnOrganization|null
     */
    public function getSecurity()
    {
        return $this->container['security'];
    }

    /**
     * Sets security
     *
     * @param \Tampere\PtvV11\PtvModel\ISecurityOwnOrganization|null $security security
     *
     * @return self
     */
    public function setSecurity($security)
    {
        if (is_null($security)) {
            throw new \InvalidArgumentException('non-nullable security cannot be null');
        }
        $this->container['security'] = $security;

        return $this;
    }

    /**
     * Gets municipalities
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiMunicipality[]|null
     */
    public function getMunicipalities()
    {
        return $this->container['municipalities'];
    }

    /**
     * Sets municipalities
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiMunicipality[]|null $municipalities List of municipality codes and names that the service is available for. Used in conjunction with service coverage type Local.
     *
     * @return self
     */
    public function setMunicipalities($municipalities)
    {
        if (is_null($municipalities)) {
            array_push($this->openAPINullablesSetToNull, 'municipalities');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('municipalities', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['municipalities'] = $municipalities;

        return $this;
    }

    /**
     * Gets availableLanguages
     *
     * @return string[]|null
     */
    public function getAvailableLanguages()
    {
        return $this->container['availableLanguages'];
    }

    /**
     * Sets availableLanguages
     *
     * @param string[]|null $availableLanguages Gets or sets available languages
     *
     * @return self
     */
    public function setAvailableLanguages($availableLanguages)
    {
        if (is_null($availableLanguages)) {
            array_push($this->openAPINullablesSetToNull, 'availableLanguages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('availableLanguages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['availableLanguages'] = $availableLanguages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


