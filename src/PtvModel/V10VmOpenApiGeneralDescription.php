<?php
/**
 * V10VmOpenApiGeneralDescription
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * The version of the OpenAPI document: v11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * V10VmOpenApiGeneralDescription Class Doc Comment
 *
 * @category Class
 * @description OPEN API V10 - View Model of general description
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V10VmOpenApiGeneralDescription implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V10VmOpenApiGeneralDescription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'sourceId' => 'string',
        'names' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
        'descriptions' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
        'requirements' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
        'type' => 'string',
        'serviceChargeType' => 'string',
        'legislation' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiLaw[]',
        'generalDescriptionType' => 'string',
        'generalDescriptionTypeId' => 'string',
        'publishingStatus' => 'string',
        'availableLanguages' => 'string[]',
        'versionId' => 'string',
        'serviceClasses' => '\Tampere\PtvV11\PtvModel\V7VmOpenApiFintoItemWithDescription[]',
        'ontologyTerms' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiOntologyTerm[]',
        'targetGroups' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]',
        'lifeEvents' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]',
        'industrialClasses' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]',
        'modified' => '\DateTime',
        'serviceChannels' => '\Tampere\PtvV11\PtvModel\V6VmOpenApiServiceServiceChannel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'sourceId' => null,
        'names' => null,
        'descriptions' => null,
        'requirements' => null,
        'type' => null,
        'serviceChargeType' => null,
        'legislation' => null,
        'generalDescriptionType' => null,
        'generalDescriptionTypeId' => 'uuid',
        'publishingStatus' => null,
        'availableLanguages' => null,
        'versionId' => 'uuid',
        'serviceClasses' => null,
        'ontologyTerms' => null,
        'targetGroups' => null,
        'lifeEvents' => null,
        'industrialClasses' => null,
        'modified' => 'date-time',
        'serviceChannels' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'sourceId' => true,
		'names' => true,
		'descriptions' => true,
		'requirements' => true,
		'type' => true,
		'serviceChargeType' => true,
		'legislation' => true,
		'generalDescriptionType' => true,
		'generalDescriptionTypeId' => false,
		'publishingStatus' => false,
		'availableLanguages' => true,
		'versionId' => true,
		'serviceClasses' => true,
		'ontologyTerms' => true,
		'targetGroups' => true,
		'lifeEvents' => true,
		'industrialClasses' => true,
		'modified' => false,
		'serviceChannels' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'sourceId' => 'sourceId',
        'names' => 'names',
        'descriptions' => 'descriptions',
        'requirements' => 'requirements',
        'type' => 'type',
        'serviceChargeType' => 'serviceChargeType',
        'legislation' => 'legislation',
        'generalDescriptionType' => 'generalDescriptionType',
        'generalDescriptionTypeId' => 'generalDescriptionTypeId',
        'publishingStatus' => 'publishingStatus',
        'availableLanguages' => 'availableLanguages',
        'versionId' => 'versionId',
        'serviceClasses' => 'serviceClasses',
        'ontologyTerms' => 'ontologyTerms',
        'targetGroups' => 'targetGroups',
        'lifeEvents' => 'lifeEvents',
        'industrialClasses' => 'industrialClasses',
        'modified' => 'modified',
        'serviceChannels' => 'serviceChannels'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'sourceId' => 'setSourceId',
        'names' => 'setNames',
        'descriptions' => 'setDescriptions',
        'requirements' => 'setRequirements',
        'type' => 'setType',
        'serviceChargeType' => 'setServiceChargeType',
        'legislation' => 'setLegislation',
        'generalDescriptionType' => 'setGeneralDescriptionType',
        'generalDescriptionTypeId' => 'setGeneralDescriptionTypeId',
        'publishingStatus' => 'setPublishingStatus',
        'availableLanguages' => 'setAvailableLanguages',
        'versionId' => 'setVersionId',
        'serviceClasses' => 'setServiceClasses',
        'ontologyTerms' => 'setOntologyTerms',
        'targetGroups' => 'setTargetGroups',
        'lifeEvents' => 'setLifeEvents',
        'industrialClasses' => 'setIndustrialClasses',
        'modified' => 'setModified',
        'serviceChannels' => 'setServiceChannels'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'sourceId' => 'getSourceId',
        'names' => 'getNames',
        'descriptions' => 'getDescriptions',
        'requirements' => 'getRequirements',
        'type' => 'getType',
        'serviceChargeType' => 'getServiceChargeType',
        'legislation' => 'getLegislation',
        'generalDescriptionType' => 'getGeneralDescriptionType',
        'generalDescriptionTypeId' => 'getGeneralDescriptionTypeId',
        'publishingStatus' => 'getPublishingStatus',
        'availableLanguages' => 'getAvailableLanguages',
        'versionId' => 'getVersionId',
        'serviceClasses' => 'getServiceClasses',
        'ontologyTerms' => 'getOntologyTerms',
        'targetGroups' => 'getTargetGroups',
        'lifeEvents' => 'getLifeEvents',
        'industrialClasses' => 'getIndustrialClasses',
        'modified' => 'getModified',
        'serviceChannels' => 'getServiceChannels'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('sourceId', $data ?? [], null);
        $this->setIfExists('names', $data ?? [], null);
        $this->setIfExists('descriptions', $data ?? [], null);
        $this->setIfExists('requirements', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('serviceChargeType', $data ?? [], null);
        $this->setIfExists('legislation', $data ?? [], null);
        $this->setIfExists('generalDescriptionType', $data ?? [], null);
        $this->setIfExists('generalDescriptionTypeId', $data ?? [], null);
        $this->setIfExists('publishingStatus', $data ?? [], null);
        $this->setIfExists('availableLanguages', $data ?? [], null);
        $this->setIfExists('versionId', $data ?? [], null);
        $this->setIfExists('serviceClasses', $data ?? [], null);
        $this->setIfExists('ontologyTerms', $data ?? [], null);
        $this->setIfExists('targetGroups', $data ?? [], null);
        $this->setIfExists('lifeEvents', $data ?? [], null);
        $this->setIfExists('industrialClasses', $data ?? [], null);
        $this->setIfExists('modified', $data ?? [], null);
        $this->setIfExists('serviceChannels', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['publishingStatus'] === null) {
            $invalidProperties[] = "'publishingStatus' can't be null";
        }
        if ((mb_strlen($this->container['publishingStatus']) < 1)) {
            $invalidProperties[] = "invalid value for 'publishingStatus', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Entity Guid identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sourceId
     *
     * @return string|null
     */
    public function getSourceId()
    {
        return $this->container['sourceId'];
    }

    /**
     * Sets sourceId
     *
     * @param string|null $sourceId External system identifier. User needs to be logged in to be able to get/set value.
     *
     * @return self
     */
    public function setSourceId($sourceId)
    {
        if (is_null($sourceId)) {
            array_push($this->openAPINullablesSetToNull, 'sourceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourceId'] = $sourceId;

        return $this;
    }

    /**
     * Gets names
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null
     */
    public function getNames()
    {
        return $this->container['names'];
    }

    /**
     * Sets names
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null $names List of localized names. Possible type values are: Name, AlternativeName (in version 7 AlternateName). (Max.Length: 100).
     *
     * @return self
     */
    public function setNames($names)
    {
        if (is_null($names)) {
            array_push($this->openAPINullablesSetToNull, 'names');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('names', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['names'] = $names;

        return $this;
    }

    /**
     * Gets descriptions
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null
     */
    public function getDescriptions()
    {
        return $this->container['descriptions'];
    }

    /**
     * Sets descriptions
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null $descriptions List of localized descriptions. Possible type values are: Description, Summary, BackgroundDescription, UserInstruction, GeneralDescriptionTypeAdditionalInformation, ChargeTypeAdditionalInfo, DeadLine, ProcessingTime, ValidityTime.
     *
     * @return self
     */
    public function setDescriptions($descriptions)
    {
        if (is_null($descriptions)) {
            array_push($this->openAPINullablesSetToNull, 'descriptions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('descriptions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['descriptions'] = $descriptions;

        return $this;
    }

    /**
     * Gets requirements
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null
     */
    public function getRequirements()
    {
        return $this->container['requirements'];
    }

    /**
     * Sets requirements
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null $requirements Localized service usage requirements (description of requirement). (Max.Length: 2500).
     *
     * @return self
     */
    public function setRequirements($requirements)
    {
        if (is_null($requirements)) {
            array_push($this->openAPINullablesSetToNull, 'requirements');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requirements', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requirements'] = $requirements;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Service type. Possible values in version 8 are: Service, PermitOrObligation or ProfessionalQualification.  In version 7: Service, PermissionAndObligation or ProfessionalQualifications.  In older versions: Service or PermissionAndObligation.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets serviceChargeType
     *
     * @return string|null
     */
    public function getServiceChargeType()
    {
        return $this->container['serviceChargeType'];
    }

    /**
     * Sets serviceChargeType
     *
     * @param string|null $serviceChargeType Service charge type. Possible values are:  Chargeable or FreeOfCharge.  In version 7 and older: Charged, Free or Other
     *
     * @return self
     */
    public function setServiceChargeType($serviceChargeType)
    {
        if (is_null($serviceChargeType)) {
            array_push($this->openAPINullablesSetToNull, 'serviceChargeType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceChargeType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceChargeType'] = $serviceChargeType;

        return $this;
    }

    /**
     * Gets legislation
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiLaw[]|null
     */
    public function getLegislation()
    {
        return $this->container['legislation'];
    }

    /**
     * Sets legislation
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiLaw[]|null $legislation Laws that a general description is based on.
     *
     * @return self
     */
    public function setLegislation($legislation)
    {
        if (is_null($legislation)) {
            array_push($this->openAPINullablesSetToNull, 'legislation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legislation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legislation'] = $legislation;

        return $this;
    }

    /**
     * Gets generalDescriptionType
     *
     * @return string|null
     */
    public function getGeneralDescriptionType()
    {
        return $this->container['generalDescriptionType'];
    }

    /**
     * Sets generalDescriptionType
     *
     * @param string|null $generalDescriptionType General description type. Possible values are: Municipality, BusinessSubregion, Church.
     *
     * @return self
     */
    public function setGeneralDescriptionType($generalDescriptionType)
    {
        if (is_null($generalDescriptionType)) {
            array_push($this->openAPINullablesSetToNull, 'generalDescriptionType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('generalDescriptionType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['generalDescriptionType'] = $generalDescriptionType;

        return $this;
    }

    /**
     * Gets generalDescriptionTypeId
     *
     * @return string|null
     */
    public function getGeneralDescriptionTypeId()
    {
        return $this->container['generalDescriptionTypeId'];
    }

    /**
     * Sets generalDescriptionTypeId
     *
     * @param string|null $generalDescriptionTypeId General description type id. Used internally to check the restrictions for usage.  In older versions: Default general description is Municipality.
     *
     * @return self
     */
    public function setGeneralDescriptionTypeId($generalDescriptionTypeId)
    {
        if (is_null($generalDescriptionTypeId)) {
            throw new \InvalidArgumentException('non-nullable generalDescriptionTypeId cannot be null');
        }
        $this->container['generalDescriptionTypeId'] = $generalDescriptionTypeId;

        return $this;
    }

    /**
     * Gets publishingStatus
     *
     * @return string
     */
    public function getPublishingStatus()
    {
        return $this->container['publishingStatus'];
    }

    /**
     * Sets publishingStatus
     *
     * @param string $publishingStatus Publishing status. Possible values are: Draft, Published, Deleted or Modified.
     *
     * @return self
     */
    public function setPublishingStatus($publishingStatus)
    {
        if (is_null($publishingStatus)) {
            throw new \InvalidArgumentException('non-nullable publishingStatus cannot be null');
        }

        if ((mb_strlen($publishingStatus) < 1)) {
            throw new \InvalidArgumentException('invalid length for $publishingStatus when calling V10VmOpenApiGeneralDescription., must be bigger than or equal to 1.');
        }

        $this->container['publishingStatus'] = $publishingStatus;

        return $this;
    }

    /**
     * Gets availableLanguages
     *
     * @return string[]|null
     */
    public function getAvailableLanguages()
    {
        return $this->container['availableLanguages'];
    }

    /**
     * Sets availableLanguages
     *
     * @param string[]|null $availableLanguages Gets or sets available languages
     *
     * @return self
     */
    public function setAvailableLanguages($availableLanguages)
    {
        if (is_null($availableLanguages)) {
            array_push($this->openAPINullablesSetToNull, 'availableLanguages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('availableLanguages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['availableLanguages'] = $availableLanguages;

        return $this;
    }

    /**
     * Gets versionId
     *
     * @return string|null
     */
    public function getVersionId()
    {
        return $this->container['versionId'];
    }

    /**
     * Sets versionId
     *
     * @param string|null $versionId The identifier for current version.
     *
     * @return self
     */
    public function setVersionId($versionId)
    {
        if (is_null($versionId)) {
            array_push($this->openAPINullablesSetToNull, 'versionId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('versionId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['versionId'] = $versionId;

        return $this;
    }

    /**
     * Gets serviceClasses
     *
     * @return \Tampere\PtvV11\PtvModel\V7VmOpenApiFintoItemWithDescription[]|null
     */
    public function getServiceClasses()
    {
        return $this->container['serviceClasses'];
    }

    /**
     * Sets serviceClasses
     *
     * @param \Tampere\PtvV11\PtvModel\V7VmOpenApiFintoItemWithDescription[]|null $serviceClasses List of service classes.
     *
     * @return self
     */
    public function setServiceClasses($serviceClasses)
    {
        if (is_null($serviceClasses)) {
            array_push($this->openAPINullablesSetToNull, 'serviceClasses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceClasses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceClasses'] = $serviceClasses;

        return $this;
    }

    /**
     * Gets ontologyTerms
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiOntologyTerm[]|null
     */
    public function getOntologyTerms()
    {
        return $this->container['ontologyTerms'];
    }

    /**
     * Sets ontologyTerms
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiOntologyTerm[]|null $ontologyTerms List of ontology terms.
     *
     * @return self
     */
    public function setOntologyTerms($ontologyTerms)
    {
        if (is_null($ontologyTerms)) {
            array_push($this->openAPINullablesSetToNull, 'ontologyTerms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ontologyTerms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ontologyTerms'] = $ontologyTerms;

        return $this;
    }

    /**
     * Gets targetGroups
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]|null
     */
    public function getTargetGroups()
    {
        return $this->container['targetGroups'];
    }

    /**
     * Sets targetGroups
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]|null $targetGroups List of target groups.
     *
     * @return self
     */
    public function setTargetGroups($targetGroups)
    {
        if (is_null($targetGroups)) {
            array_push($this->openAPINullablesSetToNull, 'targetGroups');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('targetGroups', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['targetGroups'] = $targetGroups;

        return $this;
    }

    /**
     * Gets lifeEvents
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]|null
     */
    public function getLifeEvents()
    {
        return $this->container['lifeEvents'];
    }

    /**
     * Sets lifeEvents
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]|null $lifeEvents List of life events.
     *
     * @return self
     */
    public function setLifeEvents($lifeEvents)
    {
        if (is_null($lifeEvents)) {
            array_push($this->openAPINullablesSetToNull, 'lifeEvents');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lifeEvents', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lifeEvents'] = $lifeEvents;

        return $this;
    }

    /**
     * Gets industrialClasses
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]|null
     */
    public function getIndustrialClasses()
    {
        return $this->container['industrialClasses'];
    }

    /**
     * Sets industrialClasses
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]|null $industrialClasses List of industrial classes.
     *
     * @return self
     */
    public function setIndustrialClasses($industrialClasses)
    {
        if (is_null($industrialClasses)) {
            array_push($this->openAPINullablesSetToNull, 'industrialClasses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industrialClasses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industrialClasses'] = $industrialClasses;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime|null
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime|null $modified Date when item was modified/created (UTC).
     *
     * @return self
     */
    public function setModified($modified)
    {
        if (is_null($modified)) {
            throw new \InvalidArgumentException('non-nullable modified cannot be null');
        }
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets serviceChannels
     *
     * @return \Tampere\PtvV11\PtvModel\V6VmOpenApiServiceServiceChannel[]|null
     */
    public function getServiceChannels()
    {
        return $this->container['serviceChannels'];
    }

    /**
     * Sets serviceChannels
     *
     * @param \Tampere\PtvV11\PtvModel\V6VmOpenApiServiceServiceChannel[]|null $serviceChannels List of linked service channels including relationship data.
     *
     * @return self
     */
    public function setServiceChannels($serviceChannels)
    {
        if (is_null($serviceChannels)) {
            array_push($this->openAPINullablesSetToNull, 'serviceChannels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceChannels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceChannels'] = $serviceChannels;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


