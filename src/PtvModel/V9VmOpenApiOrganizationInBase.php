<?php
/**
 * V9VmOpenApiOrganizationInBase
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * The version of the OpenAPI document: v11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * V9VmOpenApiOrganizationInBase Class Doc Comment
 *
 * @category Class
 * @description OPEN API V8 - View Model of organization for IN api - base
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V9VmOpenApiOrganizationInBase implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V9VmOpenApiOrganizationInBase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sourceId' => 'string',
        'businessCode' => 'string',
        'businessName' => 'string',
        'emails' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiEmail[]',
        'webPages' => '\Tampere\PtvV11\PtvModel\V9VmOpenApiWebPage[]',
        'electronicInvoicings' => '\Tampere\PtvV11\PtvModel\VmOpenApiOrganizationEInvoicing[]',
        'businessId' => 'string',
        'versionId' => 'string',
        'oid' => 'string',
        'municipality' => 'string',
        'addresses' => '\Tampere\PtvV11\PtvModel\V9VmOpenApiAddressIn[]',
        'parentOrganizationId' => 'string',
        'deleteAllEmails' => 'bool',
        'deleteAllPhones' => 'bool',
        'deleteAllWebPages' => 'bool',
        'deleteAllAddresses' => 'bool',
        'deleteAllElectronicInvoicings' => 'bool',
        'validFrom' => '\DateTime',
        'validTo' => '\DateTime',
        'id' => 'string',
        'currentPublishingStatus' => 'string',
        'userName' => 'string',
        'availableLanguages' => 'string[]',
        'requiredPropertiesAvailableLanguages' => 'string[]',
        'organizationType' => 'string',
        'organizationNames' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
        'organizationDescriptions' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
        'displayNameType' => '\Tampere\PtvV11\PtvModel\VmOpenApiNameTypeByLanguage[]',
        'areaType' => 'string',
        'publishingStatus' => 'string',
        'subAreaType' => 'string',
        'areas' => 'string[]',
        'phoneNumbers' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiPhone[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sourceId' => null,
        'businessCode' => null,
        'businessName' => null,
        'emails' => null,
        'webPages' => null,
        'electronicInvoicings' => null,
        'businessId' => 'uuid',
        'versionId' => 'uuid',
        'oid' => null,
        'municipality' => null,
        'addresses' => null,
        'parentOrganizationId' => null,
        'deleteAllEmails' => null,
        'deleteAllPhones' => null,
        'deleteAllWebPages' => null,
        'deleteAllAddresses' => null,
        'deleteAllElectronicInvoicings' => null,
        'validFrom' => 'date-time',
        'validTo' => 'date-time',
        'id' => 'uuid',
        'currentPublishingStatus' => null,
        'userName' => null,
        'availableLanguages' => null,
        'requiredPropertiesAvailableLanguages' => null,
        'organizationType' => null,
        'organizationNames' => null,
        'organizationDescriptions' => null,
        'displayNameType' => null,
        'areaType' => null,
        'publishingStatus' => null,
        'subAreaType' => null,
        'areas' => null,
        'phoneNumbers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sourceId' => true,
		'businessCode' => true,
		'businessName' => true,
		'emails' => true,
		'webPages' => true,
		'electronicInvoicings' => true,
		'businessId' => true,
		'versionId' => true,
		'oid' => true,
		'municipality' => true,
		'addresses' => true,
		'parentOrganizationId' => true,
		'deleteAllEmails' => false,
		'deleteAllPhones' => false,
		'deleteAllWebPages' => false,
		'deleteAllAddresses' => false,
		'deleteAllElectronicInvoicings' => false,
		'validFrom' => true,
		'validTo' => true,
		'id' => true,
		'currentPublishingStatus' => true,
		'userName' => true,
		'availableLanguages' => true,
		'requiredPropertiesAvailableLanguages' => true,
		'organizationType' => true,
		'organizationNames' => true,
		'organizationDescriptions' => true,
		'displayNameType' => true,
		'areaType' => true,
		'publishingStatus' => false,
		'subAreaType' => true,
		'areas' => true,
		'phoneNumbers' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sourceId' => 'sourceId',
        'businessCode' => 'businessCode',
        'businessName' => 'businessName',
        'emails' => 'emails',
        'webPages' => 'webPages',
        'electronicInvoicings' => 'electronicInvoicings',
        'businessId' => 'businessId',
        'versionId' => 'versionId',
        'oid' => 'oid',
        'municipality' => 'municipality',
        'addresses' => 'addresses',
        'parentOrganizationId' => 'parentOrganizationId',
        'deleteAllEmails' => 'deleteAllEmails',
        'deleteAllPhones' => 'deleteAllPhones',
        'deleteAllWebPages' => 'deleteAllWebPages',
        'deleteAllAddresses' => 'deleteAllAddresses',
        'deleteAllElectronicInvoicings' => 'deleteAllElectronicInvoicings',
        'validFrom' => 'validFrom',
        'validTo' => 'validTo',
        'id' => 'id',
        'currentPublishingStatus' => 'currentPublishingStatus',
        'userName' => 'userName',
        'availableLanguages' => 'availableLanguages',
        'requiredPropertiesAvailableLanguages' => 'requiredPropertiesAvailableLanguages',
        'organizationType' => 'organizationType',
        'organizationNames' => 'organizationNames',
        'organizationDescriptions' => 'organizationDescriptions',
        'displayNameType' => 'displayNameType',
        'areaType' => 'areaType',
        'publishingStatus' => 'publishingStatus',
        'subAreaType' => 'subAreaType',
        'areas' => 'areas',
        'phoneNumbers' => 'phoneNumbers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sourceId' => 'setSourceId',
        'businessCode' => 'setBusinessCode',
        'businessName' => 'setBusinessName',
        'emails' => 'setEmails',
        'webPages' => 'setWebPages',
        'electronicInvoicings' => 'setElectronicInvoicings',
        'businessId' => 'setBusinessId',
        'versionId' => 'setVersionId',
        'oid' => 'setOid',
        'municipality' => 'setMunicipality',
        'addresses' => 'setAddresses',
        'parentOrganizationId' => 'setParentOrganizationId',
        'deleteAllEmails' => 'setDeleteAllEmails',
        'deleteAllPhones' => 'setDeleteAllPhones',
        'deleteAllWebPages' => 'setDeleteAllWebPages',
        'deleteAllAddresses' => 'setDeleteAllAddresses',
        'deleteAllElectronicInvoicings' => 'setDeleteAllElectronicInvoicings',
        'validFrom' => 'setValidFrom',
        'validTo' => 'setValidTo',
        'id' => 'setId',
        'currentPublishingStatus' => 'setCurrentPublishingStatus',
        'userName' => 'setUserName',
        'availableLanguages' => 'setAvailableLanguages',
        'requiredPropertiesAvailableLanguages' => 'setRequiredPropertiesAvailableLanguages',
        'organizationType' => 'setOrganizationType',
        'organizationNames' => 'setOrganizationNames',
        'organizationDescriptions' => 'setOrganizationDescriptions',
        'displayNameType' => 'setDisplayNameType',
        'areaType' => 'setAreaType',
        'publishingStatus' => 'setPublishingStatus',
        'subAreaType' => 'setSubAreaType',
        'areas' => 'setAreas',
        'phoneNumbers' => 'setPhoneNumbers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sourceId' => 'getSourceId',
        'businessCode' => 'getBusinessCode',
        'businessName' => 'getBusinessName',
        'emails' => 'getEmails',
        'webPages' => 'getWebPages',
        'electronicInvoicings' => 'getElectronicInvoicings',
        'businessId' => 'getBusinessId',
        'versionId' => 'getVersionId',
        'oid' => 'getOid',
        'municipality' => 'getMunicipality',
        'addresses' => 'getAddresses',
        'parentOrganizationId' => 'getParentOrganizationId',
        'deleteAllEmails' => 'getDeleteAllEmails',
        'deleteAllPhones' => 'getDeleteAllPhones',
        'deleteAllWebPages' => 'getDeleteAllWebPages',
        'deleteAllAddresses' => 'getDeleteAllAddresses',
        'deleteAllElectronicInvoicings' => 'getDeleteAllElectronicInvoicings',
        'validFrom' => 'getValidFrom',
        'validTo' => 'getValidTo',
        'id' => 'getId',
        'currentPublishingStatus' => 'getCurrentPublishingStatus',
        'userName' => 'getUserName',
        'availableLanguages' => 'getAvailableLanguages',
        'requiredPropertiesAvailableLanguages' => 'getRequiredPropertiesAvailableLanguages',
        'organizationType' => 'getOrganizationType',
        'organizationNames' => 'getOrganizationNames',
        'organizationDescriptions' => 'getOrganizationDescriptions',
        'displayNameType' => 'getDisplayNameType',
        'areaType' => 'getAreaType',
        'publishingStatus' => 'getPublishingStatus',
        'subAreaType' => 'getSubAreaType',
        'areas' => 'getAreas',
        'phoneNumbers' => 'getPhoneNumbers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sourceId', $data ?? [], null);
        $this->setIfExists('businessCode', $data ?? [], null);
        $this->setIfExists('businessName', $data ?? [], null);
        $this->setIfExists('emails', $data ?? [], null);
        $this->setIfExists('webPages', $data ?? [], null);
        $this->setIfExists('electronicInvoicings', $data ?? [], null);
        $this->setIfExists('businessId', $data ?? [], null);
        $this->setIfExists('versionId', $data ?? [], null);
        $this->setIfExists('oid', $data ?? [], null);
        $this->setIfExists('municipality', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('parentOrganizationId', $data ?? [], null);
        $this->setIfExists('deleteAllEmails', $data ?? [], null);
        $this->setIfExists('deleteAllPhones', $data ?? [], null);
        $this->setIfExists('deleteAllWebPages', $data ?? [], null);
        $this->setIfExists('deleteAllAddresses', $data ?? [], null);
        $this->setIfExists('deleteAllElectronicInvoicings', $data ?? [], null);
        $this->setIfExists('validFrom', $data ?? [], null);
        $this->setIfExists('validTo', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('currentPublishingStatus', $data ?? [], null);
        $this->setIfExists('userName', $data ?? [], null);
        $this->setIfExists('availableLanguages', $data ?? [], null);
        $this->setIfExists('requiredPropertiesAvailableLanguages', $data ?? [], null);
        $this->setIfExists('organizationType', $data ?? [], null);
        $this->setIfExists('organizationNames', $data ?? [], null);
        $this->setIfExists('organizationDescriptions', $data ?? [], null);
        $this->setIfExists('displayNameType', $data ?? [], null);
        $this->setIfExists('areaType', $data ?? [], null);
        $this->setIfExists('publishingStatus', $data ?? [], null);
        $this->setIfExists('subAreaType', $data ?? [], null);
        $this->setIfExists('areas', $data ?? [], null);
        $this->setIfExists('phoneNumbers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sourceId']) && !preg_match("/^[A-Za-z0-9-.]*$/", $this->container['sourceId'])) {
            $invalidProperties[] = "invalid value for 'sourceId', must be conform to the pattern /^[A-Za-z0-9-.]*$/.";
        }

        if (!is_null($this->container['businessCode']) && !preg_match("/^[0-9]{7}-[0-9]{1}$/", $this->container['businessCode'])) {
            $invalidProperties[] = "invalid value for 'businessCode', must be conform to the pattern /^[0-9]{7}-[0-9]{1}$/.";
        }

        if (!is_null($this->container['oid']) && (mb_strlen($this->container['oid']) > 100)) {
            $invalidProperties[] = "invalid value for 'oid', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['oid']) && !preg_match("/^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/", $this->container['oid'])) {
            $invalidProperties[] = "invalid value for 'oid', must be conform to the pattern /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/.";
        }

        if (!is_null($this->container['municipality']) && !preg_match("/^[0-9]{1,3}$/", $this->container['municipality'])) {
            $invalidProperties[] = "invalid value for 'municipality', must be conform to the pattern /^[0-9]{1,3}$/.";
        }

        if ($this->container['publishingStatus'] === null) {
            $invalidProperties[] = "'publishingStatus' can't be null";
        }
        if ((mb_strlen($this->container['publishingStatus']) < 1)) {
            $invalidProperties[] = "invalid value for 'publishingStatus', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sourceId
     *
     * @return string|null
     */
    public function getSourceId()
    {
        return $this->container['sourceId'];
    }

    /**
     * Sets sourceId
     *
     * @param string|null $sourceId Organization external system identifier. User needs to be logged in to be able to get/set value.
     *
     * @return self
     */
    public function setSourceId($sourceId)
    {
        if (is_null($sourceId)) {
            array_push($this->openAPINullablesSetToNull, 'sourceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($sourceId) && (!preg_match("/^[A-Za-z0-9-.]*$/", $sourceId))) {
            throw new \InvalidArgumentException("invalid value for \$sourceId when calling V9VmOpenApiOrganizationInBase., must conform to the pattern /^[A-Za-z0-9-.]*$/.");
        }

        $this->container['sourceId'] = $sourceId;

        return $this;
    }

    /**
     * Gets businessCode
     *
     * @return string|null
     */
    public function getBusinessCode()
    {
        return $this->container['businessCode'];
    }

    /**
     * Sets businessCode
     *
     * @param string|null $businessCode Organization business code (Y-tunnus).
     *
     * @return self
     */
    public function setBusinessCode($businessCode)
    {
        if (is_null($businessCode)) {
            array_push($this->openAPINullablesSetToNull, 'businessCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('businessCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($businessCode) && (!preg_match("/^[0-9]{7}-[0-9]{1}$/", $businessCode))) {
            throw new \InvalidArgumentException("invalid value for \$businessCode when calling V9VmOpenApiOrganizationInBase., must conform to the pattern /^[0-9]{7}-[0-9]{1}$/.");
        }

        $this->container['businessCode'] = $businessCode;

        return $this;
    }

    /**
     * Gets businessName
     *
     * @return string|null
     * @deprecated
     */
    public function getBusinessName()
    {
        return $this->container['businessName'];
    }

    /**
     * Sets businessName
     *
     * @param string|null $businessName Organization business name (name used for business code). This property is not used in the API anymore. Do not use.
     *
     * @return self
     * @deprecated
     */
    public function setBusinessName($businessName)
    {
        if (is_null($businessName)) {
            array_push($this->openAPINullablesSetToNull, 'businessName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('businessName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['businessName'] = $businessName;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiEmail[]|null
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiEmail[]|null $emails List of email addresses.
     *
     * @return self
     */
    public function setEmails($emails)
    {
        if (is_null($emails)) {
            array_push($this->openAPINullablesSetToNull, 'emails');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emails', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets webPages
     *
     * @return \Tampere\PtvV11\PtvModel\V9VmOpenApiWebPage[]|null
     */
    public function getWebPages()
    {
        return $this->container['webPages'];
    }

    /**
     * Sets webPages
     *
     * @param \Tampere\PtvV11\PtvModel\V9VmOpenApiWebPage[]|null $webPages List of organizations web pages.
     *
     * @return self
     */
    public function setWebPages($webPages)
    {
        if (is_null($webPages)) {
            array_push($this->openAPINullablesSetToNull, 'webPages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('webPages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['webPages'] = $webPages;

        return $this;
    }

    /**
     * Gets electronicInvoicings
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiOrganizationEInvoicing[]|null
     */
    public function getElectronicInvoicings()
    {
        return $this->container['electronicInvoicings'];
    }

    /**
     * Sets electronicInvoicings
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiOrganizationEInvoicing[]|null $electronicInvoicings List of organizations electronic invoicing information.
     *
     * @return self
     */
    public function setElectronicInvoicings($electronicInvoicings)
    {
        if (is_null($electronicInvoicings)) {
            array_push($this->openAPINullablesSetToNull, 'electronicInvoicings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('electronicInvoicings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['electronicInvoicings'] = $electronicInvoicings;

        return $this;
    }

    /**
     * Gets businessId
     *
     * @return string|null
     */
    public function getBusinessId()
    {
        return $this->container['businessId'];
    }

    /**
     * Sets businessId
     *
     * @param string|null $businessId Business code entity identifier.
     *
     * @return self
     */
    public function setBusinessId($businessId)
    {
        if (is_null($businessId)) {
            array_push($this->openAPINullablesSetToNull, 'businessId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('businessId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['businessId'] = $businessId;

        return $this;
    }

    /**
     * Gets versionId
     *
     * @return string|null
     */
    public function getVersionId()
    {
        return $this->container['versionId'];
    }

    /**
     * Sets versionId
     *
     * @param string|null $versionId The identifier for current version.
     *
     * @return self
     */
    public function setVersionId($versionId)
    {
        if (is_null($versionId)) {
            array_push($this->openAPINullablesSetToNull, 'versionId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('versionId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['versionId'] = $versionId;

        return $this;
    }

    /**
     * Gets oid
     *
     * @return string|null
     */
    public function getOid()
    {
        return $this->container['oid'];
    }

    /**
     * Sets oid
     *
     * @param string|null $oid Organization OID. - must match the regex @\"^[A-Za-z0-9.-]*$\" (Max.Length: 100).
     *
     * @return self
     */
    public function setOid($oid)
    {
        if (is_null($oid)) {
            array_push($this->openAPINullablesSetToNull, 'oid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('oid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($oid) && (mb_strlen($oid) > 100)) {
            throw new \InvalidArgumentException('invalid length for $oid when calling V9VmOpenApiOrganizationInBase., must be smaller than or equal to 100.');
        }
        if (!is_null($oid) && (!preg_match("/^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/", $oid))) {
            throw new \InvalidArgumentException("invalid value for \$oid when calling V9VmOpenApiOrganizationInBase., must conform to the pattern /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/.");
        }

        $this->container['oid'] = $oid;

        return $this;
    }

    /**
     * Gets municipality
     *
     * @return string|null
     */
    public function getMunicipality()
    {
        return $this->container['municipality'];
    }

    /**
     * Sets municipality
     *
     * @param string|null $municipality Municipality code (like 491 or 091).
     *
     * @return self
     */
    public function setMunicipality($municipality)
    {
        if (is_null($municipality)) {
            array_push($this->openAPINullablesSetToNull, 'municipality');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('municipality', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($municipality) && (!preg_match("/^[0-9]{1,3}$/", $municipality))) {
            throw new \InvalidArgumentException("invalid value for \$municipality when calling V9VmOpenApiOrganizationInBase., must conform to the pattern /^[0-9]{1,3}$/.");
        }

        $this->container['municipality'] = $municipality;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Tampere\PtvV11\PtvModel\V9VmOpenApiAddressIn[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Tampere\PtvV11\PtvModel\V9VmOpenApiAddressIn[]|null $addresses List of addresses.
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            array_push($this->openAPINullablesSetToNull, 'addresses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addresses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets parentOrganizationId
     *
     * @return string|null
     */
    public function getParentOrganizationId()
    {
        return $this->container['parentOrganizationId'];
    }

    /**
     * Sets parentOrganizationId
     *
     * @param string|null $parentOrganizationId Parent organization identifier.
     *
     * @return self
     */
    public function setParentOrganizationId($parentOrganizationId)
    {
        if (is_null($parentOrganizationId)) {
            array_push($this->openAPINullablesSetToNull, 'parentOrganizationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parentOrganizationId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parentOrganizationId'] = $parentOrganizationId;

        return $this;
    }

    /**
     * Gets deleteAllEmails
     *
     * @return bool|null
     */
    public function getDeleteAllEmails()
    {
        return $this->container['deleteAllEmails'];
    }

    /**
     * Sets deleteAllEmails
     *
     * @param bool|null $deleteAllEmails Set to true to delete all existing emails (the EmailAddresses collection for this object should be empty collection when this option is used).
     *
     * @return self
     */
    public function setDeleteAllEmails($deleteAllEmails)
    {
        if (is_null($deleteAllEmails)) {
            throw new \InvalidArgumentException('non-nullable deleteAllEmails cannot be null');
        }
        $this->container['deleteAllEmails'] = $deleteAllEmails;

        return $this;
    }

    /**
     * Gets deleteAllPhones
     *
     * @return bool|null
     */
    public function getDeleteAllPhones()
    {
        return $this->container['deleteAllPhones'];
    }

    /**
     * Sets deleteAllPhones
     *
     * @param bool|null $deleteAllPhones Set to true to delete all existing phone numbers (the PhoneNumbers collection for this object should be empty collection when this option is used).
     *
     * @return self
     */
    public function setDeleteAllPhones($deleteAllPhones)
    {
        if (is_null($deleteAllPhones)) {
            throw new \InvalidArgumentException('non-nullable deleteAllPhones cannot be null');
        }
        $this->container['deleteAllPhones'] = $deleteAllPhones;

        return $this;
    }

    /**
     * Gets deleteAllWebPages
     *
     * @return bool|null
     */
    public function getDeleteAllWebPages()
    {
        return $this->container['deleteAllWebPages'];
    }

    /**
     * Sets deleteAllWebPages
     *
     * @param bool|null $deleteAllWebPages Set to true to delete all existing web pages (the WebPages collection for this object should be empty collection when this option is used).
     *
     * @return self
     */
    public function setDeleteAllWebPages($deleteAllWebPages)
    {
        if (is_null($deleteAllWebPages)) {
            throw new \InvalidArgumentException('non-nullable deleteAllWebPages cannot be null');
        }
        $this->container['deleteAllWebPages'] = $deleteAllWebPages;

        return $this;
    }

    /**
     * Gets deleteAllAddresses
     *
     * @return bool|null
     */
    public function getDeleteAllAddresses()
    {
        return $this->container['deleteAllAddresses'];
    }

    /**
     * Sets deleteAllAddresses
     *
     * @param bool|null $deleteAllAddresses Set to true to delete all existing addresses (the Addresses collection for this object should be empty collection when this option is used).
     *
     * @return self
     */
    public function setDeleteAllAddresses($deleteAllAddresses)
    {
        if (is_null($deleteAllAddresses)) {
            throw new \InvalidArgumentException('non-nullable deleteAllAddresses cannot be null');
        }
        $this->container['deleteAllAddresses'] = $deleteAllAddresses;

        return $this;
    }

    /**
     * Gets deleteAllElectronicInvoicings
     *
     * @return bool|null
     */
    public function getDeleteAllElectronicInvoicings()
    {
        return $this->container['deleteAllElectronicInvoicings'];
    }

    /**
     * Sets deleteAllElectronicInvoicings
     *
     * @param bool|null $deleteAllElectronicInvoicings Set to true to delete all existing electronic invoicing addresses (the ElectronicInvoicings collection for this object should be empty collection when this option is used).
     *
     * @return self
     */
    public function setDeleteAllElectronicInvoicings($deleteAllElectronicInvoicings)
    {
        if (is_null($deleteAllElectronicInvoicings)) {
            throw new \InvalidArgumentException('non-nullable deleteAllElectronicInvoicings cannot be null');
        }
        $this->container['deleteAllElectronicInvoicings'] = $deleteAllElectronicInvoicings;

        return $this;
    }

    /**
     * Gets validFrom
     *
     * @return \DateTime|null
     */
    public function getValidFrom()
    {
        return $this->container['validFrom'];
    }

    /**
     * Sets validFrom
     *
     * @param \DateTime|null $validFrom Date when item should be published.
     *
     * @return self
     */
    public function setValidFrom($validFrom)
    {
        if (is_null($validFrom)) {
            array_push($this->openAPINullablesSetToNull, 'validFrom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validFrom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validFrom'] = $validFrom;

        return $this;
    }

    /**
     * Gets validTo
     *
     * @return \DateTime|null
     */
    public function getValidTo()
    {
        return $this->container['validTo'];
    }

    /**
     * Sets validTo
     *
     * @param \DateTime|null $validTo Date when item should be archived.
     *
     * @return self
     */
    public function setValidTo($validTo)
    {
        if (is_null($validTo)) {
            array_push($this->openAPINullablesSetToNull, 'validTo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validTo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validTo'] = $validTo;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Entity identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets currentPublishingStatus
     *
     * @return string|null
     */
    public function getCurrentPublishingStatus()
    {
        return $this->container['currentPublishingStatus'];
    }

    /**
     * Sets currentPublishingStatus
     *
     * @param string|null $currentPublishingStatus Current version publishing status.
     *
     * @return self
     */
    public function setCurrentPublishingStatus($currentPublishingStatus)
    {
        if (is_null($currentPublishingStatus)) {
            array_push($this->openAPINullablesSetToNull, 'currentPublishingStatus');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currentPublishingStatus', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currentPublishingStatus'] = $currentPublishingStatus;

        return $this;
    }

    /**
     * Gets userName
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['userName'];
    }

    /**
     * Sets userName
     *
     * @param string|null $userName User name.
     *
     * @return self
     */
    public function setUserName($userName)
    {
        if (is_null($userName)) {
            array_push($this->openAPINullablesSetToNull, 'userName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('userName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['userName'] = $userName;

        return $this;
    }

    /**
     * Gets availableLanguages
     *
     * @return string[]|null
     */
    public function getAvailableLanguages()
    {
        return $this->container['availableLanguages'];
    }

    /**
     * Sets availableLanguages
     *
     * @param string[]|null $availableLanguages Gets or sets available languages
     *
     * @return self
     */
    public function setAvailableLanguages($availableLanguages)
    {
        if (is_null($availableLanguages)) {
            array_push($this->openAPINullablesSetToNull, 'availableLanguages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('availableLanguages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['availableLanguages'] = $availableLanguages;

        return $this;
    }

    /**
     * Gets requiredPropertiesAvailableLanguages
     *
     * @return string[]|null
     */
    public function getRequiredPropertiesAvailableLanguages()
    {
        return $this->container['requiredPropertiesAvailableLanguages'];
    }

    /**
     * Sets requiredPropertiesAvailableLanguages
     *
     * @param string[]|null $requiredPropertiesAvailableLanguages Internal property to check the languages within required lists: OrganizationNames and OrganizationDescriptions
     *
     * @return self
     */
    public function setRequiredPropertiesAvailableLanguages($requiredPropertiesAvailableLanguages)
    {
        if (is_null($requiredPropertiesAvailableLanguages)) {
            array_push($this->openAPINullablesSetToNull, 'requiredPropertiesAvailableLanguages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requiredPropertiesAvailableLanguages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requiredPropertiesAvailableLanguages'] = $requiredPropertiesAvailableLanguages;

        return $this;
    }

    /**
     * Gets organizationType
     *
     * @return string|null
     */
    public function getOrganizationType()
    {
        return $this->container['organizationType'];
    }

    /**
     * Sets organizationType
     *
     * @param string|null $organizationType Organization type (State, Municipality, RegionalOrganization, Organization, Company, SotePublic, SotePrivate, Region).
     *
     * @return self
     */
    public function setOrganizationType($organizationType)
    {
        if (is_null($organizationType)) {
            array_push($this->openAPINullablesSetToNull, 'organizationType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organizationType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organizationType'] = $organizationType;

        return $this;
    }

    /**
     * Gets organizationNames
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null
     */
    public function getOrganizationNames()
    {
        return $this->container['organizationNames'];
    }

    /**
     * Sets organizationNames
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null $organizationNames List of organization names. Possible type values are: Name, AlternativeName.
     *
     * @return self
     */
    public function setOrganizationNames($organizationNames)
    {
        if (is_null($organizationNames)) {
            array_push($this->openAPINullablesSetToNull, 'organizationNames');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organizationNames', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organizationNames'] = $organizationNames;

        return $this;
    }

    /**
     * Gets organizationDescriptions
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null
     */
    public function getOrganizationDescriptions()
    {
        return $this->container['organizationDescriptions'];
    }

    /**
     * Sets organizationDescriptions
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null $organizationDescriptions Localized list of organization descriptions. Possible type values are: Description, Summary. (Max.Length: 2500 Description). (Max.Length: 150 Summary).
     *
     * @return self
     */
    public function setOrganizationDescriptions($organizationDescriptions)
    {
        if (is_null($organizationDescriptions)) {
            array_push($this->openAPINullablesSetToNull, 'organizationDescriptions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organizationDescriptions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organizationDescriptions'] = $organizationDescriptions;

        return $this;
    }

    /**
     * Gets displayNameType
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiNameTypeByLanguage[]|null
     */
    public function getDisplayNameType()
    {
        return $this->container['displayNameType'];
    }

    /**
     * Sets displayNameType
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiNameTypeByLanguage[]|null $displayNameType List of Display name types (Name or AlternativeName) for each language version of OrganizationNames.
     *
     * @return self
     */
    public function setDisplayNameType($displayNameType)
    {
        if (is_null($displayNameType)) {
            array_push($this->openAPINullablesSetToNull, 'displayNameType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('displayNameType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['displayNameType'] = $displayNameType;

        return $this;
    }

    /**
     * Gets areaType
     *
     * @return string|null
     */
    public function getAreaType()
    {
        return $this->container['areaType'];
    }

    /**
     * Sets areaType
     *
     * @param string|null $areaType Area type (Nationwide, NationwideExceptAlandIslands, LimitedType).
     *
     * @return self
     */
    public function setAreaType($areaType)
    {
        if (is_null($areaType)) {
            array_push($this->openAPINullablesSetToNull, 'areaType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('areaType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['areaType'] = $areaType;

        return $this;
    }

    /**
     * Gets publishingStatus
     *
     * @return string
     */
    public function getPublishingStatus()
    {
        return $this->container['publishingStatus'];
    }

    /**
     * Sets publishingStatus
     *
     * @param string $publishingStatus Organization publishing status. Values: Draft, Published, Deleted or Modified.
     *
     * @return self
     */
    public function setPublishingStatus($publishingStatus)
    {
        if (is_null($publishingStatus)) {
            throw new \InvalidArgumentException('non-nullable publishingStatus cannot be null');
        }

        if ((mb_strlen($publishingStatus) < 1)) {
            throw new \InvalidArgumentException('invalid length for $publishingStatus when calling V9VmOpenApiOrganizationInBase., must be bigger than or equal to 1.');
        }

        $this->container['publishingStatus'] = $publishingStatus;

        return $this;
    }

    /**
     * Gets subAreaType
     *
     * @return string|null
     */
    public function getSubAreaType()
    {
        return $this->container['subAreaType'];
    }

    /**
     * Sets subAreaType
     *
     * @param string|null $subAreaType Sub area type (Municipality, Region, BusinessSubRegion, HospitalDistrict).
     *
     * @return self
     */
    public function setSubAreaType($subAreaType)
    {
        if (is_null($subAreaType)) {
            array_push($this->openAPINullablesSetToNull, 'subAreaType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subAreaType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subAreaType'] = $subAreaType;

        return $this;
    }

    /**
     * Gets areas
     *
     * @return string[]|null
     */
    public function getAreas()
    {
        return $this->container['areas'];
    }

    /**
     * Sets areas
     *
     * @param string[]|null $areas Area codes related to sub area type. For example if SubAreaType = Municipality, Areas-list need to include municipality codes like 491 or 091.
     *
     * @return self
     */
    public function setAreas($areas)
    {
        if (is_null($areas)) {
            array_push($this->openAPINullablesSetToNull, 'areas');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('areas', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['areas'] = $areas;

        return $this;
    }

    /**
     * Gets phoneNumbers
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiPhone[]|null
     */
    public function getPhoneNumbers()
    {
        return $this->container['phoneNumbers'];
    }

    /**
     * Sets phoneNumbers
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiPhone[]|null $phoneNumbers List of organizations phone numbers.
     *
     * @return self
     */
    public function setPhoneNumbers($phoneNumbers)
    {
        if (is_null($phoneNumbers)) {
            array_push($this->openAPINullablesSetToNull, 'phoneNumbers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phoneNumbers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phoneNumbers'] = $phoneNumbers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


