<?php
/**
 * V9VmOpenApiOrganizationInBase
 *
 * PHP version 5
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * OpenAPI spec version: v11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * V9VmOpenApiOrganizationInBase Class Doc Comment
 *
 * @category Class
 * @description OPEN API V8 - View Model of organization for IN api - base
 * @package  Tampere\PtvV11
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V9VmOpenApiOrganizationInBase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'V9VmOpenApiOrganizationInBase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sourceId' => 'string',
'businessCode' => 'string',
'businessName' => 'string',
'emails' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiEmail[]',
'webPages' => '\Tampere\PtvV11\PtvModel\V9VmOpenApiWebPage[]',
'electronicInvoicings' => '\Tampere\PtvV11\PtvModel\VmOpenApiOrganizationEInvoicing[]',
'businessId' => 'string',
'versionId' => 'string',
'oid' => 'string',
'municipality' => 'string',
'addresses' => '\Tampere\PtvV11\PtvModel\V9VmOpenApiAddressIn[]',
'parentOrganizationId' => 'string',
'deleteAllEmails' => 'bool',
'deleteAllPhones' => 'bool',
'deleteAllWebPages' => 'bool',
'deleteAllAddresses' => 'bool',
'deleteAllElectronicInvoicings' => 'bool',
'validFrom' => '\DateTime',
'validTo' => '\DateTime',
'id' => 'string',
'currentPublishingStatus' => 'string',
'userName' => 'string',
'availableLanguages' => 'string[]',
'requiredPropertiesAvailableLanguages' => 'string[]',
'organizationNames' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
'organizationDescriptions' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
'displayNameType' => '\Tampere\PtvV11\PtvModel\VmOpenApiNameTypeByLanguage[]',
'organizationType' => 'string',
'areaType' => 'string',
'subAreaType' => 'string',
'areas' => 'string[]',
'phoneNumbers' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiPhone[]',
'publishingStatus' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sourceId' => null,
'businessCode' => null,
'businessName' => null,
'emails' => null,
'webPages' => null,
'electronicInvoicings' => null,
'businessId' => 'uuid',
'versionId' => 'uuid',
'oid' => null,
'municipality' => null,
'addresses' => null,
'parentOrganizationId' => null,
'deleteAllEmails' => null,
'deleteAllPhones' => null,
'deleteAllWebPages' => null,
'deleteAllAddresses' => null,
'deleteAllElectronicInvoicings' => null,
'validFrom' => 'date-time',
'validTo' => 'date-time',
'id' => 'uuid',
'currentPublishingStatus' => null,
'userName' => null,
'availableLanguages' => null,
'requiredPropertiesAvailableLanguages' => null,
'organizationNames' => null,
'organizationDescriptions' => null,
'displayNameType' => null,
'organizationType' => null,
'areaType' => null,
'subAreaType' => null,
'areas' => null,
'phoneNumbers' => null,
'publishingStatus' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sourceId' => 'sourceId',
'businessCode' => 'businessCode',
'businessName' => 'businessName',
'emails' => 'emails',
'webPages' => 'webPages',
'electronicInvoicings' => 'electronicInvoicings',
'businessId' => 'businessId',
'versionId' => 'versionId',
'oid' => 'oid',
'municipality' => 'municipality',
'addresses' => 'addresses',
'parentOrganizationId' => 'parentOrganizationId',
'deleteAllEmails' => 'deleteAllEmails',
'deleteAllPhones' => 'deleteAllPhones',
'deleteAllWebPages' => 'deleteAllWebPages',
'deleteAllAddresses' => 'deleteAllAddresses',
'deleteAllElectronicInvoicings' => 'deleteAllElectronicInvoicings',
'validFrom' => 'validFrom',
'validTo' => 'validTo',
'id' => 'id',
'currentPublishingStatus' => 'currentPublishingStatus',
'userName' => 'userName',
'availableLanguages' => 'availableLanguages',
'requiredPropertiesAvailableLanguages' => 'requiredPropertiesAvailableLanguages',
'organizationNames' => 'organizationNames',
'organizationDescriptions' => 'organizationDescriptions',
'displayNameType' => 'displayNameType',
'organizationType' => 'organizationType',
'areaType' => 'areaType',
'subAreaType' => 'subAreaType',
'areas' => 'areas',
'phoneNumbers' => 'phoneNumbers',
'publishingStatus' => 'publishingStatus'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sourceId' => 'setSourceId',
'businessCode' => 'setBusinessCode',
'businessName' => 'setBusinessName',
'emails' => 'setEmails',
'webPages' => 'setWebPages',
'electronicInvoicings' => 'setElectronicInvoicings',
'businessId' => 'setBusinessId',
'versionId' => 'setVersionId',
'oid' => 'setOid',
'municipality' => 'setMunicipality',
'addresses' => 'setAddresses',
'parentOrganizationId' => 'setParentOrganizationId',
'deleteAllEmails' => 'setDeleteAllEmails',
'deleteAllPhones' => 'setDeleteAllPhones',
'deleteAllWebPages' => 'setDeleteAllWebPages',
'deleteAllAddresses' => 'setDeleteAllAddresses',
'deleteAllElectronicInvoicings' => 'setDeleteAllElectronicInvoicings',
'validFrom' => 'setValidFrom',
'validTo' => 'setValidTo',
'id' => 'setId',
'currentPublishingStatus' => 'setCurrentPublishingStatus',
'userName' => 'setUserName',
'availableLanguages' => 'setAvailableLanguages',
'requiredPropertiesAvailableLanguages' => 'setRequiredPropertiesAvailableLanguages',
'organizationNames' => 'setOrganizationNames',
'organizationDescriptions' => 'setOrganizationDescriptions',
'displayNameType' => 'setDisplayNameType',
'organizationType' => 'setOrganizationType',
'areaType' => 'setAreaType',
'subAreaType' => 'setSubAreaType',
'areas' => 'setAreas',
'phoneNumbers' => 'setPhoneNumbers',
'publishingStatus' => 'setPublishingStatus'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sourceId' => 'getSourceId',
'businessCode' => 'getBusinessCode',
'businessName' => 'getBusinessName',
'emails' => 'getEmails',
'webPages' => 'getWebPages',
'electronicInvoicings' => 'getElectronicInvoicings',
'businessId' => 'getBusinessId',
'versionId' => 'getVersionId',
'oid' => 'getOid',
'municipality' => 'getMunicipality',
'addresses' => 'getAddresses',
'parentOrganizationId' => 'getParentOrganizationId',
'deleteAllEmails' => 'getDeleteAllEmails',
'deleteAllPhones' => 'getDeleteAllPhones',
'deleteAllWebPages' => 'getDeleteAllWebPages',
'deleteAllAddresses' => 'getDeleteAllAddresses',
'deleteAllElectronicInvoicings' => 'getDeleteAllElectronicInvoicings',
'validFrom' => 'getValidFrom',
'validTo' => 'getValidTo',
'id' => 'getId',
'currentPublishingStatus' => 'getCurrentPublishingStatus',
'userName' => 'getUserName',
'availableLanguages' => 'getAvailableLanguages',
'requiredPropertiesAvailableLanguages' => 'getRequiredPropertiesAvailableLanguages',
'organizationNames' => 'getOrganizationNames',
'organizationDescriptions' => 'getOrganizationDescriptions',
'displayNameType' => 'getDisplayNameType',
'organizationType' => 'getOrganizationType',
'areaType' => 'getAreaType',
'subAreaType' => 'getSubAreaType',
'areas' => 'getAreas',
'phoneNumbers' => 'getPhoneNumbers',
'publishingStatus' => 'getPublishingStatus'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sourceId'] = isset($data['sourceId']) ? $data['sourceId'] : null;
        $this->container['businessCode'] = isset($data['businessCode']) ? $data['businessCode'] : null;
        $this->container['businessName'] = isset($data['businessName']) ? $data['businessName'] : null;
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
        $this->container['webPages'] = isset($data['webPages']) ? $data['webPages'] : null;
        $this->container['electronicInvoicings'] = isset($data['electronicInvoicings']) ? $data['electronicInvoicings'] : null;
        $this->container['businessId'] = isset($data['businessId']) ? $data['businessId'] : null;
        $this->container['versionId'] = isset($data['versionId']) ? $data['versionId'] : null;
        $this->container['oid'] = isset($data['oid']) ? $data['oid'] : null;
        $this->container['municipality'] = isset($data['municipality']) ? $data['municipality'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['parentOrganizationId'] = isset($data['parentOrganizationId']) ? $data['parentOrganizationId'] : null;
        $this->container['deleteAllEmails'] = isset($data['deleteAllEmails']) ? $data['deleteAllEmails'] : null;
        $this->container['deleteAllPhones'] = isset($data['deleteAllPhones']) ? $data['deleteAllPhones'] : null;
        $this->container['deleteAllWebPages'] = isset($data['deleteAllWebPages']) ? $data['deleteAllWebPages'] : null;
        $this->container['deleteAllAddresses'] = isset($data['deleteAllAddresses']) ? $data['deleteAllAddresses'] : null;
        $this->container['deleteAllElectronicInvoicings'] = isset($data['deleteAllElectronicInvoicings']) ? $data['deleteAllElectronicInvoicings'] : null;
        $this->container['validFrom'] = isset($data['validFrom']) ? $data['validFrom'] : null;
        $this->container['validTo'] = isset($data['validTo']) ? $data['validTo'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['currentPublishingStatus'] = isset($data['currentPublishingStatus']) ? $data['currentPublishingStatus'] : null;
        $this->container['userName'] = isset($data['userName']) ? $data['userName'] : null;
        $this->container['availableLanguages'] = isset($data['availableLanguages']) ? $data['availableLanguages'] : null;
        $this->container['requiredPropertiesAvailableLanguages'] = isset($data['requiredPropertiesAvailableLanguages']) ? $data['requiredPropertiesAvailableLanguages'] : null;
        $this->container['organizationNames'] = isset($data['organizationNames']) ? $data['organizationNames'] : null;
        $this->container['organizationDescriptions'] = isset($data['organizationDescriptions']) ? $data['organizationDescriptions'] : null;
        $this->container['displayNameType'] = isset($data['displayNameType']) ? $data['displayNameType'] : null;
        $this->container['organizationType'] = isset($data['organizationType']) ? $data['organizationType'] : null;
        $this->container['areaType'] = isset($data['areaType']) ? $data['areaType'] : null;
        $this->container['subAreaType'] = isset($data['subAreaType']) ? $data['subAreaType'] : null;
        $this->container['areas'] = isset($data['areas']) ? $data['areas'] : null;
        $this->container['phoneNumbers'] = isset($data['phoneNumbers']) ? $data['phoneNumbers'] : null;
        $this->container['publishingStatus'] = isset($data['publishingStatus']) ? $data['publishingStatus'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['publishingStatus'] === null) {
            $invalidProperties[] = "'publishingStatus' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sourceId
     *
     * @return string
     */
    public function getSourceId()
    {
        return $this->container['sourceId'];
    }

    /**
     * Sets sourceId
     *
     * @param string $sourceId Organization external system identifier. User needs to be logged in to be able to get/set value.
     *
     * @return $this
     */
    public function setSourceId($sourceId)
    {
        $this->container['sourceId'] = $sourceId;

        return $this;
    }

    /**
     * Gets businessCode
     *
     * @return string
     */
    public function getBusinessCode()
    {
        return $this->container['businessCode'];
    }

    /**
     * Sets businessCode
     *
     * @param string $businessCode Organization business code (Y-tunnus).
     *
     * @return $this
     */
    public function setBusinessCode($businessCode)
    {
        $this->container['businessCode'] = $businessCode;

        return $this;
    }

    /**
     * Gets businessName
     *
     * @return string
     */
    public function getBusinessName()
    {
        return $this->container['businessName'];
    }

    /**
     * Sets businessName
     *
     * @param string $businessName Organization business name (name used for business code). This property is not used in the API anymore. Do not use.
     *
     * @return $this
     */
    public function setBusinessName($businessName)
    {
        $this->container['businessName'] = $businessName;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiEmail[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiEmail[] $emails List of email addresses.
     *
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets webPages
     *
     * @return \Tampere\PtvV11\PtvModel\V9VmOpenApiWebPage[]
     */
    public function getWebPages()
    {
        return $this->container['webPages'];
    }

    /**
     * Sets webPages
     *
     * @param \Tampere\PtvV11\PtvModel\V9VmOpenApiWebPage[] $webPages List of organizations web pages.
     *
     * @return $this
     */
    public function setWebPages($webPages)
    {
        $this->container['webPages'] = $webPages;

        return $this;
    }

    /**
     * Gets electronicInvoicings
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiOrganizationEInvoicing[]
     */
    public function getElectronicInvoicings()
    {
        return $this->container['electronicInvoicings'];
    }

    /**
     * Sets electronicInvoicings
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiOrganizationEInvoicing[] $electronicInvoicings List of organizations electronic invoicing information.
     *
     * @return $this
     */
    public function setElectronicInvoicings($electronicInvoicings)
    {
        $this->container['electronicInvoicings'] = $electronicInvoicings;

        return $this;
    }

    /**
     * Gets businessId
     *
     * @return string
     */
    public function getBusinessId()
    {
        return $this->container['businessId'];
    }

    /**
     * Sets businessId
     *
     * @param string $businessId Business code entity identifier.
     *
     * @return $this
     */
    public function setBusinessId($businessId)
    {
        $this->container['businessId'] = $businessId;

        return $this;
    }

    /**
     * Gets versionId
     *
     * @return string
     */
    public function getVersionId()
    {
        return $this->container['versionId'];
    }

    /**
     * Sets versionId
     *
     * @param string $versionId The identifier for current version.
     *
     * @return $this
     */
    public function setVersionId($versionId)
    {
        $this->container['versionId'] = $versionId;

        return $this;
    }

    /**
     * Gets oid
     *
     * @return string
     */
    public function getOid()
    {
        return $this->container['oid'];
    }

    /**
     * Sets oid
     *
     * @param string $oid Organization OID. - must match the regex @\"^[A-Za-z0-9.-]*$\" (Max.Length: 100).
     *
     * @return $this
     */
    public function setOid($oid)
    {
        $this->container['oid'] = $oid;

        return $this;
    }

    /**
     * Gets municipality
     *
     * @return string
     */
    public function getMunicipality()
    {
        return $this->container['municipality'];
    }

    /**
     * Sets municipality
     *
     * @param string $municipality Municipality code (like 491 or 091).
     *
     * @return $this
     */
    public function setMunicipality($municipality)
    {
        $this->container['municipality'] = $municipality;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Tampere\PtvV11\PtvModel\V9VmOpenApiAddressIn[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Tampere\PtvV11\PtvModel\V9VmOpenApiAddressIn[] $addresses List of addresses.
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets parentOrganizationId
     *
     * @return string
     */
    public function getParentOrganizationId()
    {
        return $this->container['parentOrganizationId'];
    }

    /**
     * Sets parentOrganizationId
     *
     * @param string $parentOrganizationId Parent organization identifier.
     *
     * @return $this
     */
    public function setParentOrganizationId($parentOrganizationId)
    {
        $this->container['parentOrganizationId'] = $parentOrganizationId;

        return $this;
    }

    /**
     * Gets deleteAllEmails
     *
     * @return bool
     */
    public function getDeleteAllEmails()
    {
        return $this->container['deleteAllEmails'];
    }

    /**
     * Sets deleteAllEmails
     *
     * @param bool $deleteAllEmails Set to true to delete all existing emails (the EmailAddresses collection for this object should be empty collection when this option is used).
     *
     * @return $this
     */
    public function setDeleteAllEmails($deleteAllEmails)
    {
        $this->container['deleteAllEmails'] = $deleteAllEmails;

        return $this;
    }

    /**
     * Gets deleteAllPhones
     *
     * @return bool
     */
    public function getDeleteAllPhones()
    {
        return $this->container['deleteAllPhones'];
    }

    /**
     * Sets deleteAllPhones
     *
     * @param bool $deleteAllPhones Set to true to delete all existing phone numbers (the PhoneNumbers collection for this object should be empty collection when this option is used).
     *
     * @return $this
     */
    public function setDeleteAllPhones($deleteAllPhones)
    {
        $this->container['deleteAllPhones'] = $deleteAllPhones;

        return $this;
    }

    /**
     * Gets deleteAllWebPages
     *
     * @return bool
     */
    public function getDeleteAllWebPages()
    {
        return $this->container['deleteAllWebPages'];
    }

    /**
     * Sets deleteAllWebPages
     *
     * @param bool $deleteAllWebPages Set to true to delete all existing web pages (the WebPages collection for this object should be empty collection when this option is used).
     *
     * @return $this
     */
    public function setDeleteAllWebPages($deleteAllWebPages)
    {
        $this->container['deleteAllWebPages'] = $deleteAllWebPages;

        return $this;
    }

    /**
     * Gets deleteAllAddresses
     *
     * @return bool
     */
    public function getDeleteAllAddresses()
    {
        return $this->container['deleteAllAddresses'];
    }

    /**
     * Sets deleteAllAddresses
     *
     * @param bool $deleteAllAddresses Set to true to delete all existing addresses (the Addresses collection for this object should be empty collection when this option is used).
     *
     * @return $this
     */
    public function setDeleteAllAddresses($deleteAllAddresses)
    {
        $this->container['deleteAllAddresses'] = $deleteAllAddresses;

        return $this;
    }

    /**
     * Gets deleteAllElectronicInvoicings
     *
     * @return bool
     */
    public function getDeleteAllElectronicInvoicings()
    {
        return $this->container['deleteAllElectronicInvoicings'];
    }

    /**
     * Sets deleteAllElectronicInvoicings
     *
     * @param bool $deleteAllElectronicInvoicings Set to true to delete all existing electronic invoicing addresses (the ElectronicInvoicings collection for this object should be empty collection when this option is used).
     *
     * @return $this
     */
    public function setDeleteAllElectronicInvoicings($deleteAllElectronicInvoicings)
    {
        $this->container['deleteAllElectronicInvoicings'] = $deleteAllElectronicInvoicings;

        return $this;
    }

    /**
     * Gets validFrom
     *
     * @return \DateTime
     */
    public function getValidFrom()
    {
        return $this->container['validFrom'];
    }

    /**
     * Sets validFrom
     *
     * @param \DateTime $validFrom Date when item should be published.
     *
     * @return $this
     */
    public function setValidFrom($validFrom)
    {
        $this->container['validFrom'] = $validFrom;

        return $this;
    }

    /**
     * Gets validTo
     *
     * @return \DateTime
     */
    public function getValidTo()
    {
        return $this->container['validTo'];
    }

    /**
     * Sets validTo
     *
     * @param \DateTime $validTo Date when item should be archived.
     *
     * @return $this
     */
    public function setValidTo($validTo)
    {
        $this->container['validTo'] = $validTo;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Entity identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets currentPublishingStatus
     *
     * @return string
     */
    public function getCurrentPublishingStatus()
    {
        return $this->container['currentPublishingStatus'];
    }

    /**
     * Sets currentPublishingStatus
     *
     * @param string $currentPublishingStatus Current version publishing status.
     *
     * @return $this
     */
    public function setCurrentPublishingStatus($currentPublishingStatus)
    {
        $this->container['currentPublishingStatus'] = $currentPublishingStatus;

        return $this;
    }

    /**
     * Gets userName
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['userName'];
    }

    /**
     * Sets userName
     *
     * @param string $userName User name.
     *
     * @return $this
     */
    public function setUserName($userName)
    {
        $this->container['userName'] = $userName;

        return $this;
    }

    /**
     * Gets availableLanguages
     *
     * @return string[]
     */
    public function getAvailableLanguages()
    {
        return $this->container['availableLanguages'];
    }

    /**
     * Sets availableLanguages
     *
     * @param string[] $availableLanguages Gets or sets available languages
     *
     * @return $this
     */
    public function setAvailableLanguages($availableLanguages)
    {
        $this->container['availableLanguages'] = $availableLanguages;

        return $this;
    }

    /**
     * Gets requiredPropertiesAvailableLanguages
     *
     * @return string[]
     */
    public function getRequiredPropertiesAvailableLanguages()
    {
        return $this->container['requiredPropertiesAvailableLanguages'];
    }

    /**
     * Sets requiredPropertiesAvailableLanguages
     *
     * @param string[] $requiredPropertiesAvailableLanguages Internal property to check the languages within required lists: OrganizationNames and OrganizationDescriptions
     *
     * @return $this
     */
    public function setRequiredPropertiesAvailableLanguages($requiredPropertiesAvailableLanguages)
    {
        $this->container['requiredPropertiesAvailableLanguages'] = $requiredPropertiesAvailableLanguages;

        return $this;
    }

    /**
     * Gets organizationNames
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]
     */
    public function getOrganizationNames()
    {
        return $this->container['organizationNames'];
    }

    /**
     * Sets organizationNames
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[] $organizationNames List of organization names. Possible type values are: Name, AlternativeName.
     *
     * @return $this
     */
    public function setOrganizationNames($organizationNames)
    {
        $this->container['organizationNames'] = $organizationNames;

        return $this;
    }

    /**
     * Gets organizationDescriptions
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]
     */
    public function getOrganizationDescriptions()
    {
        return $this->container['organizationDescriptions'];
    }

    /**
     * Sets organizationDescriptions
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[] $organizationDescriptions Localized list of organization descriptions. Possible type values are: Description, Summary. (Max.Length: 2500 Description). (Max.Length: 150 Summary).
     *
     * @return $this
     */
    public function setOrganizationDescriptions($organizationDescriptions)
    {
        $this->container['organizationDescriptions'] = $organizationDescriptions;

        return $this;
    }

    /**
     * Gets displayNameType
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiNameTypeByLanguage[]
     */
    public function getDisplayNameType()
    {
        return $this->container['displayNameType'];
    }

    /**
     * Sets displayNameType
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiNameTypeByLanguage[] $displayNameType List of Display name types (Name or AlternativeName) for each language version of OrganizationNames.
     *
     * @return $this
     */
    public function setDisplayNameType($displayNameType)
    {
        $this->container['displayNameType'] = $displayNameType;

        return $this;
    }

    /**
     * Gets organizationType
     *
     * @return string
     */
    public function getOrganizationType()
    {
        return $this->container['organizationType'];
    }

    /**
     * Sets organizationType
     *
     * @param string $organizationType Organization type (State, Municipality, RegionalOrganization, Organization, Company, SotePublic, SotePrivate, Region).
     *
     * @return $this
     */
    public function setOrganizationType($organizationType)
    {
        $this->container['organizationType'] = $organizationType;

        return $this;
    }

    /**
     * Gets areaType
     *
     * @return string
     */
    public function getAreaType()
    {
        return $this->container['areaType'];
    }

    /**
     * Sets areaType
     *
     * @param string $areaType Area type (Nationwide, NationwideExceptAlandIslands, LimitedType).
     *
     * @return $this
     */
    public function setAreaType($areaType)
    {
        $this->container['areaType'] = $areaType;

        return $this;
    }

    /**
     * Gets subAreaType
     *
     * @return string
     */
    public function getSubAreaType()
    {
        return $this->container['subAreaType'];
    }

    /**
     * Sets subAreaType
     *
     * @param string $subAreaType Sub area type (Municipality, Region, BusinessSubRegion, HospitalDistrict).
     *
     * @return $this
     */
    public function setSubAreaType($subAreaType)
    {
        $this->container['subAreaType'] = $subAreaType;

        return $this;
    }

    /**
     * Gets areas
     *
     * @return string[]
     */
    public function getAreas()
    {
        return $this->container['areas'];
    }

    /**
     * Sets areas
     *
     * @param string[] $areas Area codes related to sub area type. For example if SubAreaType = Municipality, Areas-list need to include municipality codes like 491 or 091.
     *
     * @return $this
     */
    public function setAreas($areas)
    {
        $this->container['areas'] = $areas;

        return $this;
    }

    /**
     * Gets phoneNumbers
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiPhone[]
     */
    public function getPhoneNumbers()
    {
        return $this->container['phoneNumbers'];
    }

    /**
     * Sets phoneNumbers
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiPhone[] $phoneNumbers List of organizations phone numbers.
     *
     * @return $this
     */
    public function setPhoneNumbers($phoneNumbers)
    {
        $this->container['phoneNumbers'] = $phoneNumbers;

        return $this;
    }

    /**
     * Gets publishingStatus
     *
     * @return string
     */
    public function getPublishingStatus()
    {
        return $this->container['publishingStatus'];
    }

    /**
     * Sets publishingStatus
     *
     * @param string $publishingStatus Organization publishing status. Values: Draft, Published, Deleted or Modified.
     *
     * @return $this
     */
    public function setPublishingStatus($publishingStatus)
    {
        $this->container['publishingStatus'] = $publishingStatus;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
