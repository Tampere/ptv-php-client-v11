<?php
/**
 * VmOpenApiTranslationItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * The version of the OpenAPI document: v11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * VmOpenApiTranslationItem Class Doc Comment
 *
 * @category Class
 * @description OPEN API - View Model of translation item
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VmOpenApiTranslationItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VmOpenApiTranslationItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'organizationId' => 'string',
        'organizationName' => 'string',
        'businessCode' => 'string',
        'orderer' => 'string',
        'orderId' => 'int',
        'orderState' => 'string',
        'orderDate' => '\DateTime',
        'orderResolvedDate' => '\DateTime',
        'sourceLanguage' => 'string',
        'sourceLanguageCharAmount' => 'int',
        'targetLanguage' => 'string',
        'type' => 'string',
        'itemId' => 'string',
        'itemName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'organizationId' => 'uuid',
        'organizationName' => null,
        'businessCode' => null,
        'orderer' => null,
        'orderId' => 'int64',
        'orderState' => null,
        'orderDate' => 'date-time',
        'orderResolvedDate' => 'date-time',
        'sourceLanguage' => null,
        'sourceLanguageCharAmount' => 'int64',
        'targetLanguage' => null,
        'type' => null,
        'itemId' => 'uuid',
        'itemName' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'organizationId' => true,
		'organizationName' => true,
		'businessCode' => true,
		'orderer' => true,
		'orderId' => false,
		'orderState' => true,
		'orderDate' => true,
		'orderResolvedDate' => true,
		'sourceLanguage' => true,
		'sourceLanguageCharAmount' => false,
		'targetLanguage' => true,
		'type' => true,
		'itemId' => true,
		'itemName' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organizationId' => 'organizationId',
        'organizationName' => 'organizationName',
        'businessCode' => 'businessCode',
        'orderer' => 'orderer',
        'orderId' => 'orderId',
        'orderState' => 'orderState',
        'orderDate' => 'orderDate',
        'orderResolvedDate' => 'orderResolvedDate',
        'sourceLanguage' => 'sourceLanguage',
        'sourceLanguageCharAmount' => 'sourceLanguageCharAmount',
        'targetLanguage' => 'targetLanguage',
        'type' => 'type',
        'itemId' => 'itemId',
        'itemName' => 'itemName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organizationId' => 'setOrganizationId',
        'organizationName' => 'setOrganizationName',
        'businessCode' => 'setBusinessCode',
        'orderer' => 'setOrderer',
        'orderId' => 'setOrderId',
        'orderState' => 'setOrderState',
        'orderDate' => 'setOrderDate',
        'orderResolvedDate' => 'setOrderResolvedDate',
        'sourceLanguage' => 'setSourceLanguage',
        'sourceLanguageCharAmount' => 'setSourceLanguageCharAmount',
        'targetLanguage' => 'setTargetLanguage',
        'type' => 'setType',
        'itemId' => 'setItemId',
        'itemName' => 'setItemName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organizationId' => 'getOrganizationId',
        'organizationName' => 'getOrganizationName',
        'businessCode' => 'getBusinessCode',
        'orderer' => 'getOrderer',
        'orderId' => 'getOrderId',
        'orderState' => 'getOrderState',
        'orderDate' => 'getOrderDate',
        'orderResolvedDate' => 'getOrderResolvedDate',
        'sourceLanguage' => 'getSourceLanguage',
        'sourceLanguageCharAmount' => 'getSourceLanguageCharAmount',
        'targetLanguage' => 'getTargetLanguage',
        'type' => 'getType',
        'itemId' => 'getItemId',
        'itemName' => 'getItemName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('organizationId', $data ?? [], null);
        $this->setIfExists('organizationName', $data ?? [], null);
        $this->setIfExists('businessCode', $data ?? [], null);
        $this->setIfExists('orderer', $data ?? [], null);
        $this->setIfExists('orderId', $data ?? [], null);
        $this->setIfExists('orderState', $data ?? [], null);
        $this->setIfExists('orderDate', $data ?? [], null);
        $this->setIfExists('orderResolvedDate', $data ?? [], null);
        $this->setIfExists('sourceLanguage', $data ?? [], null);
        $this->setIfExists('sourceLanguageCharAmount', $data ?? [], null);
        $this->setIfExists('targetLanguage', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('itemId', $data ?? [], null);
        $this->setIfExists('itemName', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organizationId
     *
     * @return string|null
     */
    public function getOrganizationId()
    {
        return $this->container['organizationId'];
    }

    /**
     * Sets organizationId
     *
     * @param string|null $organizationId Id of the organization.
     *
     * @return self
     */
    public function setOrganizationId($organizationId)
    {
        if (is_null($organizationId)) {
            array_push($this->openAPINullablesSetToNull, 'organizationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organizationId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organizationId'] = $organizationId;

        return $this;
    }

    /**
     * Gets organizationName
     *
     * @return string|null
     */
    public function getOrganizationName()
    {
        return $this->container['organizationName'];
    }

    /**
     * Sets organizationName
     *
     * @param string|null $organizationName Name of the organization.
     *
     * @return self
     */
    public function setOrganizationName($organizationName)
    {
        if (is_null($organizationName)) {
            array_push($this->openAPINullablesSetToNull, 'organizationName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organizationName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organizationName'] = $organizationName;

        return $this;
    }

    /**
     * Gets businessCode
     *
     * @return string|null
     */
    public function getBusinessCode()
    {
        return $this->container['businessCode'];
    }

    /**
     * Sets businessCode
     *
     * @param string|null $businessCode Name of the organization.
     *
     * @return self
     */
    public function setBusinessCode($businessCode)
    {
        if (is_null($businessCode)) {
            array_push($this->openAPINullablesSetToNull, 'businessCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('businessCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['businessCode'] = $businessCode;

        return $this;
    }

    /**
     * Gets orderer
     *
     * @return string|null
     */
    public function getOrderer()
    {
        return $this->container['orderer'];
    }

    /**
     * Sets orderer
     *
     * @param string|null $orderer Order made by (email).
     *
     * @return self
     */
    public function setOrderer($orderer)
    {
        if (is_null($orderer)) {
            array_push($this->openAPINullablesSetToNull, 'orderer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orderer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orderer'] = $orderer;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return int|null
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param int|null $orderId Order identifier.
     *
     * @return self
     */
    public function setOrderId($orderId)
    {
        if (is_null($orderId)) {
            throw new \InvalidArgumentException('non-nullable orderId cannot be null');
        }
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets orderState
     *
     * @return string|null
     */
    public function getOrderState()
    {
        return $this->container['orderState'];
    }

    /**
     * Sets orderState
     *
     * @param string|null $orderState Order state.
     *
     * @return self
     */
    public function setOrderState($orderState)
    {
        if (is_null($orderState)) {
            array_push($this->openAPINullablesSetToNull, 'orderState');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orderState', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orderState'] = $orderState;

        return $this;
    }

    /**
     * Gets orderDate
     *
     * @return \DateTime|null
     */
    public function getOrderDate()
    {
        return $this->container['orderDate'];
    }

    /**
     * Sets orderDate
     *
     * @param \DateTime|null $orderDate Order date.
     *
     * @return self
     */
    public function setOrderDate($orderDate)
    {
        if (is_null($orderDate)) {
            array_push($this->openAPINullablesSetToNull, 'orderDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orderDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orderDate'] = $orderDate;

        return $this;
    }

    /**
     * Gets orderResolvedDate
     *
     * @return \DateTime|null
     */
    public function getOrderResolvedDate()
    {
        return $this->container['orderResolvedDate'];
    }

    /**
     * Sets orderResolvedDate
     *
     * @param \DateTime|null $orderResolvedDate Order resolved and delivered date.
     *
     * @return self
     */
    public function setOrderResolvedDate($orderResolvedDate)
    {
        if (is_null($orderResolvedDate)) {
            array_push($this->openAPINullablesSetToNull, 'orderResolvedDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orderResolvedDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orderResolvedDate'] = $orderResolvedDate;

        return $this;
    }

    /**
     * Gets sourceLanguage
     *
     * @return string|null
     */
    public function getSourceLanguage()
    {
        return $this->container['sourceLanguage'];
    }

    /**
     * Sets sourceLanguage
     *
     * @param string|null $sourceLanguage Source language.
     *
     * @return self
     */
    public function setSourceLanguage($sourceLanguage)
    {
        if (is_null($sourceLanguage)) {
            array_push($this->openAPINullablesSetToNull, 'sourceLanguage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceLanguage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourceLanguage'] = $sourceLanguage;

        return $this;
    }

    /**
     * Gets sourceLanguageCharAmount
     *
     * @return int|null
     */
    public function getSourceLanguageCharAmount()
    {
        return $this->container['sourceLanguageCharAmount'];
    }

    /**
     * Sets sourceLanguageCharAmount
     *
     * @param int|null $sourceLanguageCharAmount Amount of chars in source text.
     *
     * @return self
     */
    public function setSourceLanguageCharAmount($sourceLanguageCharAmount)
    {
        if (is_null($sourceLanguageCharAmount)) {
            throw new \InvalidArgumentException('non-nullable sourceLanguageCharAmount cannot be null');
        }
        $this->container['sourceLanguageCharAmount'] = $sourceLanguageCharAmount;

        return $this;
    }

    /**
     * Gets targetLanguage
     *
     * @return string|null
     */
    public function getTargetLanguage()
    {
        return $this->container['targetLanguage'];
    }

    /**
     * Sets targetLanguage
     *
     * @param string|null $targetLanguage Target language.
     *
     * @return self
     */
    public function setTargetLanguage($targetLanguage)
    {
        if (is_null($targetLanguage)) {
            array_push($this->openAPINullablesSetToNull, 'targetLanguage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('targetLanguage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['targetLanguage'] = $targetLanguage;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of the item, either Service or Channel.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets itemId
     *
     * @return string|null
     */
    public function getItemId()
    {
        return $this->container['itemId'];
    }

    /**
     * Sets itemId
     *
     * @param string|null $itemId Id of the item.
     *
     * @return self
     */
    public function setItemId($itemId)
    {
        if (is_null($itemId)) {
            array_push($this->openAPINullablesSetToNull, 'itemId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('itemId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['itemId'] = $itemId;

        return $this;
    }

    /**
     * Gets itemName
     *
     * @return string|null
     */
    public function getItemName()
    {
        return $this->container['itemName'];
    }

    /**
     * Sets itemName
     *
     * @param string|null $itemName Name of the item.
     *
     * @return self
     */
    public function setItemName($itemName)
    {
        if (is_null($itemName)) {
            array_push($this->openAPINullablesSetToNull, 'itemName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('itemName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['itemName'] = $itemName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


