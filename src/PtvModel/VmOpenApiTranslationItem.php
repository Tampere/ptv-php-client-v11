<?php
/**
 * VmOpenApiTranslationItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * OpenAPI spec version: v11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * VmOpenApiTranslationItem Class Doc Comment
 *
 * @category Class
 * @description OPEN API - View Model of translation item
 * @package  Tampere\PtvV11
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VmOpenApiTranslationItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VmOpenApiTranslationItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organizationId' => 'string',
'organizationName' => 'string',
'businessCode' => 'string',
'orderer' => 'string',
'orderId' => 'int',
'orderState' => 'string',
'orderDate' => '\DateTime',
'orderResolvedDate' => '\DateTime',
'sourceLanguage' => 'string',
'sourceLanguageCharAmount' => 'int',
'targetLanguage' => 'string',
'type' => 'string',
'itemId' => 'string',
'itemName' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organizationId' => 'uuid',
'organizationName' => null,
'businessCode' => null,
'orderer' => null,
'orderId' => 'int64',
'orderState' => null,
'orderDate' => 'date-time',
'orderResolvedDate' => 'date-time',
'sourceLanguage' => null,
'sourceLanguageCharAmount' => 'int64',
'targetLanguage' => null,
'type' => null,
'itemId' => 'uuid',
'itemName' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organizationId' => 'organizationId',
'organizationName' => 'organizationName',
'businessCode' => 'businessCode',
'orderer' => 'orderer',
'orderId' => 'orderId',
'orderState' => 'orderState',
'orderDate' => 'orderDate',
'orderResolvedDate' => 'orderResolvedDate',
'sourceLanguage' => 'sourceLanguage',
'sourceLanguageCharAmount' => 'sourceLanguageCharAmount',
'targetLanguage' => 'targetLanguage',
'type' => 'type',
'itemId' => 'itemId',
'itemName' => 'itemName'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organizationId' => 'setOrganizationId',
'organizationName' => 'setOrganizationName',
'businessCode' => 'setBusinessCode',
'orderer' => 'setOrderer',
'orderId' => 'setOrderId',
'orderState' => 'setOrderState',
'orderDate' => 'setOrderDate',
'orderResolvedDate' => 'setOrderResolvedDate',
'sourceLanguage' => 'setSourceLanguage',
'sourceLanguageCharAmount' => 'setSourceLanguageCharAmount',
'targetLanguage' => 'setTargetLanguage',
'type' => 'setType',
'itemId' => 'setItemId',
'itemName' => 'setItemName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organizationId' => 'getOrganizationId',
'organizationName' => 'getOrganizationName',
'businessCode' => 'getBusinessCode',
'orderer' => 'getOrderer',
'orderId' => 'getOrderId',
'orderState' => 'getOrderState',
'orderDate' => 'getOrderDate',
'orderResolvedDate' => 'getOrderResolvedDate',
'sourceLanguage' => 'getSourceLanguage',
'sourceLanguageCharAmount' => 'getSourceLanguageCharAmount',
'targetLanguage' => 'getTargetLanguage',
'type' => 'getType',
'itemId' => 'getItemId',
'itemName' => 'getItemName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organizationId'] = isset($data['organizationId']) ? $data['organizationId'] : null;
        $this->container['organizationName'] = isset($data['organizationName']) ? $data['organizationName'] : null;
        $this->container['businessCode'] = isset($data['businessCode']) ? $data['businessCode'] : null;
        $this->container['orderer'] = isset($data['orderer']) ? $data['orderer'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
        $this->container['orderState'] = isset($data['orderState']) ? $data['orderState'] : null;
        $this->container['orderDate'] = isset($data['orderDate']) ? $data['orderDate'] : null;
        $this->container['orderResolvedDate'] = isset($data['orderResolvedDate']) ? $data['orderResolvedDate'] : null;
        $this->container['sourceLanguage'] = isset($data['sourceLanguage']) ? $data['sourceLanguage'] : null;
        $this->container['sourceLanguageCharAmount'] = isset($data['sourceLanguageCharAmount']) ? $data['sourceLanguageCharAmount'] : null;
        $this->container['targetLanguage'] = isset($data['targetLanguage']) ? $data['targetLanguage'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['itemId'] = isset($data['itemId']) ? $data['itemId'] : null;
        $this->container['itemName'] = isset($data['itemName']) ? $data['itemName'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organizationId
     *
     * @return string
     */
    public function getOrganizationId()
    {
        return isset($this->container['organizationId']) ? $this->container['organizationId'] : null;
    }

    /**
     * Sets organizationId
     *
     * @param string $organizationId Id of the organization.
     *
     * @return $this
     */
    public function setOrganizationId($organizationId)
    {
        $this->container['organizationId'] = $organizationId;

        return $this;
    }

    /**
     * Gets organizationName
     *
     * @return string
     */
    public function getOrganizationName()
    {
        return isset($this->container['organizationName']) ? $this->container['organizationName'] : null;
    }

    /**
     * Sets organizationName
     *
     * @param string $organizationName Name of the organization.
     *
     * @return $this
     */
    public function setOrganizationName($organizationName)
    {
        $this->container['organizationName'] = $organizationName;

        return $this;
    }

    /**
     * Gets businessCode
     *
     * @return string
     */
    public function getBusinessCode()
    {
        return isset($this->container['businessCode']) ? $this->container['businessCode'] : null;
    }

    /**
     * Sets businessCode
     *
     * @param string $businessCode Name of the organization.
     *
     * @return $this
     */
    public function setBusinessCode($businessCode)
    {
        $this->container['businessCode'] = $businessCode;

        return $this;
    }

    /**
     * Gets orderer
     *
     * @return string
     */
    public function getOrderer()
    {
        return isset($this->container['orderer']) ? $this->container['orderer'] : null;
    }

    /**
     * Sets orderer
     *
     * @param string $orderer Order made by (email).
     *
     * @return $this
     */
    public function setOrderer($orderer)
    {
        $this->container['orderer'] = $orderer;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return int
     */
    public function getOrderId()
    {
        return isset($this->container['orderId']) ? $this->container['orderId'] : null;
    }

    /**
     * Sets orderId
     *
     * @param int $orderId Order identifier.
     *
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets orderState
     *
     * @return string
     */
    public function getOrderState()
    {
        return isset($this->container['orderState']) ? $this->container['orderState'] : null;
    }

    /**
     * Sets orderState
     *
     * @param string $orderState Order state.
     *
     * @return $this
     */
    public function setOrderState($orderState)
    {
        $this->container['orderState'] = $orderState;

        return $this;
    }

    /**
     * Gets orderDate
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return isset($this->container['orderDate']) ? $this->container['orderDate'] : null;
    }

    /**
     * Sets orderDate
     *
     * @param \DateTime $orderDate Order date.
     *
     * @return $this
     */
    public function setOrderDate($orderDate)
    {
        $this->container['orderDate'] = $orderDate;

        return $this;
    }

    /**
     * Gets orderResolvedDate
     *
     * @return \DateTime
     */
    public function getOrderResolvedDate()
    {
        return isset($this->container['orderResolvedDate']) ? $this->container['orderResolvedDate'] : null;
    }

    /**
     * Sets orderResolvedDate
     *
     * @param \DateTime $orderResolvedDate Order resolved and delivered date.
     *
     * @return $this
     */
    public function setOrderResolvedDate($orderResolvedDate)
    {
        $this->container['orderResolvedDate'] = $orderResolvedDate;

        return $this;
    }

    /**
     * Gets sourceLanguage
     *
     * @return string
     */
    public function getSourceLanguage()
    {
        return isset($this->container['sourceLanguage']) ? $this->container['sourceLanguage'] : null;
    }

    /**
     * Sets sourceLanguage
     *
     * @param string $sourceLanguage Source language.
     *
     * @return $this
     */
    public function setSourceLanguage($sourceLanguage)
    {
        $this->container['sourceLanguage'] = $sourceLanguage;

        return $this;
    }

    /**
     * Gets sourceLanguageCharAmount
     *
     * @return int
     */
    public function getSourceLanguageCharAmount()
    {
        return isset($this->container['sourceLanguageCharAmount']) ? $this->container['sourceLanguageCharAmount'] : null;
    }

    /**
     * Sets sourceLanguageCharAmount
     *
     * @param int $sourceLanguageCharAmount Amount of chars in source text.
     *
     * @return $this
     */
    public function setSourceLanguageCharAmount($sourceLanguageCharAmount)
    {
        $this->container['sourceLanguageCharAmount'] = $sourceLanguageCharAmount;

        return $this;
    }

    /**
     * Gets targetLanguage
     *
     * @return string
     */
    public function getTargetLanguage()
    {
        return isset($this->container['targetLanguage']) ? $this->container['targetLanguage'] : null;
    }

    /**
     * Sets targetLanguage
     *
     * @param string $targetLanguage Target language.
     *
     * @return $this
     */
    public function setTargetLanguage($targetLanguage)
    {
        $this->container['targetLanguage'] = $targetLanguage;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return isset($this->container['type']) ? $this->container['type'] : null;
    }

    /**
     * Sets type
     *
     * @param string $type Type of the item, either Service or Channel.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets itemId
     *
     * @return string
     */
    public function getItemId()
    {
        return isset($this->container['itemId']) ? $this->container['itemId'] : null;
    }

    /**
     * Sets itemId
     *
     * @param string $itemId Id of the item.
     *
     * @return $this
     */
    public function setItemId($itemId)
    {
        $this->container['itemId'] = $itemId;

        return $this;
    }

    /**
     * Gets itemName
     *
     * @return string
     */
    public function getItemName()
    {
        return isset($this->container['itemName']) ? $this->container['itemName'] : null;
    }

    /**
     * Sets itemName
     *
     * @param string $itemName Name of the item.
     *
     * @return $this
     */
    public function setItemName($itemName)
    {
        $this->container['itemName'] = $itemName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
