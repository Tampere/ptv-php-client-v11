<?php
/**
 * V11VmOpenApiServiceCollectionIn
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * The version of the OpenAPI document: v11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * V11VmOpenApiServiceCollectionIn Class Doc Comment
 *
 * @category Class
 * @description OPEN API V11 - View Model of service collection IN
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V11VmOpenApiServiceCollectionIn implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V11VmOpenApiServiceCollectionIn';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sourceId' => 'string',
        'availableLanguages' => 'string[]',
        'versionId' => 'string',
        'id' => 'string',
        'currentPublishingStatus' => 'string',
        'services' => 'string[]',
        'serviceCollectionServices' => 'string[]',
        'serviceCollectionChannels' => 'string[]',
        'deleteAllChannels' => 'bool',
        'requiredPropertiesAvailableLanguages' => 'string[]',
        'serviceCollectionDescriptions' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
        'serviceChannels' => 'string[]',
        'serviceCollectionNames' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
        'organizationId' => 'string',
        'publishingStatus' => 'string',
        'deleteAllServices' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sourceId' => null,
        'availableLanguages' => null,
        'versionId' => 'uuid',
        'id' => 'uuid',
        'currentPublishingStatus' => null,
        'services' => null,
        'serviceCollectionServices' => 'uuid',
        'serviceCollectionChannels' => 'uuid',
        'deleteAllChannels' => null,
        'requiredPropertiesAvailableLanguages' => null,
        'serviceCollectionDescriptions' => null,
        'serviceChannels' => null,
        'serviceCollectionNames' => null,
        'organizationId' => null,
        'publishingStatus' => null,
        'deleteAllServices' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sourceId' => true,
		'availableLanguages' => true,
		'versionId' => true,
		'id' => true,
		'currentPublishingStatus' => true,
		'services' => true,
		'serviceCollectionServices' => true,
		'serviceCollectionChannels' => true,
		'deleteAllChannels' => false,
		'requiredPropertiesAvailableLanguages' => true,
		'serviceCollectionDescriptions' => true,
		'serviceChannels' => true,
		'serviceCollectionNames' => true,
		'organizationId' => false,
		'publishingStatus' => false,
		'deleteAllServices' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sourceId' => 'sourceId',
        'availableLanguages' => 'availableLanguages',
        'versionId' => 'versionId',
        'id' => 'id',
        'currentPublishingStatus' => 'currentPublishingStatus',
        'services' => 'services',
        'serviceCollectionServices' => 'serviceCollectionServices',
        'serviceCollectionChannels' => 'serviceCollectionChannels',
        'deleteAllChannels' => 'deleteAllChannels',
        'requiredPropertiesAvailableLanguages' => 'requiredPropertiesAvailableLanguages',
        'serviceCollectionDescriptions' => 'serviceCollectionDescriptions',
        'serviceChannels' => 'serviceChannels',
        'serviceCollectionNames' => 'serviceCollectionNames',
        'organizationId' => 'organizationId',
        'publishingStatus' => 'publishingStatus',
        'deleteAllServices' => 'deleteAllServices'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sourceId' => 'setSourceId',
        'availableLanguages' => 'setAvailableLanguages',
        'versionId' => 'setVersionId',
        'id' => 'setId',
        'currentPublishingStatus' => 'setCurrentPublishingStatus',
        'services' => 'setServices',
        'serviceCollectionServices' => 'setServiceCollectionServices',
        'serviceCollectionChannels' => 'setServiceCollectionChannels',
        'deleteAllChannels' => 'setDeleteAllChannels',
        'requiredPropertiesAvailableLanguages' => 'setRequiredPropertiesAvailableLanguages',
        'serviceCollectionDescriptions' => 'setServiceCollectionDescriptions',
        'serviceChannels' => 'setServiceChannels',
        'serviceCollectionNames' => 'setServiceCollectionNames',
        'organizationId' => 'setOrganizationId',
        'publishingStatus' => 'setPublishingStatus',
        'deleteAllServices' => 'setDeleteAllServices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sourceId' => 'getSourceId',
        'availableLanguages' => 'getAvailableLanguages',
        'versionId' => 'getVersionId',
        'id' => 'getId',
        'currentPublishingStatus' => 'getCurrentPublishingStatus',
        'services' => 'getServices',
        'serviceCollectionServices' => 'getServiceCollectionServices',
        'serviceCollectionChannels' => 'getServiceCollectionChannels',
        'deleteAllChannels' => 'getDeleteAllChannels',
        'requiredPropertiesAvailableLanguages' => 'getRequiredPropertiesAvailableLanguages',
        'serviceCollectionDescriptions' => 'getServiceCollectionDescriptions',
        'serviceChannels' => 'getServiceChannels',
        'serviceCollectionNames' => 'getServiceCollectionNames',
        'organizationId' => 'getOrganizationId',
        'publishingStatus' => 'getPublishingStatus',
        'deleteAllServices' => 'getDeleteAllServices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sourceId', $data ?? [], null);
        $this->setIfExists('availableLanguages', $data ?? [], null);
        $this->setIfExists('versionId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('currentPublishingStatus', $data ?? [], null);
        $this->setIfExists('services', $data ?? [], null);
        $this->setIfExists('serviceCollectionServices', $data ?? [], null);
        $this->setIfExists('serviceCollectionChannels', $data ?? [], null);
        $this->setIfExists('deleteAllChannels', $data ?? [], null);
        $this->setIfExists('requiredPropertiesAvailableLanguages', $data ?? [], null);
        $this->setIfExists('serviceCollectionDescriptions', $data ?? [], null);
        $this->setIfExists('serviceChannels', $data ?? [], null);
        $this->setIfExists('serviceCollectionNames', $data ?? [], null);
        $this->setIfExists('organizationId', $data ?? [], null);
        $this->setIfExists('publishingStatus', $data ?? [], null);
        $this->setIfExists('deleteAllServices', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sourceId']) && !preg_match("/^[A-Za-z0-9-.]*$/", $this->container['sourceId'])) {
            $invalidProperties[] = "invalid value for 'sourceId', must be conform to the pattern /^[A-Za-z0-9-.]*$/.";
        }

        if ($this->container['serviceCollectionNames'] === null) {
            $invalidProperties[] = "'serviceCollectionNames' can't be null";
        }
        if ($this->container['organizationId'] === null) {
            $invalidProperties[] = "'organizationId' can't be null";
        }
        if ((mb_strlen($this->container['organizationId']) < 1)) {
            $invalidProperties[] = "invalid value for 'organizationId', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['publishingStatus'] === null) {
            $invalidProperties[] = "'publishingStatus' can't be null";
        }
        if ((mb_strlen($this->container['publishingStatus']) < 1)) {
            $invalidProperties[] = "invalid value for 'publishingStatus', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sourceId
     *
     * @return string|null
     */
    public function getSourceId()
    {
        return $this->container['sourceId'];
    }

    /**
     * Sets sourceId
     *
     * @param string|null $sourceId External system identifier for the entity. User needs to be logged in to be able to get/set value.
     *
     * @return self
     */
    public function setSourceId($sourceId)
    {
        if (is_null($sourceId)) {
            array_push($this->openAPINullablesSetToNull, 'sourceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($sourceId) && (!preg_match("/^[A-Za-z0-9-.]*$/", $sourceId))) {
            throw new \InvalidArgumentException("invalid value for \$sourceId when calling V11VmOpenApiServiceCollectionIn., must conform to the pattern /^[A-Za-z0-9-.]*$/.");
        }

        $this->container['sourceId'] = $sourceId;

        return $this;
    }

    /**
     * Gets availableLanguages
     *
     * @return string[]|null
     */
    public function getAvailableLanguages()
    {
        return $this->container['availableLanguages'];
    }

    /**
     * Sets availableLanguages
     *
     * @param string[]|null $availableLanguages Gets or sets available languages
     *
     * @return self
     */
    public function setAvailableLanguages($availableLanguages)
    {
        if (is_null($availableLanguages)) {
            array_push($this->openAPINullablesSetToNull, 'availableLanguages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('availableLanguages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['availableLanguages'] = $availableLanguages;

        return $this;
    }

    /**
     * Gets versionId
     *
     * @return string|null
     */
    public function getVersionId()
    {
        return $this->container['versionId'];
    }

    /**
     * Sets versionId
     *
     * @param string|null $versionId The identifier for current version.
     *
     * @return self
     */
    public function setVersionId($versionId)
    {
        if (is_null($versionId)) {
            array_push($this->openAPINullablesSetToNull, 'versionId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('versionId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['versionId'] = $versionId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id PTV service identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets currentPublishingStatus
     *
     * @return string|null
     */
    public function getCurrentPublishingStatus()
    {
        return $this->container['currentPublishingStatus'];
    }

    /**
     * Sets currentPublishingStatus
     *
     * @param string|null $currentPublishingStatus Current version publishing status.
     *
     * @return self
     */
    public function setCurrentPublishingStatus($currentPublishingStatus)
    {
        if (is_null($currentPublishingStatus)) {
            array_push($this->openAPINullablesSetToNull, 'currentPublishingStatus');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currentPublishingStatus', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currentPublishingStatus'] = $currentPublishingStatus;

        return $this;
    }

    /**
     * Gets services
     *
     * @return string[]|null
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param string[]|null $services List of service collection services.
     *
     * @return self
     */
    public function setServices($services)
    {
        if (is_null($services)) {
            array_push($this->openAPINullablesSetToNull, 'services');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('services', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets serviceCollectionServices
     *
     * @return string[]|null
     */
    public function getServiceCollectionServices()
    {
        return $this->container['serviceCollectionServices'];
    }

    /**
     * Sets serviceCollectionServices
     *
     * @param string[]|null $serviceCollectionServices Internal property for adding service collection services for service collection.
     *
     * @return self
     */
    public function setServiceCollectionServices($serviceCollectionServices)
    {
        if (is_null($serviceCollectionServices)) {
            array_push($this->openAPINullablesSetToNull, 'serviceCollectionServices');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceCollectionServices', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceCollectionServices'] = $serviceCollectionServices;

        return $this;
    }

    /**
     * Gets serviceCollectionChannels
     *
     * @return string[]|null
     */
    public function getServiceCollectionChannels()
    {
        return $this->container['serviceCollectionChannels'];
    }

    /**
     * Sets serviceCollectionChannels
     *
     * @param string[]|null $serviceCollectionChannels Internal property for adding service collection services for service collection.
     *
     * @return self
     */
    public function setServiceCollectionChannels($serviceCollectionChannels)
    {
        if (is_null($serviceCollectionChannels)) {
            array_push($this->openAPINullablesSetToNull, 'serviceCollectionChannels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceCollectionChannels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceCollectionChannels'] = $serviceCollectionChannels;

        return $this;
    }

    /**
     * Gets deleteAllChannels
     *
     * @return bool|null
     */
    public function getDeleteAllChannels()
    {
        return $this->container['deleteAllChannels'];
    }

    /**
     * Sets deleteAllChannels
     *
     * @param bool|null $deleteAllChannels Set to true to delete all existing channels (the services collection for this object should be empty collection when this option is used).
     *
     * @return self
     */
    public function setDeleteAllChannels($deleteAllChannels)
    {
        if (is_null($deleteAllChannels)) {
            throw new \InvalidArgumentException('non-nullable deleteAllChannels cannot be null');
        }
        $this->container['deleteAllChannels'] = $deleteAllChannels;

        return $this;
    }

    /**
     * Gets requiredPropertiesAvailableLanguages
     *
     * @return string[]|null
     */
    public function getRequiredPropertiesAvailableLanguages()
    {
        return $this->container['requiredPropertiesAvailableLanguages'];
    }

    /**
     * Sets requiredPropertiesAvailableLanguages
     *
     * @param string[]|null $requiredPropertiesAvailableLanguages Internal property to check the languages within required lists: ServiceCollectionNames and ServiceCollectionDescriptions
     *
     * @return self
     */
    public function setRequiredPropertiesAvailableLanguages($requiredPropertiesAvailableLanguages)
    {
        if (is_null($requiredPropertiesAvailableLanguages)) {
            array_push($this->openAPINullablesSetToNull, 'requiredPropertiesAvailableLanguages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requiredPropertiesAvailableLanguages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requiredPropertiesAvailableLanguages'] = $requiredPropertiesAvailableLanguages;

        return $this;
    }

    /**
     * Gets serviceCollectionDescriptions
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null
     */
    public function getServiceCollectionDescriptions()
    {
        return $this->container['serviceCollectionDescriptions'];
    }

    /**
     * Sets serviceCollectionDescriptions
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null $serviceCollectionDescriptions List of localized service colections descriptions. Possible type values are: Description, Summary. (Max.Length: 150 Summary). (Max.Length: 2500 Description).
     *
     * @return self
     */
    public function setServiceCollectionDescriptions($serviceCollectionDescriptions)
    {
        if (is_null($serviceCollectionDescriptions)) {
            array_push($this->openAPINullablesSetToNull, 'serviceCollectionDescriptions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceCollectionDescriptions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceCollectionDescriptions'] = $serviceCollectionDescriptions;

        return $this;
    }

    /**
     * Gets serviceChannels
     *
     * @return string[]|null
     */
    public function getServiceChannels()
    {
        return $this->container['serviceChannels'];
    }

    /**
     * Sets serviceChannels
     *
     * @param string[]|null $serviceChannels List of service collection channels.
     *
     * @return self
     */
    public function setServiceChannels($serviceChannels)
    {
        if (is_null($serviceChannels)) {
            array_push($this->openAPINullablesSetToNull, 'serviceChannels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceChannels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceChannels'] = $serviceChannels;

        return $this;
    }

    /**
     * Gets serviceCollectionNames
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]
     */
    public function getServiceCollectionNames()
    {
        return $this->container['serviceCollectionNames'];
    }

    /**
     * Sets serviceCollectionNames
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[] $serviceCollectionNames List of localized service collection names.
     *
     * @return self
     */
    public function setServiceCollectionNames($serviceCollectionNames)
    {
        if (is_null($serviceCollectionNames)) {
            array_push($this->openAPINullablesSetToNull, 'serviceCollectionNames');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceCollectionNames', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceCollectionNames'] = $serviceCollectionNames;

        return $this;
    }

    /**
     * Gets organizationId
     *
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->container['organizationId'];
    }

    /**
     * Sets organizationId
     *
     * @param string $organizationId Main responsible organization Id.
     *
     * @return self
     */
    public function setOrganizationId($organizationId)
    {
        if (is_null($organizationId)) {
            throw new \InvalidArgumentException('non-nullable organizationId cannot be null');
        }

        if ((mb_strlen($organizationId) < 1)) {
            throw new \InvalidArgumentException('invalid length for $organizationId when calling V11VmOpenApiServiceCollectionIn., must be bigger than or equal to 1.');
        }

        $this->container['organizationId'] = $organizationId;

        return $this;
    }

    /**
     * Gets publishingStatus
     *
     * @return string
     */
    public function getPublishingStatus()
    {
        return $this->container['publishingStatus'];
    }

    /**
     * Sets publishingStatus
     *
     * @param string $publishingStatus Publishing status. Possible values are: Draft or Published.
     *
     * @return self
     */
    public function setPublishingStatus($publishingStatus)
    {
        if (is_null($publishingStatus)) {
            throw new \InvalidArgumentException('non-nullable publishingStatus cannot be null');
        }

        if ((mb_strlen($publishingStatus) < 1)) {
            throw new \InvalidArgumentException('invalid length for $publishingStatus when calling V11VmOpenApiServiceCollectionIn., must be bigger than or equal to 1.');
        }

        $this->container['publishingStatus'] = $publishingStatus;

        return $this;
    }

    /**
     * Gets deleteAllServices
     *
     * @return bool|null
     */
    public function getDeleteAllServices()
    {
        return $this->container['deleteAllServices'];
    }

    /**
     * Sets deleteAllServices
     *
     * @param bool|null $deleteAllServices Set to true to delete all existing services (the services collection for this object should be empty collection when this option is used).
     *
     * @return self
     */
    public function setDeleteAllServices($deleteAllServices)
    {
        if (is_null($deleteAllServices)) {
            throw new \InvalidArgumentException('non-nullable deleteAllServices cannot be null');
        }
        $this->container['deleteAllServices'] = $deleteAllServices;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


