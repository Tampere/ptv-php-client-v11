<?php
/**
 * V9VmOpenApiAddressLocation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * The version of the OpenAPI document: v11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * V9VmOpenApiAddressLocation Class Doc Comment
 *
 * @category Class
 * @description OPEN API V9 - View Model of address
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V9VmOpenApiAddressLocation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V9VmOpenApiAddressLocation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'postOfficeBoxAddress' => '\Tampere\PtvV11\PtvModel\VmOpenApiAddressPostOfficeBox',
        'streetAddress' => '\Tampere\PtvV11\PtvModel\VmOpenApiAddressStreetWithCoordinates',
        'country' => 'string',
        'type' => 'string',
        'subType' => 'string',
        'otherAddress' => '\Tampere\PtvV11\PtvModel\VmOpenApiAddressOther',
        'locationAbroad' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
        'entrances' => '\Tampere\PtvV11\PtvModel\V9VmOpenApiEntrance[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'postOfficeBoxAddress' => null,
        'streetAddress' => null,
        'country' => null,
        'type' => null,
        'subType' => null,
        'otherAddress' => null,
        'locationAbroad' => null,
        'entrances' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'postOfficeBoxAddress' => false,
		'streetAddress' => false,
		'country' => true,
		'type' => true,
		'subType' => true,
		'otherAddress' => false,
		'locationAbroad' => true,
		'entrances' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'postOfficeBoxAddress' => 'postOfficeBoxAddress',
        'streetAddress' => 'streetAddress',
        'country' => 'country',
        'type' => 'type',
        'subType' => 'subType',
        'otherAddress' => 'otherAddress',
        'locationAbroad' => 'locationAbroad',
        'entrances' => 'entrances'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'postOfficeBoxAddress' => 'setPostOfficeBoxAddress',
        'streetAddress' => 'setStreetAddress',
        'country' => 'setCountry',
        'type' => 'setType',
        'subType' => 'setSubType',
        'otherAddress' => 'setOtherAddress',
        'locationAbroad' => 'setLocationAbroad',
        'entrances' => 'setEntrances'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'postOfficeBoxAddress' => 'getPostOfficeBoxAddress',
        'streetAddress' => 'getStreetAddress',
        'country' => 'getCountry',
        'type' => 'getType',
        'subType' => 'getSubType',
        'otherAddress' => 'getOtherAddress',
        'locationAbroad' => 'getLocationAbroad',
        'entrances' => 'getEntrances'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('postOfficeBoxAddress', $data ?? [], null);
        $this->setIfExists('streetAddress', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('subType', $data ?? [], null);
        $this->setIfExists('otherAddress', $data ?? [], null);
        $this->setIfExists('locationAbroad', $data ?? [], null);
        $this->setIfExists('entrances', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Gets or sets the identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets postOfficeBoxAddress
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiAddressPostOfficeBox|null
     */
    public function getPostOfficeBoxAddress()
    {
        return $this->container['postOfficeBoxAddress'];
    }

    /**
     * Sets postOfficeBoxAddress
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiAddressPostOfficeBox|null $postOfficeBoxAddress postOfficeBoxAddress
     *
     * @return self
     */
    public function setPostOfficeBoxAddress($postOfficeBoxAddress)
    {
        if (is_null($postOfficeBoxAddress)) {
            throw new \InvalidArgumentException('non-nullable postOfficeBoxAddress cannot be null');
        }
        $this->container['postOfficeBoxAddress'] = $postOfficeBoxAddress;

        return $this;
    }

    /**
     * Gets streetAddress
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiAddressStreetWithCoordinates|null
     */
    public function getStreetAddress()
    {
        return $this->container['streetAddress'];
    }

    /**
     * Sets streetAddress
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiAddressStreetWithCoordinates|null $streetAddress streetAddress
     *
     * @return self
     */
    public function setStreetAddress($streetAddress)
    {
        if (is_null($streetAddress)) {
            throw new \InvalidArgumentException('non-nullable streetAddress cannot be null');
        }
        $this->container['streetAddress'] = $streetAddress;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country code (ISO 3166-1 alpha-2), for example FI.
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Address type, Location or Postal.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets subType
     *
     * @return string|null
     */
    public function getSubType()
    {
        return $this->container['subType'];
    }

    /**
     * Sets subType
     *
     * @param string|null $subType Address sub type, Single, Street, PostOfficeBox, Abroad or Other.
     *
     * @return self
     */
    public function setSubType($subType)
    {
        if (is_null($subType)) {
            array_push($this->openAPINullablesSetToNull, 'subType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subType'] = $subType;

        return $this;
    }

    /**
     * Gets otherAddress
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiAddressOther|null
     */
    public function getOtherAddress()
    {
        return $this->container['otherAddress'];
    }

    /**
     * Sets otherAddress
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiAddressOther|null $otherAddress otherAddress
     *
     * @return self
     */
    public function setOtherAddress($otherAddress)
    {
        if (is_null($otherAddress)) {
            throw new \InvalidArgumentException('non-nullable otherAddress cannot be null');
        }
        $this->container['otherAddress'] = $otherAddress;

        return $this;
    }

    /**
     * Gets locationAbroad
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null
     */
    public function getLocationAbroad()
    {
        return $this->container['locationAbroad'];
    }

    /**
     * Sets locationAbroad
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null $locationAbroad Localized list of foreign address information.
     *
     * @return self
     */
    public function setLocationAbroad($locationAbroad)
    {
        if (is_null($locationAbroad)) {
            array_push($this->openAPINullablesSetToNull, 'locationAbroad');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locationAbroad', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['locationAbroad'] = $locationAbroad;

        return $this;
    }

    /**
     * Gets entrances
     *
     * @return \Tampere\PtvV11\PtvModel\V9VmOpenApiEntrance[]|null
     */
    public function getEntrances()
    {
        return $this->container['entrances'];
    }

    /**
     * Sets entrances
     *
     * @param \Tampere\PtvV11\PtvModel\V9VmOpenApiEntrance[]|null $entrances Entrances for an address. Includes accessibility sentences.
     *
     * @return self
     */
    public function setEntrances($entrances)
    {
        if (is_null($entrances)) {
            array_push($this->openAPINullablesSetToNull, 'entrances');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('entrances', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['entrances'] = $entrances;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


