<?php
/**
 * V9VmOpenApiEntrance
 *
 * PHP version 5
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * OpenAPI spec version: v11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * V9VmOpenApiEntrance Class Doc Comment
 *
 * @category Class
 * @description OPEN API - View Model of entrance for address
 * @package  Tampere\PtvV11
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V9VmOpenApiEntrance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'V9VmOpenApiEntrance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
'isMainEntrance' => 'bool',
'coordinates' => '\Tampere\PtvV11\PtvModel\VmOpenApiCoordinates',
'accessibilitySentences' => '\Tampere\PtvV11\PtvModel\VmOpenApiAccessibilitySentence[]',
'contactInfo' => '\Tampere\PtvV11\PtvModel\VmOpenApiAccessibilityContactInfo'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'isMainEntrance' => null,
'coordinates' => null,
'accessibilitySentences' => null,
'contactInfo' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'isMainEntrance' => 'isMainEntrance',
'coordinates' => 'coordinates',
'accessibilitySentences' => 'accessibilitySentences',
'contactInfo' => 'contactInfo'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'isMainEntrance' => 'setIsMainEntrance',
'coordinates' => 'setCoordinates',
'accessibilitySentences' => 'setAccessibilitySentences',
'contactInfo' => 'setContactInfo'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'isMainEntrance' => 'getIsMainEntrance',
'coordinates' => 'getCoordinates',
'accessibilitySentences' => 'getAccessibilitySentences',
'contactInfo' => 'getContactInfo'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['isMainEntrance'] = isset($data['isMainEntrance']) ? $data['isMainEntrance'] : null;
        $this->container['coordinates'] = isset($data['coordinates']) ? $data['coordinates'] : null;
        $this->container['accessibilitySentences'] = isset($data['accessibilitySentences']) ? $data['accessibilitySentences'] : null;
        $this->container['contactInfo'] = isset($data['contactInfo']) ? $data['contactInfo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[] $name List of localized service names.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets isMainEntrance
     *
     * @return bool
     */
    public function getIsMainEntrance()
    {
        return $this->container['isMainEntrance'];
    }

    /**
     * Sets isMainEntrance
     *
     * @param bool $isMainEntrance Indicates if entrance is main entrance.
     *
     * @return $this
     */
    public function setIsMainEntrance($isMainEntrance)
    {
        $this->container['isMainEntrance'] = $isMainEntrance;

        return $this;
    }

    /**
     * Gets coordinates
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiCoordinates
     */
    public function getCoordinates()
    {
        return $this->container['coordinates'];
    }

    /**
     * Sets coordinates
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiCoordinates $coordinates coordinates
     *
     * @return $this
     */
    public function setCoordinates($coordinates)
    {
        $this->container['coordinates'] = $coordinates;

        return $this;
    }

    /**
     * Gets accessibilitySentences
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiAccessibilitySentence[]
     */
    public function getAccessibilitySentences()
    {
        return $this->container['accessibilitySentences'];
    }

    /**
     * Sets accessibilitySentences
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiAccessibilitySentence[] $accessibilitySentences List of accessibility sentences.
     *
     * @return $this
     */
    public function setAccessibilitySentences($accessibilitySentences)
    {
        $this->container['accessibilitySentences'] = $accessibilitySentences;

        return $this;
    }

    /**
     * Gets contactInfo
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiAccessibilityContactInfo
     */
    public function getContactInfo()
    {
        return $this->container['contactInfo'];
    }

    /**
     * Sets contactInfo
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiAccessibilityContactInfo $contactInfo contactInfo
     *
     * @return $this
     */
    public function setContactInfo($contactInfo)
    {
        $this->container['contactInfo'] = $contactInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
