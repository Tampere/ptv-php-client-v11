<?php
/**
 * V11VmOpenApiServiceChannelService
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * The version of the OpenAPI document: v11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * V11VmOpenApiServiceChannelService Class Doc Comment
 *
 * @category Class
 * @description OPEN API - View Model of Service channel service V10
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V11VmOpenApiServiceChannelService implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V11VmOpenApiServiceChannelService';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'serviceChargeType' => 'string',
        'description' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
        'serviceHours' => '\Tampere\PtvV11\PtvModel\V11VmOpenApiServiceHour[]',
        'isASTIConnection' => 'bool',
        'ownerReferenceId' => 'string',
        'service' => '\Tampere\PtvV11\PtvModel\VmOpenApiItem',
        'extraTypes' => '\Tampere\PtvV11\PtvModel\V9VmOpenApiExtraType[]',
        'contactDetails' => '\Tampere\PtvV11\PtvModel\V9VmOpenApiContactDetails',
        'digitalAuthorizations' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]',
        'modified' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'serviceChargeType' => null,
        'description' => null,
        'serviceHours' => null,
        'isASTIConnection' => null,
        'ownerReferenceId' => 'uuid',
        'service' => null,
        'extraTypes' => null,
        'contactDetails' => null,
        'digitalAuthorizations' => null,
        'modified' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'serviceChargeType' => true,
		'description' => true,
		'serviceHours' => true,
		'isASTIConnection' => false,
		'ownerReferenceId' => true,
		'service' => false,
		'extraTypes' => true,
		'contactDetails' => false,
		'digitalAuthorizations' => true,
		'modified' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'serviceChargeType' => 'serviceChargeType',
        'description' => 'description',
        'serviceHours' => 'serviceHours',
        'isASTIConnection' => 'isASTIConnection',
        'ownerReferenceId' => 'ownerReferenceId',
        'service' => 'service',
        'extraTypes' => 'extraTypes',
        'contactDetails' => 'contactDetails',
        'digitalAuthorizations' => 'digitalAuthorizations',
        'modified' => 'modified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'serviceChargeType' => 'setServiceChargeType',
        'description' => 'setDescription',
        'serviceHours' => 'setServiceHours',
        'isASTIConnection' => 'setIsASTIConnection',
        'ownerReferenceId' => 'setOwnerReferenceId',
        'service' => 'setService',
        'extraTypes' => 'setExtraTypes',
        'contactDetails' => 'setContactDetails',
        'digitalAuthorizations' => 'setDigitalAuthorizations',
        'modified' => 'setModified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'serviceChargeType' => 'getServiceChargeType',
        'description' => 'getDescription',
        'serviceHours' => 'getServiceHours',
        'isASTIConnection' => 'getIsASTIConnection',
        'ownerReferenceId' => 'getOwnerReferenceId',
        'service' => 'getService',
        'extraTypes' => 'getExtraTypes',
        'contactDetails' => 'getContactDetails',
        'digitalAuthorizations' => 'getDigitalAuthorizations',
        'modified' => 'getModified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('serviceChargeType', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('serviceHours', $data ?? [], null);
        $this->setIfExists('isASTIConnection', $data ?? [], null);
        $this->setIfExists('ownerReferenceId', $data ?? [], null);
        $this->setIfExists('service', $data ?? [], null);
        $this->setIfExists('extraTypes', $data ?? [], null);
        $this->setIfExists('contactDetails', $data ?? [], null);
        $this->setIfExists('digitalAuthorizations', $data ?? [], null);
        $this->setIfExists('modified', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets serviceChargeType
     *
     * @return string|null
     */
    public function getServiceChargeType()
    {
        return $this->container['serviceChargeType'];
    }

    /**
     * Sets serviceChargeType
     *
     * @param string|null $serviceChargeType Service charge type. Possible values are: Chargeable, FreeOfCharge or Other.
     *
     * @return self
     */
    public function setServiceChargeType($serviceChargeType)
    {
        if (is_null($serviceChargeType)) {
            array_push($this->openAPINullablesSetToNull, 'serviceChargeType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceChargeType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceChargeType'] = $serviceChargeType;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null $description List of localized service channel relationship descriptions. (Max.Length: 500 Description). (Max.Length: 500 ChargeTypeAdditionalInfo).
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets serviceHours
     *
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceHour[]|null
     */
    public function getServiceHours()
    {
        return $this->container['serviceHours'];
    }

    /**
     * Sets serviceHours
     *
     * @param \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceHour[]|null $serviceHours List of connection related service hours.
     *
     * @return self
     */
    public function setServiceHours($serviceHours)
    {
        if (is_null($serviceHours)) {
            array_push($this->openAPINullablesSetToNull, 'serviceHours');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceHours', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceHours'] = $serviceHours;

        return $this;
    }

    /**
     * Gets isASTIConnection
     *
     * @return bool|null
     */
    public function getIsASTIConnection()
    {
        return $this->container['isASTIConnection'];
    }

    /**
     * Sets isASTIConnection
     *
     * @param bool|null $isASTIConnection Indicates if connection between service and service channel is ASTI related.
     *
     * @return self
     */
    public function setIsASTIConnection($isASTIConnection)
    {
        if (is_null($isASTIConnection)) {
            throw new \InvalidArgumentException('non-nullable isASTIConnection cannot be null');
        }
        $this->container['isASTIConnection'] = $isASTIConnection;

        return $this;
    }

    /**
     * Gets ownerReferenceId
     *
     * @return string|null
     */
    public function getOwnerReferenceId()
    {
        return $this->container['ownerReferenceId'];
    }

    /**
     * Sets ownerReferenceId
     *
     * @param string|null $ownerReferenceId Contact details for connection.
     *
     * @return self
     */
    public function setOwnerReferenceId($ownerReferenceId)
    {
        if (is_null($ownerReferenceId)) {
            array_push($this->openAPINullablesSetToNull, 'ownerReferenceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ownerReferenceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ownerReferenceId'] = $ownerReferenceId;

        return $this;
    }

    /**
     * Gets service
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiItem|null
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiItem|null $service service
     *
     * @return self
     */
    public function setService($service)
    {
        if (is_null($service)) {
            throw new \InvalidArgumentException('non-nullable service cannot be null');
        }
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets extraTypes
     *
     * @return \Tampere\PtvV11\PtvModel\V9VmOpenApiExtraType[]|null
     */
    public function getExtraTypes()
    {
        return $this->container['extraTypes'];
    }

    /**
     * Sets extraTypes
     *
     * @param \Tampere\PtvV11\PtvModel\V9VmOpenApiExtraType[]|null $extraTypes The extra types related to service and service channel connection.
     *
     * @return self
     */
    public function setExtraTypes($extraTypes)
    {
        if (is_null($extraTypes)) {
            array_push($this->openAPINullablesSetToNull, 'extraTypes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('extraTypes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['extraTypes'] = $extraTypes;

        return $this;
    }

    /**
     * Gets contactDetails
     *
     * @return \Tampere\PtvV11\PtvModel\V9VmOpenApiContactDetails|null
     */
    public function getContactDetails()
    {
        return $this->container['contactDetails'];
    }

    /**
     * Sets contactDetails
     *
     * @param \Tampere\PtvV11\PtvModel\V9VmOpenApiContactDetails|null $contactDetails contactDetails
     *
     * @return self
     */
    public function setContactDetails($contactDetails)
    {
        if (is_null($contactDetails)) {
            throw new \InvalidArgumentException('non-nullable contactDetails cannot be null');
        }
        $this->container['contactDetails'] = $contactDetails;

        return $this;
    }

    /**
     * Gets digitalAuthorizations
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]|null
     */
    public function getDigitalAuthorizations()
    {
        return $this->container['digitalAuthorizations'];
    }

    /**
     * Sets digitalAuthorizations
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiFintoItem[]|null $digitalAuthorizations List of digital authorizations related to the service.
     *
     * @return self
     */
    public function setDigitalAuthorizations($digitalAuthorizations)
    {
        if (is_null($digitalAuthorizations)) {
            array_push($this->openAPINullablesSetToNull, 'digitalAuthorizations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('digitalAuthorizations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['digitalAuthorizations'] = $digitalAuthorizations;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime|null
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime|null $modified Date when connection was modified/created (UTC).
     *
     * @return self
     */
    public function setModified($modified)
    {
        if (is_null($modified)) {
            throw new \InvalidArgumentException('non-nullable modified cannot be null');
        }
        $this->container['modified'] = $modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


