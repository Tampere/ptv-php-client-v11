<?php
/**
 * V9VmOpenApiContactDetailsInBase
 *
 * PHP version 5
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * OpenAPI spec version: v11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * V9VmOpenApiContactDetailsInBase Class Doc Comment
 *
 * @category Class
 * @description OPEN API - View Model of contact details (PUT) - base version
 * @package  Tampere\PtvV11
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V9VmOpenApiContactDetailsInBase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'V9VmOpenApiContactDetailsInBase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'emails' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
'faxNumbers' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiPhoneSimple[]',
'webPages' => '\Tampere\PtvV11\PtvModel\V9VmOpenApiWebPage[]',
'addresses' => '\Tampere\PtvV11\PtvModel\V7VmOpenApiAddressContactIn[]',
'phoneNumbers' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiPhone[]',
'deleteAllEmails' => 'bool',
'deleteAllPhones' => 'bool',
'deleteAllFaxNumbers' => 'bool',
'deleteAllWebPages' => 'bool',
'deleteAllAddresses' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'emails' => null,
'faxNumbers' => null,
'webPages' => null,
'addresses' => null,
'phoneNumbers' => null,
'deleteAllEmails' => null,
'deleteAllPhones' => null,
'deleteAllFaxNumbers' => null,
'deleteAllWebPages' => null,
'deleteAllAddresses' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'emails' => 'emails',
'faxNumbers' => 'faxNumbers',
'webPages' => 'webPages',
'addresses' => 'addresses',
'phoneNumbers' => 'phoneNumbers',
'deleteAllEmails' => 'deleteAllEmails',
'deleteAllPhones' => 'deleteAllPhones',
'deleteAllFaxNumbers' => 'deleteAllFaxNumbers',
'deleteAllWebPages' => 'deleteAllWebPages',
'deleteAllAddresses' => 'deleteAllAddresses'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'emails' => 'setEmails',
'faxNumbers' => 'setFaxNumbers',
'webPages' => 'setWebPages',
'addresses' => 'setAddresses',
'phoneNumbers' => 'setPhoneNumbers',
'deleteAllEmails' => 'setDeleteAllEmails',
'deleteAllPhones' => 'setDeleteAllPhones',
'deleteAllFaxNumbers' => 'setDeleteAllFaxNumbers',
'deleteAllWebPages' => 'setDeleteAllWebPages',
'deleteAllAddresses' => 'setDeleteAllAddresses'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'emails' => 'getEmails',
'faxNumbers' => 'getFaxNumbers',
'webPages' => 'getWebPages',
'addresses' => 'getAddresses',
'phoneNumbers' => 'getPhoneNumbers',
'deleteAllEmails' => 'getDeleteAllEmails',
'deleteAllPhones' => 'getDeleteAllPhones',
'deleteAllFaxNumbers' => 'getDeleteAllFaxNumbers',
'deleteAllWebPages' => 'getDeleteAllWebPages',
'deleteAllAddresses' => 'getDeleteAllAddresses'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
        $this->container['faxNumbers'] = isset($data['faxNumbers']) ? $data['faxNumbers'] : null;
        $this->container['webPages'] = isset($data['webPages']) ? $data['webPages'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['phoneNumbers'] = isset($data['phoneNumbers']) ? $data['phoneNumbers'] : null;
        $this->container['deleteAllEmails'] = isset($data['deleteAllEmails']) ? $data['deleteAllEmails'] : null;
        $this->container['deleteAllPhones'] = isset($data['deleteAllPhones']) ? $data['deleteAllPhones'] : null;
        $this->container['deleteAllFaxNumbers'] = isset($data['deleteAllFaxNumbers']) ? $data['deleteAllFaxNumbers'] : null;
        $this->container['deleteAllWebPages'] = isset($data['deleteAllWebPages']) ? $data['deleteAllWebPages'] : null;
        $this->container['deleteAllAddresses'] = isset($data['deleteAllAddresses']) ? $data['deleteAllAddresses'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets emails
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]
     */
    public function getEmails()
    {
        return isset($this->container['emails']) ? $this->container['emails'] : null;
    }

    /**
     * Sets emails
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[] $emails List of connection related email addresses.
     *
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets faxNumbers
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiPhoneSimple[]
     */
    public function getFaxNumbers()
    {
        return isset($this->container['faxNumbers']) ? $this->container['faxNumbers'] : null;
    }

    /**
     * Sets faxNumbers
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiPhoneSimple[] $faxNumbers List of connection related fax numbers numbers.
     *
     * @return $this
     */
    public function setFaxNumbers($faxNumbers)
    {
        $this->container['faxNumbers'] = $faxNumbers;

        return $this;
    }

    /**
     * Gets webPages
     *
     * @return \Tampere\PtvV11\PtvModel\V9VmOpenApiWebPage[]
     */
    public function getWebPages()
    {
        return isset($this->container['webPages']) ? $this->container['webPages'] : null;
    }

    /**
     * Sets webPages
     *
     * @param \Tampere\PtvV11\PtvModel\V9VmOpenApiWebPage[] $webPages List of connection related web pages.
     *
     * @return $this
     */
    public function setWebPages($webPages)
    {
        $this->container['webPages'] = $webPages;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Tampere\PtvV11\PtvModel\V7VmOpenApiAddressContactIn[]
     */
    public function getAddresses()
    {
        return isset($this->container['addresses']) ? $this->container['addresses'] : null;
    }

    /**
     * Sets addresses
     *
     * @param \Tampere\PtvV11\PtvModel\V7VmOpenApiAddressContactIn[] $addresses List of service location addresses.
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets phoneNumbers
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiPhone[]
     */
    public function getPhoneNumbers()
    {
        return isset($this->container['phoneNumbers']) ? $this->container['phoneNumbers'] : null;
    }

    /**
     * Sets phoneNumbers
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiPhone[] $phoneNumbers List of connection related phone numbers.
     *
     * @return $this
     */
    public function setPhoneNumbers($phoneNumbers)
    {
        $this->container['phoneNumbers'] = $phoneNumbers;

        return $this;
    }

    /**
     * Gets deleteAllEmails
     *
     * @return bool
     */
    public function getDeleteAllEmails()
    {
        return isset($this->container['deleteAllEmails']) ? $this->container['deleteAllEmails'] : null;
    }

    /**
     * Sets deleteAllEmails
     *
     * @param bool $deleteAllEmails Gets or sets a value indicating whether all emails should be delted.
     *
     * @return $this
     */
    public function setDeleteAllEmails($deleteAllEmails)
    {
        $this->container['deleteAllEmails'] = $deleteAllEmails;

        return $this;
    }

    /**
     * Gets deleteAllPhones
     *
     * @return bool
     */
    public function getDeleteAllPhones()
    {
        return isset($this->container['deleteAllPhones']) ? $this->container['deleteAllPhones'] : null;
    }

    /**
     * Sets deleteAllPhones
     *
     * @param bool $deleteAllPhones Gets or sets a value indicating whether all phones should be delted.
     *
     * @return $this
     */
    public function setDeleteAllPhones($deleteAllPhones)
    {
        $this->container['deleteAllPhones'] = $deleteAllPhones;

        return $this;
    }

    /**
     * Gets deleteAllFaxNumbers
     *
     * @return bool
     */
    public function getDeleteAllFaxNumbers()
    {
        return isset($this->container['deleteAllFaxNumbers']) ? $this->container['deleteAllFaxNumbers'] : null;
    }

    /**
     * Sets deleteAllFaxNumbers
     *
     * @param bool $deleteAllFaxNumbers Gets or sets a value indicating whether all fax numbers should be delted.
     *
     * @return $this
     */
    public function setDeleteAllFaxNumbers($deleteAllFaxNumbers)
    {
        $this->container['deleteAllFaxNumbers'] = $deleteAllFaxNumbers;

        return $this;
    }

    /**
     * Gets deleteAllWebPages
     *
     * @return bool
     */
    public function getDeleteAllWebPages()
    {
        return isset($this->container['deleteAllWebPages']) ? $this->container['deleteAllWebPages'] : null;
    }

    /**
     * Sets deleteAllWebPages
     *
     * @param bool $deleteAllWebPages Gets or sets a value indicating whether all web pages should be delted.
     *
     * @return $this
     */
    public function setDeleteAllWebPages($deleteAllWebPages)
    {
        $this->container['deleteAllWebPages'] = $deleteAllWebPages;

        return $this;
    }

    /**
     * Gets deleteAllAddresses
     *
     * @return bool
     */
    public function getDeleteAllAddresses()
    {
        return isset($this->container['deleteAllAddresses']) ? $this->container['deleteAllAddresses'] : null;
    }

    /**
     * Sets deleteAllAddresses
     *
     * @param bool $deleteAllAddresses Gets or sets a value indicating whether all addresses should be delted.
     *
     * @return $this
     */
    public function setDeleteAllAddresses($deleteAllAddresses)
    {
        $this->container['deleteAllAddresses'] = $deleteAllAddresses;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
