<?php
/**
 * V9VmOpenApiServiceIn
 *
 * PHP version 5
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * OpenAPI spec version: v11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * V9VmOpenApiServiceIn Class Doc Comment
 *
 * @category Class
 * @description OPEN API V9 - View Model of service for IN api
 * @package  Tampere\PtvV11
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V9VmOpenApiServiceIn implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'V9VmOpenApiServiceIn';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sourceId' => 'string',
'legislation' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiLaw[]',
'keywords' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
'requirements' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
'serviceVouchersInUse' => 'bool',
'serviceVouchers' => '\Tampere\PtvV11\PtvModel\V9VmOpenApiServiceVoucher[]',
'versionId' => 'string',
'id' => 'string',
'generalDescriptionId' => 'string',
'lifeEvents' => 'string[]',
'industrialClasses' => 'string[]',
'otherResponsibleOrganizations' => 'string[]',
'validFrom' => '\DateTime',
'validTo' => '\DateTime',
'currentPublishingStatus' => 'string',
'serviceServiceChannels' => '\Tampere\PtvV11\PtvModel\V11VmOpenApiServiceServiceChannelAstiInBase[]',
'userName' => 'string',
'availableLanguages' => 'string[]',
'requiredPropertiesAvailableLanguages' => 'string[]',
'serviceChargeType' => 'string',
'areas' => '\Tampere\PtvV11\PtvModel\VmOpenApiAreaIn[]',
'serviceClasses' => 'string[]',
'ontologyTerms' => 'string[]',
'targetGroups' => 'string[]',
'deleteAllServiceVouchers' => 'bool',
'type' => 'string',
'fundingType' => 'string',
'serviceNames' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
'areaType' => 'string',
'serviceDescriptions' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
'languages' => 'string[]',
'serviceProducers' => '\Tampere\PtvV11\PtvModel\V9VmOpenApiServiceProducerIn[]',
'publishingStatus' => 'string',
'serviceChannels' => 'string[]',
'mainResponsibleOrganization' => 'string',
'deleteAllLifeEvents' => 'bool',
'deleteAllIndustrialClasses' => 'bool',
'deleteAllKeywords' => 'bool',
'deleteAllMunicipalities' => 'bool',
'deleteAllLaws' => 'bool',
'deleteServiceChargeType' => 'bool',
'deleteGeneralDescriptionId' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sourceId' => null,
'legislation' => null,
'keywords' => null,
'requirements' => null,
'serviceVouchersInUse' => null,
'serviceVouchers' => null,
'versionId' => 'uuid',
'id' => 'uuid',
'generalDescriptionId' => null,
'lifeEvents' => null,
'industrialClasses' => null,
'otherResponsibleOrganizations' => 'uuid',
'validFrom' => 'date-time',
'validTo' => 'date-time',
'currentPublishingStatus' => null,
'serviceServiceChannels' => null,
'userName' => null,
'availableLanguages' => null,
'requiredPropertiesAvailableLanguages' => null,
'serviceChargeType' => null,
'areas' => null,
'serviceClasses' => null,
'ontologyTerms' => null,
'targetGroups' => null,
'deleteAllServiceVouchers' => null,
'type' => null,
'fundingType' => null,
'serviceNames' => null,
'areaType' => null,
'serviceDescriptions' => null,
'languages' => null,
'serviceProducers' => null,
'publishingStatus' => null,
'serviceChannels' => null,
'mainResponsibleOrganization' => null,
'deleteAllLifeEvents' => null,
'deleteAllIndustrialClasses' => null,
'deleteAllKeywords' => null,
'deleteAllMunicipalities' => null,
'deleteAllLaws' => null,
'deleteServiceChargeType' => null,
'deleteGeneralDescriptionId' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sourceId' => 'sourceId',
'legislation' => 'legislation',
'keywords' => 'keywords',
'requirements' => 'requirements',
'serviceVouchersInUse' => 'serviceVouchersInUse',
'serviceVouchers' => 'serviceVouchers',
'versionId' => 'versionId',
'id' => 'id',
'generalDescriptionId' => 'generalDescriptionId',
'lifeEvents' => 'lifeEvents',
'industrialClasses' => 'industrialClasses',
'otherResponsibleOrganizations' => 'otherResponsibleOrganizations',
'validFrom' => 'validFrom',
'validTo' => 'validTo',
'currentPublishingStatus' => 'currentPublishingStatus',
'serviceServiceChannels' => 'serviceServiceChannels',
'userName' => 'userName',
'availableLanguages' => 'availableLanguages',
'requiredPropertiesAvailableLanguages' => 'requiredPropertiesAvailableLanguages',
'serviceChargeType' => 'serviceChargeType',
'areas' => 'areas',
'serviceClasses' => 'serviceClasses',
'ontologyTerms' => 'ontologyTerms',
'targetGroups' => 'targetGroups',
'deleteAllServiceVouchers' => 'deleteAllServiceVouchers',
'type' => 'type',
'fundingType' => 'fundingType',
'serviceNames' => 'serviceNames',
'areaType' => 'areaType',
'serviceDescriptions' => 'serviceDescriptions',
'languages' => 'languages',
'serviceProducers' => 'serviceProducers',
'publishingStatus' => 'publishingStatus',
'serviceChannels' => 'serviceChannels',
'mainResponsibleOrganization' => 'mainResponsibleOrganization',
'deleteAllLifeEvents' => 'deleteAllLifeEvents',
'deleteAllIndustrialClasses' => 'deleteAllIndustrialClasses',
'deleteAllKeywords' => 'deleteAllKeywords',
'deleteAllMunicipalities' => 'deleteAllMunicipalities',
'deleteAllLaws' => 'deleteAllLaws',
'deleteServiceChargeType' => 'deleteServiceChargeType',
'deleteGeneralDescriptionId' => 'deleteGeneralDescriptionId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sourceId' => 'setSourceId',
'legislation' => 'setLegislation',
'keywords' => 'setKeywords',
'requirements' => 'setRequirements',
'serviceVouchersInUse' => 'setServiceVouchersInUse',
'serviceVouchers' => 'setServiceVouchers',
'versionId' => 'setVersionId',
'id' => 'setId',
'generalDescriptionId' => 'setGeneralDescriptionId',
'lifeEvents' => 'setLifeEvents',
'industrialClasses' => 'setIndustrialClasses',
'otherResponsibleOrganizations' => 'setOtherResponsibleOrganizations',
'validFrom' => 'setValidFrom',
'validTo' => 'setValidTo',
'currentPublishingStatus' => 'setCurrentPublishingStatus',
'serviceServiceChannels' => 'setServiceServiceChannels',
'userName' => 'setUserName',
'availableLanguages' => 'setAvailableLanguages',
'requiredPropertiesAvailableLanguages' => 'setRequiredPropertiesAvailableLanguages',
'serviceChargeType' => 'setServiceChargeType',
'areas' => 'setAreas',
'serviceClasses' => 'setServiceClasses',
'ontologyTerms' => 'setOntologyTerms',
'targetGroups' => 'setTargetGroups',
'deleteAllServiceVouchers' => 'setDeleteAllServiceVouchers',
'type' => 'setType',
'fundingType' => 'setFundingType',
'serviceNames' => 'setServiceNames',
'areaType' => 'setAreaType',
'serviceDescriptions' => 'setServiceDescriptions',
'languages' => 'setLanguages',
'serviceProducers' => 'setServiceProducers',
'publishingStatus' => 'setPublishingStatus',
'serviceChannels' => 'setServiceChannels',
'mainResponsibleOrganization' => 'setMainResponsibleOrganization',
'deleteAllLifeEvents' => 'setDeleteAllLifeEvents',
'deleteAllIndustrialClasses' => 'setDeleteAllIndustrialClasses',
'deleteAllKeywords' => 'setDeleteAllKeywords',
'deleteAllMunicipalities' => 'setDeleteAllMunicipalities',
'deleteAllLaws' => 'setDeleteAllLaws',
'deleteServiceChargeType' => 'setDeleteServiceChargeType',
'deleteGeneralDescriptionId' => 'setDeleteGeneralDescriptionId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sourceId' => 'getSourceId',
'legislation' => 'getLegislation',
'keywords' => 'getKeywords',
'requirements' => 'getRequirements',
'serviceVouchersInUse' => 'getServiceVouchersInUse',
'serviceVouchers' => 'getServiceVouchers',
'versionId' => 'getVersionId',
'id' => 'getId',
'generalDescriptionId' => 'getGeneralDescriptionId',
'lifeEvents' => 'getLifeEvents',
'industrialClasses' => 'getIndustrialClasses',
'otherResponsibleOrganizations' => 'getOtherResponsibleOrganizations',
'validFrom' => 'getValidFrom',
'validTo' => 'getValidTo',
'currentPublishingStatus' => 'getCurrentPublishingStatus',
'serviceServiceChannels' => 'getServiceServiceChannels',
'userName' => 'getUserName',
'availableLanguages' => 'getAvailableLanguages',
'requiredPropertiesAvailableLanguages' => 'getRequiredPropertiesAvailableLanguages',
'serviceChargeType' => 'getServiceChargeType',
'areas' => 'getAreas',
'serviceClasses' => 'getServiceClasses',
'ontologyTerms' => 'getOntologyTerms',
'targetGroups' => 'getTargetGroups',
'deleteAllServiceVouchers' => 'getDeleteAllServiceVouchers',
'type' => 'getType',
'fundingType' => 'getFundingType',
'serviceNames' => 'getServiceNames',
'areaType' => 'getAreaType',
'serviceDescriptions' => 'getServiceDescriptions',
'languages' => 'getLanguages',
'serviceProducers' => 'getServiceProducers',
'publishingStatus' => 'getPublishingStatus',
'serviceChannels' => 'getServiceChannels',
'mainResponsibleOrganization' => 'getMainResponsibleOrganization',
'deleteAllLifeEvents' => 'getDeleteAllLifeEvents',
'deleteAllIndustrialClasses' => 'getDeleteAllIndustrialClasses',
'deleteAllKeywords' => 'getDeleteAllKeywords',
'deleteAllMunicipalities' => 'getDeleteAllMunicipalities',
'deleteAllLaws' => 'getDeleteAllLaws',
'deleteServiceChargeType' => 'getDeleteServiceChargeType',
'deleteGeneralDescriptionId' => 'getDeleteGeneralDescriptionId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sourceId'] = isset($data['sourceId']) ? $data['sourceId'] : null;
        $this->container['legislation'] = isset($data['legislation']) ? $data['legislation'] : null;
        $this->container['keywords'] = isset($data['keywords']) ? $data['keywords'] : null;
        $this->container['requirements'] = isset($data['requirements']) ? $data['requirements'] : null;
        $this->container['serviceVouchersInUse'] = isset($data['serviceVouchersInUse']) ? $data['serviceVouchersInUse'] : null;
        $this->container['serviceVouchers'] = isset($data['serviceVouchers']) ? $data['serviceVouchers'] : null;
        $this->container['versionId'] = isset($data['versionId']) ? $data['versionId'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['generalDescriptionId'] = isset($data['generalDescriptionId']) ? $data['generalDescriptionId'] : null;
        $this->container['lifeEvents'] = isset($data['lifeEvents']) ? $data['lifeEvents'] : null;
        $this->container['industrialClasses'] = isset($data['industrialClasses']) ? $data['industrialClasses'] : null;
        $this->container['otherResponsibleOrganizations'] = isset($data['otherResponsibleOrganizations']) ? $data['otherResponsibleOrganizations'] : null;
        $this->container['validFrom'] = isset($data['validFrom']) ? $data['validFrom'] : null;
        $this->container['validTo'] = isset($data['validTo']) ? $data['validTo'] : null;
        $this->container['currentPublishingStatus'] = isset($data['currentPublishingStatus']) ? $data['currentPublishingStatus'] : null;
        $this->container['serviceServiceChannels'] = isset($data['serviceServiceChannels']) ? $data['serviceServiceChannels'] : null;
        $this->container['userName'] = isset($data['userName']) ? $data['userName'] : null;
        $this->container['availableLanguages'] = isset($data['availableLanguages']) ? $data['availableLanguages'] : null;
        $this->container['requiredPropertiesAvailableLanguages'] = isset($data['requiredPropertiesAvailableLanguages']) ? $data['requiredPropertiesAvailableLanguages'] : null;
        $this->container['serviceChargeType'] = isset($data['serviceChargeType']) ? $data['serviceChargeType'] : null;
        $this->container['areas'] = isset($data['areas']) ? $data['areas'] : null;
        $this->container['serviceClasses'] = isset($data['serviceClasses']) ? $data['serviceClasses'] : null;
        $this->container['ontologyTerms'] = isset($data['ontologyTerms']) ? $data['ontologyTerms'] : null;
        $this->container['targetGroups'] = isset($data['targetGroups']) ? $data['targetGroups'] : null;
        $this->container['deleteAllServiceVouchers'] = isset($data['deleteAllServiceVouchers']) ? $data['deleteAllServiceVouchers'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['fundingType'] = isset($data['fundingType']) ? $data['fundingType'] : null;
        $this->container['serviceNames'] = isset($data['serviceNames']) ? $data['serviceNames'] : null;
        $this->container['areaType'] = isset($data['areaType']) ? $data['areaType'] : null;
        $this->container['serviceDescriptions'] = isset($data['serviceDescriptions']) ? $data['serviceDescriptions'] : null;
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        $this->container['serviceProducers'] = isset($data['serviceProducers']) ? $data['serviceProducers'] : null;
        $this->container['publishingStatus'] = isset($data['publishingStatus']) ? $data['publishingStatus'] : null;
        $this->container['serviceChannels'] = isset($data['serviceChannels']) ? $data['serviceChannels'] : null;
        $this->container['mainResponsibleOrganization'] = isset($data['mainResponsibleOrganization']) ? $data['mainResponsibleOrganization'] : null;
        $this->container['deleteAllLifeEvents'] = isset($data['deleteAllLifeEvents']) ? $data['deleteAllLifeEvents'] : null;
        $this->container['deleteAllIndustrialClasses'] = isset($data['deleteAllIndustrialClasses']) ? $data['deleteAllIndustrialClasses'] : null;
        $this->container['deleteAllKeywords'] = isset($data['deleteAllKeywords']) ? $data['deleteAllKeywords'] : null;
        $this->container['deleteAllMunicipalities'] = isset($data['deleteAllMunicipalities']) ? $data['deleteAllMunicipalities'] : null;
        $this->container['deleteAllLaws'] = isset($data['deleteAllLaws']) ? $data['deleteAllLaws'] : null;
        $this->container['deleteServiceChargeType'] = isset($data['deleteServiceChargeType']) ? $data['deleteServiceChargeType'] : null;
        $this->container['deleteGeneralDescriptionId'] = isset($data['deleteGeneralDescriptionId']) ? $data['deleteGeneralDescriptionId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['fundingType'] === null) {
            $invalidProperties[] = "'fundingType' can't be null";
        }
        if ($this->container['areaType'] === null) {
            $invalidProperties[] = "'areaType' can't be null";
        }
        if ($this->container['serviceDescriptions'] === null) {
            $invalidProperties[] = "'serviceDescriptions' can't be null";
        }
        if ($this->container['languages'] === null) {
            $invalidProperties[] = "'languages' can't be null";
        }
        if ($this->container['serviceProducers'] === null) {
            $invalidProperties[] = "'serviceProducers' can't be null";
        }
        if ($this->container['publishingStatus'] === null) {
            $invalidProperties[] = "'publishingStatus' can't be null";
        }
        if ($this->container['mainResponsibleOrganization'] === null) {
            $invalidProperties[] = "'mainResponsibleOrganization' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sourceId
     *
     * @return string
     */
    public function getSourceId()
    {
        return $this->container['sourceId'];
    }

    /**
     * Sets sourceId
     *
     * @param string $sourceId External system identifier for the entity. User needs to be logged in to be able to get/set value.
     *
     * @return $this
     */
    public function setSourceId($sourceId)
    {
        $this->container['sourceId'] = $sourceId;

        return $this;
    }

    /**
     * Gets legislation
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiLaw[]
     */
    public function getLegislation()
    {
        return $this->container['legislation'];
    }

    /**
     * Sets legislation
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiLaw[] $legislation List of laws related to the service.
     *
     * @return $this
     */
    public function setLegislation($legislation)
    {
        $this->container['legislation'] = $legislation;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[] $keywords List of localized service keywords. (Max.Length: 150).
     *
     * @return $this
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets requirements
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]
     */
    public function getRequirements()
    {
        return $this->container['requirements'];
    }

    /**
     * Sets requirements
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[] $requirements Localized service usage requirements (description of requirement). (Max.Length: 2500).
     *
     * @return $this
     */
    public function setRequirements($requirements)
    {
        $this->container['requirements'] = $requirements;

        return $this;
    }

    /**
     * Gets serviceVouchersInUse
     *
     * @return bool
     */
    public function getServiceVouchersInUse()
    {
        return $this->container['serviceVouchersInUse'];
    }

    /**
     * Sets serviceVouchersInUse
     *
     * @param bool $serviceVouchersInUse Indicates if service vouchers are used in the service.
     *
     * @return $this
     */
    public function setServiceVouchersInUse($serviceVouchersInUse)
    {
        $this->container['serviceVouchersInUse'] = $serviceVouchersInUse;

        return $this;
    }

    /**
     * Gets serviceVouchers
     *
     * @return \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceVoucher[]
     */
    public function getServiceVouchers()
    {
        return $this->container['serviceVouchers'];
    }

    /**
     * Sets serviceVouchers
     *
     * @param \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceVoucher[] $serviceVouchers List of service vouchers.
     *
     * @return $this
     */
    public function setServiceVouchers($serviceVouchers)
    {
        $this->container['serviceVouchers'] = $serviceVouchers;

        return $this;
    }

    /**
     * Gets versionId
     *
     * @return string
     */
    public function getVersionId()
    {
        return $this->container['versionId'];
    }

    /**
     * Sets versionId
     *
     * @param string $versionId The identifier for current version.
     *
     * @return $this
     */
    public function setVersionId($versionId)
    {
        $this->container['versionId'] = $versionId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id PTV service identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets generalDescriptionId
     *
     * @return string
     */
    public function getGeneralDescriptionId()
    {
        return $this->container['generalDescriptionId'];
    }

    /**
     * Sets generalDescriptionId
     *
     * @param string $generalDescriptionId Valid PTV statutory service general description identifier that this service will be linked to. List of valid identifiers can be retrieved from the endpoint /api/GeneralDescription
     *
     * @return $this
     */
    public function setGeneralDescriptionId($generalDescriptionId)
    {
        $this->container['generalDescriptionId'] = $generalDescriptionId;

        return $this;
    }

    /**
     * Gets lifeEvents
     *
     * @return string[]
     */
    public function getLifeEvents()
    {
        return $this->container['lifeEvents'];
    }

    /**
     * Sets lifeEvents
     *
     * @param string[] $lifeEvents List of life event urls. Sample url: http://urn.fi/URN:NBN:fi:au:ptvl:v3017  NOTE! If life event has been defined within attached statutory service general description, the life event is not added for service.
     *
     * @return $this
     */
    public function setLifeEvents($lifeEvents)
    {
        $this->container['lifeEvents'] = $lifeEvents;

        return $this;
    }

    /**
     * Gets industrialClasses
     *
     * @return string[]
     */
    public function getIndustrialClasses()
    {
        return $this->container['industrialClasses'];
    }

    /**
     * Sets industrialClasses
     *
     * @param string[] $industrialClasses List of industrial class codes (see http://tilastokeskus.fi/meta/luokitukset/toimiala/001-2008/tekstitiedosto_en.txt).  NOTE! If industrial class has been defined within attached statutory service general description, the industrial class is not added for service.
     *
     * @return $this
     */
    public function setIndustrialClasses($industrialClasses)
    {
        $this->container['industrialClasses'] = $industrialClasses;

        return $this;
    }

    /**
     * Gets otherResponsibleOrganizations
     *
     * @return string[]
     */
    public function getOtherResponsibleOrganizations()
    {
        return $this->container['otherResponsibleOrganizations'];
    }

    /**
     * Sets otherResponsibleOrganizations
     *
     * @param string[] $otherResponsibleOrganizations List of other responsible organizations for the service.
     *
     * @return $this
     */
    public function setOtherResponsibleOrganizations($otherResponsibleOrganizations)
    {
        $this->container['otherResponsibleOrganizations'] = $otherResponsibleOrganizations;

        return $this;
    }

    /**
     * Gets validFrom
     *
     * @return \DateTime
     */
    public function getValidFrom()
    {
        return $this->container['validFrom'];
    }

    /**
     * Sets validFrom
     *
     * @param \DateTime $validFrom Date when item should be published.
     *
     * @return $this
     */
    public function setValidFrom($validFrom)
    {
        $this->container['validFrom'] = $validFrom;

        return $this;
    }

    /**
     * Gets validTo
     *
     * @return \DateTime
     */
    public function getValidTo()
    {
        return $this->container['validTo'];
    }

    /**
     * Sets validTo
     *
     * @param \DateTime $validTo Date when item should be archived.
     *
     * @return $this
     */
    public function setValidTo($validTo)
    {
        $this->container['validTo'] = $validTo;

        return $this;
    }

    /**
     * Gets currentPublishingStatus
     *
     * @return string
     */
    public function getCurrentPublishingStatus()
    {
        return $this->container['currentPublishingStatus'];
    }

    /**
     * Sets currentPublishingStatus
     *
     * @param string $currentPublishingStatus Current version publishing status.
     *
     * @return $this
     */
    public function setCurrentPublishingStatus($currentPublishingStatus)
    {
        $this->container['currentPublishingStatus'] = $currentPublishingStatus;

        return $this;
    }

    /**
     * Gets serviceServiceChannels
     *
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceServiceChannelAstiInBase[]
     */
    public function getServiceServiceChannels()
    {
        return $this->container['serviceServiceChannels'];
    }

    /**
     * Sets serviceServiceChannels
     *
     * @param \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceServiceChannelAstiInBase[] $serviceServiceChannels Internal property for adding service channel connections for a service.  This property is also used when attaching general description propsed channels into service (PTV-2315).
     *
     * @return $this
     */
    public function setServiceServiceChannels($serviceServiceChannels)
    {
        $this->container['serviceServiceChannels'] = $serviceServiceChannels;

        return $this;
    }

    /**
     * Gets userName
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['userName'];
    }

    /**
     * Sets userName
     *
     * @param string $userName User name.
     *
     * @return $this
     */
    public function setUserName($userName)
    {
        $this->container['userName'] = $userName;

        return $this;
    }

    /**
     * Gets availableLanguages
     *
     * @return string[]
     */
    public function getAvailableLanguages()
    {
        return $this->container['availableLanguages'];
    }

    /**
     * Sets availableLanguages
     *
     * @param string[] $availableLanguages Gets or sets available languages
     *
     * @return $this
     */
    public function setAvailableLanguages($availableLanguages)
    {
        $this->container['availableLanguages'] = $availableLanguages;

        return $this;
    }

    /**
     * Gets requiredPropertiesAvailableLanguages
     *
     * @return string[]
     */
    public function getRequiredPropertiesAvailableLanguages()
    {
        return $this->container['requiredPropertiesAvailableLanguages'];
    }

    /**
     * Sets requiredPropertiesAvailableLanguages
     *
     * @param string[] $requiredPropertiesAvailableLanguages Internal property to check the languages within required lists: ServiceNames and ServiceDescriptions
     *
     * @return $this
     */
    public function setRequiredPropertiesAvailableLanguages($requiredPropertiesAvailableLanguages)
    {
        $this->container['requiredPropertiesAvailableLanguages'] = $requiredPropertiesAvailableLanguages;

        return $this;
    }

    /**
     * Gets serviceChargeType
     *
     * @return string
     */
    public function getServiceChargeType()
    {
        return $this->container['serviceChargeType'];
    }

    /**
     * Sets serviceChargeType
     *
     * @param string $serviceChargeType Service charge type. Possible values are: Chargeable or FreeOfCharge.  NOTE! If service charge type has been defined within attached statutory service general description, the charge type for service is ignored.
     *
     * @return $this
     */
    public function setServiceChargeType($serviceChargeType)
    {
        $this->container['serviceChargeType'] = $serviceChargeType;

        return $this;
    }

    /**
     * Gets areas
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiAreaIn[]
     */
    public function getAreas()
    {
        return $this->container['areas'];
    }

    /**
     * Sets areas
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiAreaIn[] $areas List of areas. List can contain different types of areas.
     *
     * @return $this
     */
    public function setAreas($areas)
    {
        $this->container['areas'] = $areas;

        return $this;
    }

    /**
     * Gets serviceClasses
     *
     * @return string[]
     */
    public function getServiceClasses()
    {
        return $this->container['serviceClasses'];
    }

    /**
     * Sets serviceClasses
     *
     * @param string[] $serviceClasses List of service class urls (see http://finto.fi/ptvl/fi/).  NOTE! If service class has been defined within attached statutory service general description, the service class is not added for service.
     *
     * @return $this
     */
    public function setServiceClasses($serviceClasses)
    {
        $this->container['serviceClasses'] = $serviceClasses;

        return $this;
    }

    /**
     * Gets ontologyTerms
     *
     * @return string[]
     */
    public function getOntologyTerms()
    {
        return $this->container['ontologyTerms'];
    }

    /**
     * Sets ontologyTerms
     *
     * @param string[] $ontologyTerms List of ontology term urls (see http://finto.fi/koko/fi/).  NOTE! If ontology term has been defined within attached statutory service general description, the ontology term is not added for service.
     *
     * @return $this
     */
    public function setOntologyTerms($ontologyTerms)
    {
        $this->container['ontologyTerms'] = $ontologyTerms;

        return $this;
    }

    /**
     * Gets targetGroups
     *
     * @return string[]
     */
    public function getTargetGroups()
    {
        return $this->container['targetGroups'];
    }

    /**
     * Sets targetGroups
     *
     * @param string[] $targetGroups List of target group urls (see http://finto.fi/ptvl/fi/page/?uri=http://urn.fi/URN:NBN:fi:au:ptvl:KR).  NOTE! If target group has been defined within attached statutory service general description, the target group is not added for service.
     *
     * @return $this
     */
    public function setTargetGroups($targetGroups)
    {
        $this->container['targetGroups'] = $targetGroups;

        return $this;
    }

    /**
     * Gets deleteAllServiceVouchers
     *
     * @return bool
     */
    public function getDeleteAllServiceVouchers()
    {
        return $this->container['deleteAllServiceVouchers'];
    }

    /**
     * Sets deleteAllServiceVouchers
     *
     * @param bool $deleteAllServiceVouchers Set to true to delete all existing service vouchers (the ServiceVouchers collection for this object should be empty collection when this option is used).
     *
     * @return $this
     */
    public function setDeleteAllServiceVouchers($deleteAllServiceVouchers)
    {
        $this->container['deleteAllServiceVouchers'] = $deleteAllServiceVouchers;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Service type. Possible values are: Service, PermitOrObligation or ProfessionalQualification.  NOTE! If service type has been defined within attached statutory service general description, the type for service is ignored.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets fundingType
     *
     * @return string
     */
    public function getFundingType()
    {
        return $this->container['fundingType'];
    }

    /**
     * Sets fundingType
     *
     * @param string $fundingType Service funding type. Possible values are: PubliclyFunded or MarketFunded.
     *
     * @return $this
     */
    public function setFundingType($fundingType)
    {
        $this->container['fundingType'] = $fundingType;

        return $this;
    }

    /**
     * Gets serviceNames
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]
     */
    public function getServiceNames()
    {
        return $this->container['serviceNames'];
    }

    /**
     * Sets serviceNames
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[] $serviceNames List of service names. Possible type values are: Name, AlternativeName.
     *
     * @return $this
     */
    public function setServiceNames($serviceNames)
    {
        $this->container['serviceNames'] = $serviceNames;

        return $this;
    }

    /**
     * Gets areaType
     *
     * @return string
     */
    public function getAreaType()
    {
        return $this->container['areaType'];
    }

    /**
     * Sets areaType
     *
     * @param string $areaType Area type (Nationwide, NationwideExceptAlandIslands, LimitedType).
     *
     * @return $this
     */
    public function setAreaType($areaType)
    {
        $this->container['areaType'] = $areaType;

        return $this;
    }

    /**
     * Gets serviceDescriptions
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]
     */
    public function getServiceDescriptions()
    {
        return $this->container['serviceDescriptions'];
    }

    /**
     * Sets serviceDescriptions
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[] $serviceDescriptions List of service descriptions. Possible type values are: Description, Summary, UserInstruction, ValidityTime, ProcessingTime, DeadLine, ChargeTypeAdditionalInfo, ServiceType.
     *
     * @return $this
     */
    public function setServiceDescriptions($serviceDescriptions)
    {
        $this->container['serviceDescriptions'] = $serviceDescriptions;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return string[]
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param string[] $languages List of service language codes.
     *
     * @return $this
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets serviceProducers
     *
     * @return \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceProducerIn[]
     */
    public function getServiceProducers()
    {
        return $this->container['serviceProducers'];
    }

    /**
     * Sets serviceProducers
     *
     * @param \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceProducerIn[] $serviceProducers List of service producers
     *
     * @return $this
     */
    public function setServiceProducers($serviceProducers)
    {
        $this->container['serviceProducers'] = $serviceProducers;

        return $this;
    }

    /**
     * Gets publishingStatus
     *
     * @return string
     */
    public function getPublishingStatus()
    {
        return $this->container['publishingStatus'];
    }

    /**
     * Sets publishingStatus
     *
     * @param string $publishingStatus Publishing status. Possible values are: Draft or Published.
     *
     * @return $this
     */
    public function setPublishingStatus($publishingStatus)
    {
        $this->container['publishingStatus'] = $publishingStatus;

        return $this;
    }

    /**
     * Gets serviceChannels
     *
     * @return string[]
     */
    public function getServiceChannels()
    {
        return $this->container['serviceChannels'];
    }

    /**
     * Sets serviceChannels
     *
     * @param string[] $serviceChannels List of related service channels (GUID).
     *
     * @return $this
     */
    public function setServiceChannels($serviceChannels)
    {
        $this->container['serviceChannels'] = $serviceChannels;

        return $this;
    }

    /**
     * Gets mainResponsibleOrganization
     *
     * @return string
     */
    public function getMainResponsibleOrganization()
    {
        return $this->container['mainResponsibleOrganization'];
    }

    /**
     * Sets mainResponsibleOrganization
     *
     * @param string $mainResponsibleOrganization Main organization id.
     *
     * @return $this
     */
    public function setMainResponsibleOrganization($mainResponsibleOrganization)
    {
        $this->container['mainResponsibleOrganization'] = $mainResponsibleOrganization;

        return $this;
    }

    /**
     * Gets deleteAllLifeEvents
     *
     * @return bool
     */
    public function getDeleteAllLifeEvents()
    {
        return $this->container['deleteAllLifeEvents'];
    }

    /**
     * Sets deleteAllLifeEvents
     *
     * @param bool $deleteAllLifeEvents Set to true to delete all existing life events (the LifeEvents collection for this object should be empty collection when this option is used).
     *
     * @return $this
     */
    public function setDeleteAllLifeEvents($deleteAllLifeEvents)
    {
        $this->container['deleteAllLifeEvents'] = $deleteAllLifeEvents;

        return $this;
    }

    /**
     * Gets deleteAllIndustrialClasses
     *
     * @return bool
     */
    public function getDeleteAllIndustrialClasses()
    {
        return $this->container['deleteAllIndustrialClasses'];
    }

    /**
     * Sets deleteAllIndustrialClasses
     *
     * @param bool $deleteAllIndustrialClasses Set to true to delete all existing industrial classes (the IndustrialClasses collection for this object should be empty collection when this option is used).
     *
     * @return $this
     */
    public function setDeleteAllIndustrialClasses($deleteAllIndustrialClasses)
    {
        $this->container['deleteAllIndustrialClasses'] = $deleteAllIndustrialClasses;

        return $this;
    }

    /**
     * Gets deleteAllKeywords
     *
     * @return bool
     */
    public function getDeleteAllKeywords()
    {
        return $this->container['deleteAllKeywords'];
    }

    /**
     * Sets deleteAllKeywords
     *
     * @param bool $deleteAllKeywords Set to true to delete all existing keywords (the Keywords collection for this object should be empty collection when this option is used).
     *
     * @return $this
     */
    public function setDeleteAllKeywords($deleteAllKeywords)
    {
        $this->container['deleteAllKeywords'] = $deleteAllKeywords;

        return $this;
    }

    /**
     * Gets deleteAllMunicipalities
     *
     * @return bool
     */
    public function getDeleteAllMunicipalities()
    {
        return $this->container['deleteAllMunicipalities'];
    }

    /**
     * Sets deleteAllMunicipalities
     *
     * @param bool $deleteAllMunicipalities Set to true to delete all existing municipalities (the Municipalities collection for this object should be empty collection when this option is used).
     *
     * @return $this
     */
    public function setDeleteAllMunicipalities($deleteAllMunicipalities)
    {
        $this->container['deleteAllMunicipalities'] = $deleteAllMunicipalities;

        return $this;
    }

    /**
     * Gets deleteAllLaws
     *
     * @return bool
     */
    public function getDeleteAllLaws()
    {
        return $this->container['deleteAllLaws'];
    }

    /**
     * Sets deleteAllLaws
     *
     * @param bool $deleteAllLaws Set to true to delete all existing laws within legislation (the legislation collection for this object should be empty collection when this option is used).
     *
     * @return $this
     */
    public function setDeleteAllLaws($deleteAllLaws)
    {
        $this->container['deleteAllLaws'] = $deleteAllLaws;

        return $this;
    }

    /**
     * Gets deleteServiceChargeType
     *
     * @return bool
     */
    public function getDeleteServiceChargeType()
    {
        return $this->container['deleteServiceChargeType'];
    }

    /**
     * Sets deleteServiceChargeType
     *
     * @param bool $deleteServiceChargeType Set to true to delete service charge type (ServiceChargeType property for this object should be empty when this option is used).
     *
     * @return $this
     */
    public function setDeleteServiceChargeType($deleteServiceChargeType)
    {
        $this->container['deleteServiceChargeType'] = $deleteServiceChargeType;

        return $this;
    }

    /**
     * Gets deleteGeneralDescriptionId
     *
     * @return bool
     */
    public function getDeleteGeneralDescriptionId()
    {
        return $this->container['deleteGeneralDescriptionId'];
    }

    /**
     * Sets deleteGeneralDescriptionId
     *
     * @param bool $deleteGeneralDescriptionId Set to true to delete statutory service general description (GeneralDescriptionId property for this object should be empty when this option is used).
     *
     * @return $this
     */
    public function setDeleteGeneralDescriptionId($deleteGeneralDescriptionId)
    {
        $this->container['deleteGeneralDescriptionId'] = $deleteGeneralDescriptionId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
