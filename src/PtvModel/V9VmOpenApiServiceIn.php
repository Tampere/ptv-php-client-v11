<?php
/**
 * V9VmOpenApiServiceIn
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * The version of the OpenAPI document: v11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvModel;

use \ArrayAccess;
use \Tampere\PtvV11\ObjectSerializer;

/**
 * V9VmOpenApiServiceIn Class Doc Comment
 *
 * @category Class
 * @description OPEN API V9 - View Model of service for IN api
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V9VmOpenApiServiceIn implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V9VmOpenApiServiceIn';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sourceId' => 'string',
        'legislation' => '\Tampere\PtvV11\PtvModel\V4VmOpenApiLaw[]',
        'keywords' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
        'requirements' => '\Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]',
        'serviceVouchersInUse' => 'bool',
        'serviceVouchers' => '\Tampere\PtvV11\PtvModel\V9VmOpenApiServiceVoucher[]',
        'versionId' => 'string',
        'id' => 'string',
        'generalDescriptionId' => 'string',
        'lifeEvents' => 'string[]',
        'industrialClasses' => 'string[]',
        'otherResponsibleOrganizations' => 'string[]',
        'validFrom' => '\DateTime',
        'validTo' => '\DateTime',
        'currentPublishingStatus' => 'string',
        'serviceServiceChannels' => '\Tampere\PtvV11\PtvModel\V11VmOpenApiServiceServiceChannelAstiInBase[]',
        'userName' => 'string',
        'availableLanguages' => 'string[]',
        'requiredPropertiesAvailableLanguages' => 'string[]',
        'serviceChargeType' => 'string',
        'areas' => '\Tampere\PtvV11\PtvModel\VmOpenApiAreaIn[]',
        'serviceClasses' => 'string[]',
        'ontologyTerms' => 'string[]',
        'targetGroups' => 'string[]',
        'deleteAllServiceVouchers' => 'bool',
        'type' => 'string',
        'fundingType' => 'string',
        'serviceNames' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
        'areaType' => 'string',
        'serviceDescriptions' => '\Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]',
        'languages' => 'string[]',
        'serviceProducers' => '\Tampere\PtvV11\PtvModel\V9VmOpenApiServiceProducerIn[]',
        'publishingStatus' => 'string',
        'serviceChannels' => 'string[]',
        'mainResponsibleOrganization' => 'string',
        'deleteAllLifeEvents' => 'bool',
        'deleteAllIndustrialClasses' => 'bool',
        'deleteAllKeywords' => 'bool',
        'deleteAllMunicipalities' => 'bool',
        'deleteAllLaws' => 'bool',
        'deleteServiceChargeType' => 'bool',
        'deleteGeneralDescriptionId' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sourceId' => null,
        'legislation' => null,
        'keywords' => null,
        'requirements' => null,
        'serviceVouchersInUse' => null,
        'serviceVouchers' => null,
        'versionId' => 'uuid',
        'id' => 'uuid',
        'generalDescriptionId' => null,
        'lifeEvents' => null,
        'industrialClasses' => null,
        'otherResponsibleOrganizations' => 'uuid',
        'validFrom' => 'date-time',
        'validTo' => 'date-time',
        'currentPublishingStatus' => null,
        'serviceServiceChannels' => null,
        'userName' => null,
        'availableLanguages' => null,
        'requiredPropertiesAvailableLanguages' => null,
        'serviceChargeType' => null,
        'areas' => null,
        'serviceClasses' => null,
        'ontologyTerms' => null,
        'targetGroups' => null,
        'deleteAllServiceVouchers' => null,
        'type' => null,
        'fundingType' => null,
        'serviceNames' => null,
        'areaType' => null,
        'serviceDescriptions' => null,
        'languages' => null,
        'serviceProducers' => null,
        'publishingStatus' => null,
        'serviceChannels' => null,
        'mainResponsibleOrganization' => null,
        'deleteAllLifeEvents' => null,
        'deleteAllIndustrialClasses' => null,
        'deleteAllKeywords' => null,
        'deleteAllMunicipalities' => null,
        'deleteAllLaws' => null,
        'deleteServiceChargeType' => null,
        'deleteGeneralDescriptionId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sourceId' => true,
		'legislation' => true,
		'keywords' => true,
		'requirements' => true,
		'serviceVouchersInUse' => false,
		'serviceVouchers' => true,
		'versionId' => true,
		'id' => true,
		'generalDescriptionId' => true,
		'lifeEvents' => true,
		'industrialClasses' => true,
		'otherResponsibleOrganizations' => true,
		'validFrom' => true,
		'validTo' => true,
		'currentPublishingStatus' => true,
		'serviceServiceChannels' => true,
		'userName' => true,
		'availableLanguages' => true,
		'requiredPropertiesAvailableLanguages' => true,
		'serviceChargeType' => true,
		'areas' => true,
		'serviceClasses' => true,
		'ontologyTerms' => true,
		'targetGroups' => true,
		'deleteAllServiceVouchers' => false,
		'type' => true,
		'fundingType' => false,
		'serviceNames' => true,
		'areaType' => false,
		'serviceDescriptions' => true,
		'languages' => true,
		'serviceProducers' => true,
		'publishingStatus' => false,
		'serviceChannels' => true,
		'mainResponsibleOrganization' => false,
		'deleteAllLifeEvents' => false,
		'deleteAllIndustrialClasses' => false,
		'deleteAllKeywords' => false,
		'deleteAllMunicipalities' => false,
		'deleteAllLaws' => false,
		'deleteServiceChargeType' => false,
		'deleteGeneralDescriptionId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sourceId' => 'sourceId',
        'legislation' => 'legislation',
        'keywords' => 'keywords',
        'requirements' => 'requirements',
        'serviceVouchersInUse' => 'serviceVouchersInUse',
        'serviceVouchers' => 'serviceVouchers',
        'versionId' => 'versionId',
        'id' => 'id',
        'generalDescriptionId' => 'generalDescriptionId',
        'lifeEvents' => 'lifeEvents',
        'industrialClasses' => 'industrialClasses',
        'otherResponsibleOrganizations' => 'otherResponsibleOrganizations',
        'validFrom' => 'validFrom',
        'validTo' => 'validTo',
        'currentPublishingStatus' => 'currentPublishingStatus',
        'serviceServiceChannels' => 'serviceServiceChannels',
        'userName' => 'userName',
        'availableLanguages' => 'availableLanguages',
        'requiredPropertiesAvailableLanguages' => 'requiredPropertiesAvailableLanguages',
        'serviceChargeType' => 'serviceChargeType',
        'areas' => 'areas',
        'serviceClasses' => 'serviceClasses',
        'ontologyTerms' => 'ontologyTerms',
        'targetGroups' => 'targetGroups',
        'deleteAllServiceVouchers' => 'deleteAllServiceVouchers',
        'type' => 'type',
        'fundingType' => 'fundingType',
        'serviceNames' => 'serviceNames',
        'areaType' => 'areaType',
        'serviceDescriptions' => 'serviceDescriptions',
        'languages' => 'languages',
        'serviceProducers' => 'serviceProducers',
        'publishingStatus' => 'publishingStatus',
        'serviceChannels' => 'serviceChannels',
        'mainResponsibleOrganization' => 'mainResponsibleOrganization',
        'deleteAllLifeEvents' => 'deleteAllLifeEvents',
        'deleteAllIndustrialClasses' => 'deleteAllIndustrialClasses',
        'deleteAllKeywords' => 'deleteAllKeywords',
        'deleteAllMunicipalities' => 'deleteAllMunicipalities',
        'deleteAllLaws' => 'deleteAllLaws',
        'deleteServiceChargeType' => 'deleteServiceChargeType',
        'deleteGeneralDescriptionId' => 'deleteGeneralDescriptionId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sourceId' => 'setSourceId',
        'legislation' => 'setLegislation',
        'keywords' => 'setKeywords',
        'requirements' => 'setRequirements',
        'serviceVouchersInUse' => 'setServiceVouchersInUse',
        'serviceVouchers' => 'setServiceVouchers',
        'versionId' => 'setVersionId',
        'id' => 'setId',
        'generalDescriptionId' => 'setGeneralDescriptionId',
        'lifeEvents' => 'setLifeEvents',
        'industrialClasses' => 'setIndustrialClasses',
        'otherResponsibleOrganizations' => 'setOtherResponsibleOrganizations',
        'validFrom' => 'setValidFrom',
        'validTo' => 'setValidTo',
        'currentPublishingStatus' => 'setCurrentPublishingStatus',
        'serviceServiceChannels' => 'setServiceServiceChannels',
        'userName' => 'setUserName',
        'availableLanguages' => 'setAvailableLanguages',
        'requiredPropertiesAvailableLanguages' => 'setRequiredPropertiesAvailableLanguages',
        'serviceChargeType' => 'setServiceChargeType',
        'areas' => 'setAreas',
        'serviceClasses' => 'setServiceClasses',
        'ontologyTerms' => 'setOntologyTerms',
        'targetGroups' => 'setTargetGroups',
        'deleteAllServiceVouchers' => 'setDeleteAllServiceVouchers',
        'type' => 'setType',
        'fundingType' => 'setFundingType',
        'serviceNames' => 'setServiceNames',
        'areaType' => 'setAreaType',
        'serviceDescriptions' => 'setServiceDescriptions',
        'languages' => 'setLanguages',
        'serviceProducers' => 'setServiceProducers',
        'publishingStatus' => 'setPublishingStatus',
        'serviceChannels' => 'setServiceChannels',
        'mainResponsibleOrganization' => 'setMainResponsibleOrganization',
        'deleteAllLifeEvents' => 'setDeleteAllLifeEvents',
        'deleteAllIndustrialClasses' => 'setDeleteAllIndustrialClasses',
        'deleteAllKeywords' => 'setDeleteAllKeywords',
        'deleteAllMunicipalities' => 'setDeleteAllMunicipalities',
        'deleteAllLaws' => 'setDeleteAllLaws',
        'deleteServiceChargeType' => 'setDeleteServiceChargeType',
        'deleteGeneralDescriptionId' => 'setDeleteGeneralDescriptionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sourceId' => 'getSourceId',
        'legislation' => 'getLegislation',
        'keywords' => 'getKeywords',
        'requirements' => 'getRequirements',
        'serviceVouchersInUse' => 'getServiceVouchersInUse',
        'serviceVouchers' => 'getServiceVouchers',
        'versionId' => 'getVersionId',
        'id' => 'getId',
        'generalDescriptionId' => 'getGeneralDescriptionId',
        'lifeEvents' => 'getLifeEvents',
        'industrialClasses' => 'getIndustrialClasses',
        'otherResponsibleOrganizations' => 'getOtherResponsibleOrganizations',
        'validFrom' => 'getValidFrom',
        'validTo' => 'getValidTo',
        'currentPublishingStatus' => 'getCurrentPublishingStatus',
        'serviceServiceChannels' => 'getServiceServiceChannels',
        'userName' => 'getUserName',
        'availableLanguages' => 'getAvailableLanguages',
        'requiredPropertiesAvailableLanguages' => 'getRequiredPropertiesAvailableLanguages',
        'serviceChargeType' => 'getServiceChargeType',
        'areas' => 'getAreas',
        'serviceClasses' => 'getServiceClasses',
        'ontologyTerms' => 'getOntologyTerms',
        'targetGroups' => 'getTargetGroups',
        'deleteAllServiceVouchers' => 'getDeleteAllServiceVouchers',
        'type' => 'getType',
        'fundingType' => 'getFundingType',
        'serviceNames' => 'getServiceNames',
        'areaType' => 'getAreaType',
        'serviceDescriptions' => 'getServiceDescriptions',
        'languages' => 'getLanguages',
        'serviceProducers' => 'getServiceProducers',
        'publishingStatus' => 'getPublishingStatus',
        'serviceChannels' => 'getServiceChannels',
        'mainResponsibleOrganization' => 'getMainResponsibleOrganization',
        'deleteAllLifeEvents' => 'getDeleteAllLifeEvents',
        'deleteAllIndustrialClasses' => 'getDeleteAllIndustrialClasses',
        'deleteAllKeywords' => 'getDeleteAllKeywords',
        'deleteAllMunicipalities' => 'getDeleteAllMunicipalities',
        'deleteAllLaws' => 'getDeleteAllLaws',
        'deleteServiceChargeType' => 'getDeleteServiceChargeType',
        'deleteGeneralDescriptionId' => 'getDeleteGeneralDescriptionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sourceId', $data ?? [], null);
        $this->setIfExists('legislation', $data ?? [], null);
        $this->setIfExists('keywords', $data ?? [], null);
        $this->setIfExists('requirements', $data ?? [], null);
        $this->setIfExists('serviceVouchersInUse', $data ?? [], null);
        $this->setIfExists('serviceVouchers', $data ?? [], null);
        $this->setIfExists('versionId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('generalDescriptionId', $data ?? [], null);
        $this->setIfExists('lifeEvents', $data ?? [], null);
        $this->setIfExists('industrialClasses', $data ?? [], null);
        $this->setIfExists('otherResponsibleOrganizations', $data ?? [], null);
        $this->setIfExists('validFrom', $data ?? [], null);
        $this->setIfExists('validTo', $data ?? [], null);
        $this->setIfExists('currentPublishingStatus', $data ?? [], null);
        $this->setIfExists('serviceServiceChannels', $data ?? [], null);
        $this->setIfExists('userName', $data ?? [], null);
        $this->setIfExists('availableLanguages', $data ?? [], null);
        $this->setIfExists('requiredPropertiesAvailableLanguages', $data ?? [], null);
        $this->setIfExists('serviceChargeType', $data ?? [], null);
        $this->setIfExists('areas', $data ?? [], null);
        $this->setIfExists('serviceClasses', $data ?? [], null);
        $this->setIfExists('ontologyTerms', $data ?? [], null);
        $this->setIfExists('targetGroups', $data ?? [], null);
        $this->setIfExists('deleteAllServiceVouchers', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('fundingType', $data ?? [], null);
        $this->setIfExists('serviceNames', $data ?? [], null);
        $this->setIfExists('areaType', $data ?? [], null);
        $this->setIfExists('serviceDescriptions', $data ?? [], null);
        $this->setIfExists('languages', $data ?? [], null);
        $this->setIfExists('serviceProducers', $data ?? [], null);
        $this->setIfExists('publishingStatus', $data ?? [], null);
        $this->setIfExists('serviceChannels', $data ?? [], null);
        $this->setIfExists('mainResponsibleOrganization', $data ?? [], null);
        $this->setIfExists('deleteAllLifeEvents', $data ?? [], null);
        $this->setIfExists('deleteAllIndustrialClasses', $data ?? [], null);
        $this->setIfExists('deleteAllKeywords', $data ?? [], null);
        $this->setIfExists('deleteAllMunicipalities', $data ?? [], null);
        $this->setIfExists('deleteAllLaws', $data ?? [], null);
        $this->setIfExists('deleteServiceChargeType', $data ?? [], null);
        $this->setIfExists('deleteGeneralDescriptionId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sourceId']) && !preg_match("/^[A-Za-z0-9-.]*$/", $this->container['sourceId'])) {
            $invalidProperties[] = "invalid value for 'sourceId', must be conform to the pattern /^[A-Za-z0-9-.]*$/.";
        }

        if ($this->container['fundingType'] === null) {
            $invalidProperties[] = "'fundingType' can't be null";
        }
        if ((mb_strlen($this->container['fundingType']) < 1)) {
            $invalidProperties[] = "invalid value for 'fundingType', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['areaType'] === null) {
            $invalidProperties[] = "'areaType' can't be null";
        }
        if ((mb_strlen($this->container['areaType']) < 1)) {
            $invalidProperties[] = "invalid value for 'areaType', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['serviceDescriptions'] === null) {
            $invalidProperties[] = "'serviceDescriptions' can't be null";
        }
        if ($this->container['languages'] === null) {
            $invalidProperties[] = "'languages' can't be null";
        }
        if ($this->container['serviceProducers'] === null) {
            $invalidProperties[] = "'serviceProducers' can't be null";
        }
        if ($this->container['publishingStatus'] === null) {
            $invalidProperties[] = "'publishingStatus' can't be null";
        }
        if ((mb_strlen($this->container['publishingStatus']) < 1)) {
            $invalidProperties[] = "invalid value for 'publishingStatus', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['mainResponsibleOrganization'] === null) {
            $invalidProperties[] = "'mainResponsibleOrganization' can't be null";
        }
        if ((mb_strlen($this->container['mainResponsibleOrganization']) < 1)) {
            $invalidProperties[] = "invalid value for 'mainResponsibleOrganization', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sourceId
     *
     * @return string|null
     */
    public function getSourceId()
    {
        return $this->container['sourceId'];
    }

    /**
     * Sets sourceId
     *
     * @param string|null $sourceId External system identifier for the entity. User needs to be logged in to be able to get/set value.
     *
     * @return self
     */
    public function setSourceId($sourceId)
    {
        if (is_null($sourceId)) {
            array_push($this->openAPINullablesSetToNull, 'sourceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($sourceId) && (!preg_match("/^[A-Za-z0-9-.]*$/", $sourceId))) {
            throw new \InvalidArgumentException("invalid value for \$sourceId when calling V9VmOpenApiServiceIn., must conform to the pattern /^[A-Za-z0-9-.]*$/.");
        }

        $this->container['sourceId'] = $sourceId;

        return $this;
    }

    /**
     * Gets legislation
     *
     * @return \Tampere\PtvV11\PtvModel\V4VmOpenApiLaw[]|null
     */
    public function getLegislation()
    {
        return $this->container['legislation'];
    }

    /**
     * Sets legislation
     *
     * @param \Tampere\PtvV11\PtvModel\V4VmOpenApiLaw[]|null $legislation List of laws related to the service.
     *
     * @return self
     */
    public function setLegislation($legislation)
    {
        if (is_null($legislation)) {
            array_push($this->openAPINullablesSetToNull, 'legislation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legislation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legislation'] = $legislation;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null $keywords List of localized service keywords. (Max.Length: 150).
     *
     * @return self
     */
    public function setKeywords($keywords)
    {
        if (is_null($keywords)) {
            array_push($this->openAPINullablesSetToNull, 'keywords');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('keywords', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets requirements
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null
     */
    public function getRequirements()
    {
        return $this->container['requirements'];
    }

    /**
     * Sets requirements
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLanguageItem[]|null $requirements Localized service usage requirements (description of requirement). (Max.Length: 2500).
     *
     * @return self
     */
    public function setRequirements($requirements)
    {
        if (is_null($requirements)) {
            array_push($this->openAPINullablesSetToNull, 'requirements');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requirements', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requirements'] = $requirements;

        return $this;
    }

    /**
     * Gets serviceVouchersInUse
     *
     * @return bool|null
     */
    public function getServiceVouchersInUse()
    {
        return $this->container['serviceVouchersInUse'];
    }

    /**
     * Sets serviceVouchersInUse
     *
     * @param bool|null $serviceVouchersInUse Indicates if service vouchers are used in the service.
     *
     * @return self
     */
    public function setServiceVouchersInUse($serviceVouchersInUse)
    {
        if (is_null($serviceVouchersInUse)) {
            throw new \InvalidArgumentException('non-nullable serviceVouchersInUse cannot be null');
        }
        $this->container['serviceVouchersInUse'] = $serviceVouchersInUse;

        return $this;
    }

    /**
     * Gets serviceVouchers
     *
     * @return \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceVoucher[]|null
     */
    public function getServiceVouchers()
    {
        return $this->container['serviceVouchers'];
    }

    /**
     * Sets serviceVouchers
     *
     * @param \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceVoucher[]|null $serviceVouchers List of service vouchers.
     *
     * @return self
     */
    public function setServiceVouchers($serviceVouchers)
    {
        if (is_null($serviceVouchers)) {
            array_push($this->openAPINullablesSetToNull, 'serviceVouchers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceVouchers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceVouchers'] = $serviceVouchers;

        return $this;
    }

    /**
     * Gets versionId
     *
     * @return string|null
     */
    public function getVersionId()
    {
        return $this->container['versionId'];
    }

    /**
     * Sets versionId
     *
     * @param string|null $versionId The identifier for current version.
     *
     * @return self
     */
    public function setVersionId($versionId)
    {
        if (is_null($versionId)) {
            array_push($this->openAPINullablesSetToNull, 'versionId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('versionId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['versionId'] = $versionId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id PTV service identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets generalDescriptionId
     *
     * @return string|null
     */
    public function getGeneralDescriptionId()
    {
        return $this->container['generalDescriptionId'];
    }

    /**
     * Sets generalDescriptionId
     *
     * @param string|null $generalDescriptionId Valid PTV statutory service general description identifier that this service will be linked to. List of valid identifiers can be retrieved from the endpoint /api/GeneralDescription
     *
     * @return self
     */
    public function setGeneralDescriptionId($generalDescriptionId)
    {
        if (is_null($generalDescriptionId)) {
            array_push($this->openAPINullablesSetToNull, 'generalDescriptionId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('generalDescriptionId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['generalDescriptionId'] = $generalDescriptionId;

        return $this;
    }

    /**
     * Gets lifeEvents
     *
     * @return string[]|null
     */
    public function getLifeEvents()
    {
        return $this->container['lifeEvents'];
    }

    /**
     * Sets lifeEvents
     *
     * @param string[]|null $lifeEvents List of life event urls. Sample url: http://urn.fi/URN:NBN:fi:au:ptvl:v3017  NOTE! If life event has been defined within attached statutory service general description, the life event is not added for service.
     *
     * @return self
     */
    public function setLifeEvents($lifeEvents)
    {
        if (is_null($lifeEvents)) {
            array_push($this->openAPINullablesSetToNull, 'lifeEvents');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lifeEvents', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lifeEvents'] = $lifeEvents;

        return $this;
    }

    /**
     * Gets industrialClasses
     *
     * @return string[]|null
     */
    public function getIndustrialClasses()
    {
        return $this->container['industrialClasses'];
    }

    /**
     * Sets industrialClasses
     *
     * @param string[]|null $industrialClasses List of industrial class codes (see http://tilastokeskus.fi/meta/luokitukset/toimiala/001-2008/tekstitiedosto_en.txt).  NOTE! If industrial class has been defined within attached statutory service general description, the industrial class is not added for service.
     *
     * @return self
     */
    public function setIndustrialClasses($industrialClasses)
    {
        if (is_null($industrialClasses)) {
            array_push($this->openAPINullablesSetToNull, 'industrialClasses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industrialClasses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industrialClasses'] = $industrialClasses;

        return $this;
    }

    /**
     * Gets otherResponsibleOrganizations
     *
     * @return string[]|null
     */
    public function getOtherResponsibleOrganizations()
    {
        return $this->container['otherResponsibleOrganizations'];
    }

    /**
     * Sets otherResponsibleOrganizations
     *
     * @param string[]|null $otherResponsibleOrganizations List of other responsible organizations for the service.
     *
     * @return self
     */
    public function setOtherResponsibleOrganizations($otherResponsibleOrganizations)
    {
        if (is_null($otherResponsibleOrganizations)) {
            array_push($this->openAPINullablesSetToNull, 'otherResponsibleOrganizations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('otherResponsibleOrganizations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['otherResponsibleOrganizations'] = $otherResponsibleOrganizations;

        return $this;
    }

    /**
     * Gets validFrom
     *
     * @return \DateTime|null
     */
    public function getValidFrom()
    {
        return $this->container['validFrom'];
    }

    /**
     * Sets validFrom
     *
     * @param \DateTime|null $validFrom Date when item should be published.
     *
     * @return self
     */
    public function setValidFrom($validFrom)
    {
        if (is_null($validFrom)) {
            array_push($this->openAPINullablesSetToNull, 'validFrom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validFrom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validFrom'] = $validFrom;

        return $this;
    }

    /**
     * Gets validTo
     *
     * @return \DateTime|null
     */
    public function getValidTo()
    {
        return $this->container['validTo'];
    }

    /**
     * Sets validTo
     *
     * @param \DateTime|null $validTo Date when item should be archived.
     *
     * @return self
     */
    public function setValidTo($validTo)
    {
        if (is_null($validTo)) {
            array_push($this->openAPINullablesSetToNull, 'validTo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validTo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validTo'] = $validTo;

        return $this;
    }

    /**
     * Gets currentPublishingStatus
     *
     * @return string|null
     */
    public function getCurrentPublishingStatus()
    {
        return $this->container['currentPublishingStatus'];
    }

    /**
     * Sets currentPublishingStatus
     *
     * @param string|null $currentPublishingStatus Current version publishing status.
     *
     * @return self
     */
    public function setCurrentPublishingStatus($currentPublishingStatus)
    {
        if (is_null($currentPublishingStatus)) {
            array_push($this->openAPINullablesSetToNull, 'currentPublishingStatus');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currentPublishingStatus', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currentPublishingStatus'] = $currentPublishingStatus;

        return $this;
    }

    /**
     * Gets serviceServiceChannels
     *
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceServiceChannelAstiInBase[]|null
     */
    public function getServiceServiceChannels()
    {
        return $this->container['serviceServiceChannels'];
    }

    /**
     * Sets serviceServiceChannels
     *
     * @param \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceServiceChannelAstiInBase[]|null $serviceServiceChannels Internal property for adding service channel connections for a service.  This property is also used when attaching general description propsed channels into service (PTV-2315).
     *
     * @return self
     */
    public function setServiceServiceChannels($serviceServiceChannels)
    {
        if (is_null($serviceServiceChannels)) {
            array_push($this->openAPINullablesSetToNull, 'serviceServiceChannels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceServiceChannels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceServiceChannels'] = $serviceServiceChannels;

        return $this;
    }

    /**
     * Gets userName
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['userName'];
    }

    /**
     * Sets userName
     *
     * @param string|null $userName User name.
     *
     * @return self
     */
    public function setUserName($userName)
    {
        if (is_null($userName)) {
            array_push($this->openAPINullablesSetToNull, 'userName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('userName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['userName'] = $userName;

        return $this;
    }

    /**
     * Gets availableLanguages
     *
     * @return string[]|null
     */
    public function getAvailableLanguages()
    {
        return $this->container['availableLanguages'];
    }

    /**
     * Sets availableLanguages
     *
     * @param string[]|null $availableLanguages Gets or sets available languages
     *
     * @return self
     */
    public function setAvailableLanguages($availableLanguages)
    {
        if (is_null($availableLanguages)) {
            array_push($this->openAPINullablesSetToNull, 'availableLanguages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('availableLanguages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['availableLanguages'] = $availableLanguages;

        return $this;
    }

    /**
     * Gets requiredPropertiesAvailableLanguages
     *
     * @return string[]|null
     */
    public function getRequiredPropertiesAvailableLanguages()
    {
        return $this->container['requiredPropertiesAvailableLanguages'];
    }

    /**
     * Sets requiredPropertiesAvailableLanguages
     *
     * @param string[]|null $requiredPropertiesAvailableLanguages Internal property to check the languages within required lists: ServiceNames and ServiceDescriptions
     *
     * @return self
     */
    public function setRequiredPropertiesAvailableLanguages($requiredPropertiesAvailableLanguages)
    {
        if (is_null($requiredPropertiesAvailableLanguages)) {
            array_push($this->openAPINullablesSetToNull, 'requiredPropertiesAvailableLanguages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requiredPropertiesAvailableLanguages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requiredPropertiesAvailableLanguages'] = $requiredPropertiesAvailableLanguages;

        return $this;
    }

    /**
     * Gets serviceChargeType
     *
     * @return string|null
     */
    public function getServiceChargeType()
    {
        return $this->container['serviceChargeType'];
    }

    /**
     * Sets serviceChargeType
     *
     * @param string|null $serviceChargeType Service charge type. Possible values are: Chargeable or FreeOfCharge.  NOTE! If service charge type has been defined within attached statutory service general description, the charge type for service is ignored.
     *
     * @return self
     */
    public function setServiceChargeType($serviceChargeType)
    {
        if (is_null($serviceChargeType)) {
            array_push($this->openAPINullablesSetToNull, 'serviceChargeType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceChargeType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceChargeType'] = $serviceChargeType;

        return $this;
    }

    /**
     * Gets areas
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiAreaIn[]|null
     */
    public function getAreas()
    {
        return $this->container['areas'];
    }

    /**
     * Sets areas
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiAreaIn[]|null $areas List of areas. List can contain different types of areas.
     *
     * @return self
     */
    public function setAreas($areas)
    {
        if (is_null($areas)) {
            array_push($this->openAPINullablesSetToNull, 'areas');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('areas', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['areas'] = $areas;

        return $this;
    }

    /**
     * Gets serviceClasses
     *
     * @return string[]|null
     */
    public function getServiceClasses()
    {
        return $this->container['serviceClasses'];
    }

    /**
     * Sets serviceClasses
     *
     * @param string[]|null $serviceClasses List of service class urls (see http://finto.fi/ptvl/fi/).  NOTE! If service class has been defined within attached statutory service general description, the service class is not added for service.
     *
     * @return self
     */
    public function setServiceClasses($serviceClasses)
    {
        if (is_null($serviceClasses)) {
            array_push($this->openAPINullablesSetToNull, 'serviceClasses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceClasses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceClasses'] = $serviceClasses;

        return $this;
    }

    /**
     * Gets ontologyTerms
     *
     * @return string[]|null
     */
    public function getOntologyTerms()
    {
        return $this->container['ontologyTerms'];
    }

    /**
     * Sets ontologyTerms
     *
     * @param string[]|null $ontologyTerms List of ontology term urls (see http://finto.fi/koko/fi/).  NOTE! If ontology term has been defined within attached statutory service general description, the ontology term is not added for service.
     *
     * @return self
     */
    public function setOntologyTerms($ontologyTerms)
    {
        if (is_null($ontologyTerms)) {
            array_push($this->openAPINullablesSetToNull, 'ontologyTerms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ontologyTerms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ontologyTerms'] = $ontologyTerms;

        return $this;
    }

    /**
     * Gets targetGroups
     *
     * @return string[]|null
     */
    public function getTargetGroups()
    {
        return $this->container['targetGroups'];
    }

    /**
     * Sets targetGroups
     *
     * @param string[]|null $targetGroups List of target group urls (see http://finto.fi/ptvl/fi/page/?uri=http://urn.fi/URN:NBN:fi:au:ptvl:KR).  NOTE! If target group has been defined within attached statutory service general description, the target group is not added for service.
     *
     * @return self
     */
    public function setTargetGroups($targetGroups)
    {
        if (is_null($targetGroups)) {
            array_push($this->openAPINullablesSetToNull, 'targetGroups');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('targetGroups', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['targetGroups'] = $targetGroups;

        return $this;
    }

    /**
     * Gets deleteAllServiceVouchers
     *
     * @return bool|null
     */
    public function getDeleteAllServiceVouchers()
    {
        return $this->container['deleteAllServiceVouchers'];
    }

    /**
     * Sets deleteAllServiceVouchers
     *
     * @param bool|null $deleteAllServiceVouchers Set to true to delete all existing service vouchers (the ServiceVouchers collection for this object should be empty collection when this option is used).
     *
     * @return self
     */
    public function setDeleteAllServiceVouchers($deleteAllServiceVouchers)
    {
        if (is_null($deleteAllServiceVouchers)) {
            throw new \InvalidArgumentException('non-nullable deleteAllServiceVouchers cannot be null');
        }
        $this->container['deleteAllServiceVouchers'] = $deleteAllServiceVouchers;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Service type. Possible values are: Service, PermitOrObligation or ProfessionalQualification.  NOTE! If service type has been defined within attached statutory service general description, the type for service is ignored.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets fundingType
     *
     * @return string
     */
    public function getFundingType()
    {
        return $this->container['fundingType'];
    }

    /**
     * Sets fundingType
     *
     * @param string $fundingType Service funding type. Possible values are: PubliclyFunded or MarketFunded.
     *
     * @return self
     */
    public function setFundingType($fundingType)
    {
        if (is_null($fundingType)) {
            throw new \InvalidArgumentException('non-nullable fundingType cannot be null');
        }

        if ((mb_strlen($fundingType) < 1)) {
            throw new \InvalidArgumentException('invalid length for $fundingType when calling V9VmOpenApiServiceIn., must be bigger than or equal to 1.');
        }

        $this->container['fundingType'] = $fundingType;

        return $this;
    }

    /**
     * Gets serviceNames
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null
     */
    public function getServiceNames()
    {
        return $this->container['serviceNames'];
    }

    /**
     * Sets serviceNames
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]|null $serviceNames List of service names. Possible type values are: Name, AlternativeName.
     *
     * @return self
     */
    public function setServiceNames($serviceNames)
    {
        if (is_null($serviceNames)) {
            array_push($this->openAPINullablesSetToNull, 'serviceNames');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceNames', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceNames'] = $serviceNames;

        return $this;
    }

    /**
     * Gets areaType
     *
     * @return string
     */
    public function getAreaType()
    {
        return $this->container['areaType'];
    }

    /**
     * Sets areaType
     *
     * @param string $areaType Area type (Nationwide, NationwideExceptAlandIslands, LimitedType).
     *
     * @return self
     */
    public function setAreaType($areaType)
    {
        if (is_null($areaType)) {
            throw new \InvalidArgumentException('non-nullable areaType cannot be null');
        }

        if ((mb_strlen($areaType) < 1)) {
            throw new \InvalidArgumentException('invalid length for $areaType when calling V9VmOpenApiServiceIn., must be bigger than or equal to 1.');
        }

        $this->container['areaType'] = $areaType;

        return $this;
    }

    /**
     * Gets serviceDescriptions
     *
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[]
     */
    public function getServiceDescriptions()
    {
        return $this->container['serviceDescriptions'];
    }

    /**
     * Sets serviceDescriptions
     *
     * @param \Tampere\PtvV11\PtvModel\VmOpenApiLocalizedListItem[] $serviceDescriptions List of service descriptions. Possible type values are: Description, Summary, UserInstruction, ValidityTime, ProcessingTime, DeadLine, ChargeTypeAdditionalInfo, ServiceType.
     *
     * @return self
     */
    public function setServiceDescriptions($serviceDescriptions)
    {
        if (is_null($serviceDescriptions)) {
            array_push($this->openAPINullablesSetToNull, 'serviceDescriptions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceDescriptions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceDescriptions'] = $serviceDescriptions;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return string[]
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param string[] $languages List of service language codes.
     *
     * @return self
     */
    public function setLanguages($languages)
    {
        if (is_null($languages)) {
            array_push($this->openAPINullablesSetToNull, 'languages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('languages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets serviceProducers
     *
     * @return \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceProducerIn[]
     */
    public function getServiceProducers()
    {
        return $this->container['serviceProducers'];
    }

    /**
     * Sets serviceProducers
     *
     * @param \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceProducerIn[] $serviceProducers List of service producers
     *
     * @return self
     */
    public function setServiceProducers($serviceProducers)
    {
        if (is_null($serviceProducers)) {
            array_push($this->openAPINullablesSetToNull, 'serviceProducers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceProducers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceProducers'] = $serviceProducers;

        return $this;
    }

    /**
     * Gets publishingStatus
     *
     * @return string
     */
    public function getPublishingStatus()
    {
        return $this->container['publishingStatus'];
    }

    /**
     * Sets publishingStatus
     *
     * @param string $publishingStatus Publishing status. Possible values are: Draft or Published.
     *
     * @return self
     */
    public function setPublishingStatus($publishingStatus)
    {
        if (is_null($publishingStatus)) {
            throw new \InvalidArgumentException('non-nullable publishingStatus cannot be null');
        }

        if ((mb_strlen($publishingStatus) < 1)) {
            throw new \InvalidArgumentException('invalid length for $publishingStatus when calling V9VmOpenApiServiceIn., must be bigger than or equal to 1.');
        }

        $this->container['publishingStatus'] = $publishingStatus;

        return $this;
    }

    /**
     * Gets serviceChannels
     *
     * @return string[]|null
     */
    public function getServiceChannels()
    {
        return $this->container['serviceChannels'];
    }

    /**
     * Sets serviceChannels
     *
     * @param string[]|null $serviceChannels List of related service channels (GUID).
     *
     * @return self
     */
    public function setServiceChannels($serviceChannels)
    {
        if (is_null($serviceChannels)) {
            array_push($this->openAPINullablesSetToNull, 'serviceChannels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceChannels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceChannels'] = $serviceChannels;

        return $this;
    }

    /**
     * Gets mainResponsibleOrganization
     *
     * @return string
     */
    public function getMainResponsibleOrganization()
    {
        return $this->container['mainResponsibleOrganization'];
    }

    /**
     * Sets mainResponsibleOrganization
     *
     * @param string $mainResponsibleOrganization Main organization id.
     *
     * @return self
     */
    public function setMainResponsibleOrganization($mainResponsibleOrganization)
    {
        if (is_null($mainResponsibleOrganization)) {
            throw new \InvalidArgumentException('non-nullable mainResponsibleOrganization cannot be null');
        }

        if ((mb_strlen($mainResponsibleOrganization) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mainResponsibleOrganization when calling V9VmOpenApiServiceIn., must be bigger than or equal to 1.');
        }

        $this->container['mainResponsibleOrganization'] = $mainResponsibleOrganization;

        return $this;
    }

    /**
     * Gets deleteAllLifeEvents
     *
     * @return bool|null
     */
    public function getDeleteAllLifeEvents()
    {
        return $this->container['deleteAllLifeEvents'];
    }

    /**
     * Sets deleteAllLifeEvents
     *
     * @param bool|null $deleteAllLifeEvents Set to true to delete all existing life events (the LifeEvents collection for this object should be empty collection when this option is used).
     *
     * @return self
     */
    public function setDeleteAllLifeEvents($deleteAllLifeEvents)
    {
        if (is_null($deleteAllLifeEvents)) {
            throw new \InvalidArgumentException('non-nullable deleteAllLifeEvents cannot be null');
        }
        $this->container['deleteAllLifeEvents'] = $deleteAllLifeEvents;

        return $this;
    }

    /**
     * Gets deleteAllIndustrialClasses
     *
     * @return bool|null
     */
    public function getDeleteAllIndustrialClasses()
    {
        return $this->container['deleteAllIndustrialClasses'];
    }

    /**
     * Sets deleteAllIndustrialClasses
     *
     * @param bool|null $deleteAllIndustrialClasses Set to true to delete all existing industrial classes (the IndustrialClasses collection for this object should be empty collection when this option is used).
     *
     * @return self
     */
    public function setDeleteAllIndustrialClasses($deleteAllIndustrialClasses)
    {
        if (is_null($deleteAllIndustrialClasses)) {
            throw new \InvalidArgumentException('non-nullable deleteAllIndustrialClasses cannot be null');
        }
        $this->container['deleteAllIndustrialClasses'] = $deleteAllIndustrialClasses;

        return $this;
    }

    /**
     * Gets deleteAllKeywords
     *
     * @return bool|null
     */
    public function getDeleteAllKeywords()
    {
        return $this->container['deleteAllKeywords'];
    }

    /**
     * Sets deleteAllKeywords
     *
     * @param bool|null $deleteAllKeywords Set to true to delete all existing keywords (the Keywords collection for this object should be empty collection when this option is used).
     *
     * @return self
     */
    public function setDeleteAllKeywords($deleteAllKeywords)
    {
        if (is_null($deleteAllKeywords)) {
            throw new \InvalidArgumentException('non-nullable deleteAllKeywords cannot be null');
        }
        $this->container['deleteAllKeywords'] = $deleteAllKeywords;

        return $this;
    }

    /**
     * Gets deleteAllMunicipalities
     *
     * @return bool|null
     */
    public function getDeleteAllMunicipalities()
    {
        return $this->container['deleteAllMunicipalities'];
    }

    /**
     * Sets deleteAllMunicipalities
     *
     * @param bool|null $deleteAllMunicipalities Set to true to delete all existing municipalities (the Municipalities collection for this object should be empty collection when this option is used).
     *
     * @return self
     */
    public function setDeleteAllMunicipalities($deleteAllMunicipalities)
    {
        if (is_null($deleteAllMunicipalities)) {
            throw new \InvalidArgumentException('non-nullable deleteAllMunicipalities cannot be null');
        }
        $this->container['deleteAllMunicipalities'] = $deleteAllMunicipalities;

        return $this;
    }

    /**
     * Gets deleteAllLaws
     *
     * @return bool|null
     */
    public function getDeleteAllLaws()
    {
        return $this->container['deleteAllLaws'];
    }

    /**
     * Sets deleteAllLaws
     *
     * @param bool|null $deleteAllLaws Set to true to delete all existing laws within legislation (the legislation collection for this object should be empty collection when this option is used).
     *
     * @return self
     */
    public function setDeleteAllLaws($deleteAllLaws)
    {
        if (is_null($deleteAllLaws)) {
            throw new \InvalidArgumentException('non-nullable deleteAllLaws cannot be null');
        }
        $this->container['deleteAllLaws'] = $deleteAllLaws;

        return $this;
    }

    /**
     * Gets deleteServiceChargeType
     *
     * @return bool|null
     */
    public function getDeleteServiceChargeType()
    {
        return $this->container['deleteServiceChargeType'];
    }

    /**
     * Sets deleteServiceChargeType
     *
     * @param bool|null $deleteServiceChargeType Set to true to delete service charge type (ServiceChargeType property for this object should be empty when this option is used).
     *
     * @return self
     */
    public function setDeleteServiceChargeType($deleteServiceChargeType)
    {
        if (is_null($deleteServiceChargeType)) {
            throw new \InvalidArgumentException('non-nullable deleteServiceChargeType cannot be null');
        }
        $this->container['deleteServiceChargeType'] = $deleteServiceChargeType;

        return $this;
    }

    /**
     * Gets deleteGeneralDescriptionId
     *
     * @return bool|null
     */
    public function getDeleteGeneralDescriptionId()
    {
        return $this->container['deleteGeneralDescriptionId'];
    }

    /**
     * Sets deleteGeneralDescriptionId
     *
     * @param bool|null $deleteGeneralDescriptionId Set to true to delete statutory service general description (GeneralDescriptionId property for this object should be empty when this option is used).
     *
     * @return self
     */
    public function setDeleteGeneralDescriptionId($deleteGeneralDescriptionId)
    {
        if (is_null($deleteGeneralDescriptionId)) {
            throw new \InvalidArgumentException('non-nullable deleteGeneralDescriptionId cannot be null');
        }
        $this->container['deleteGeneralDescriptionId'] = $deleteGeneralDescriptionId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


