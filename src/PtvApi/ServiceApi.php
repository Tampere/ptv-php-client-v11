<?php
/**
 * ServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * The version of the OpenAPI document: v11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvApi;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Tampere\PtvV11\ApiException;
use Tampere\PtvV11\Configuration;
use Tampere\PtvV11\HeaderSelector;
use Tampere\PtvV11\ObjectSerializer;

/**
 * ServiceApi Class Doc Comment
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV11ServiceActiveGet' => [
            'application/json',
        ],
        'apiV11ServiceActiveIdGet' => [
            'application/json',
        ],
        'apiV11ServiceArchivedListGet' => [
            'application/json',
        ],
        'apiV11ServiceAreaAreaCodeCodeGet' => [
            'application/json',
        ],
        'apiV11ServiceGet' => [
            'application/json',
        ],
        'apiV11ServiceIdGet' => [
            'application/json',
        ],
        'apiV11ServiceIdPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV11ServiceIndustrialClassGet' => [
            'application/json',
        ],
        'apiV11ServiceListAreaAreaCodeCodeGet' => [
            'application/json',
        ],
        'apiV11ServiceListGet' => [
            'application/json',
        ],
        'apiV11ServiceListOrganizationGet' => [
            'application/json',
        ],
        'apiV11ServicePost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV11ServiceServiceChannelServiceChannelIdGet' => [
            'application/json',
        ],
        'apiV11ServiceServiceClassGet' => [
            'application/json',
        ],
        'apiV11ServiceServiceWithGDIdGet' => [
            'application/json',
        ],
        'apiV11ServiceServiceWithGDListGet' => [
            'application/json',
        ],
        'apiV11ServiceSourceIdSourceIdPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV11ServiceTargetGroupGet' => [
            'application/json',
        ],
        'apiV11ServiceTypeTypeGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV11ServiceActiveGet
     *
     * Gets all services within PTV as a list of service ids and names. Also services with draft and modified versions are included.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  NOTE! This is a restricted endpoint.
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceActiveGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServiceActiveGet($date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceActiveGet'][0])
    {
        list($response) = $this->apiV11ServiceActiveGetWithHttpInfo($date, $dateBefore, $page, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServiceActiveGetWithHttpInfo
     *
     * Gets all services within PTV as a list of service ids and names. Also services with draft and modified versions are included.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  NOTE! This is a restricted endpoint.
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceActiveGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServiceActiveGetWithHttpInfo($date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceActiveGet'][0])
    {
        $request = $this->apiV11ServiceActiveGetRequest($date, $dateBefore, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServiceActiveGetAsync
     *
     * Gets all services within PTV as a list of service ids and names. Also services with draft and modified versions are included.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  NOTE! This is a restricted endpoint.
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceActiveGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceActiveGetAsync($date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceActiveGet'][0])
    {
        return $this->apiV11ServiceActiveGetAsyncWithHttpInfo($date, $dateBefore, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServiceActiveGetAsyncWithHttpInfo
     *
     * Gets all services within PTV as a list of service ids and names. Also services with draft and modified versions are included.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  NOTE! This is a restricted endpoint.
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceActiveGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceActiveGetAsyncWithHttpInfo($date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceActiveGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
        $request = $this->apiV11ServiceActiveGetRequest($date, $dateBefore, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServiceActiveGet'
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceActiveGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServiceActiveGetRequest($date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceActiveGet'][0])
    {





        $resourcePath = '/api/v11/Service/active';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateBefore,
            'dateBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ServiceActiveIdGet
     *
     * Fetches all the information related to a single service. Also services with only draft or modified versions are returned.  NOTE! This is a restricted endpoint.
     *
     * @param  string $id Guid (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceActiveIdGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiService|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServiceActiveIdGet($id, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceActiveIdGet'][0])
    {
        list($response) = $this->apiV11ServiceActiveIdGetWithHttpInfo($id, $showHeader, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServiceActiveIdGetWithHttpInfo
     *
     * Fetches all the information related to a single service. Also services with only draft or modified versions are returned.  NOTE! This is a restricted endpoint.
     *
     * @param  string $id Guid (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceActiveIdGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V11VmOpenApiService|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServiceActiveIdGetWithHttpInfo($id, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceActiveIdGet'][0])
    {
        $request = $this->apiV11ServiceActiveIdGetRequest($id, $showHeader, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V11VmOpenApiService', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V11VmOpenApiService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServiceActiveIdGetAsync
     *
     * Fetches all the information related to a single service. Also services with only draft or modified versions are returned.  NOTE! This is a restricted endpoint.
     *
     * @param  string $id Guid (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceActiveIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceActiveIdGetAsync($id, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceActiveIdGet'][0])
    {
        return $this->apiV11ServiceActiveIdGetAsyncWithHttpInfo($id, $showHeader, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServiceActiveIdGetAsyncWithHttpInfo
     *
     * Fetches all the information related to a single service. Also services with only draft or modified versions are returned.  NOTE! This is a restricted endpoint.
     *
     * @param  string $id Guid (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceActiveIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceActiveIdGetAsyncWithHttpInfo($id, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceActiveIdGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
        $request = $this->apiV11ServiceActiveIdGetRequest($id, $showHeader, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServiceActiveIdGet'
     *
     * @param  string $id Guid (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceActiveIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServiceActiveIdGetRequest($id, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceActiveIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV11ServiceActiveIdGet'
            );
        }



        $resourcePath = '/api/v11/Service/active/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $showHeader,
            'showHeader', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ServiceArchivedListGet
     *
     * Fetches automatically/manually archived services
     *
     * @param  ArchivingType $archivingType How service was archived. (required)
     * @param  string $organizationId Return only services belonging to this organization. (required)
     * @param  int $take How many services to return. (required)
     * @param  \DateTime $minArchivingDate Return only services archived after this time.  ISO 8601 format (e.g. 2020-10-26T05:24:11+00:00). (optional)
     * @param  \DateTime $maxArchivingDate Return only services archived before this time.  ISO 8601 format (e.g. 2020-10-26T05:24:11+00:00). (optional)
     * @param  int $skip Skip the first n services. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceArchivedListGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiArchivedServiceBase[]|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServiceArchivedListGet($archivingType, $organizationId, $take, $minArchivingDate = null, $maxArchivingDate = null, $skip = null, string $contentType = self::contentTypes['apiV11ServiceArchivedListGet'][0])
    {
        list($response) = $this->apiV11ServiceArchivedListGetWithHttpInfo($archivingType, $organizationId, $take, $minArchivingDate, $maxArchivingDate, $skip, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServiceArchivedListGetWithHttpInfo
     *
     * Fetches automatically/manually archived services
     *
     * @param  ArchivingType $archivingType How service was archived. (required)
     * @param  string $organizationId Return only services belonging to this organization. (required)
     * @param  int $take How many services to return. (required)
     * @param  \DateTime $minArchivingDate Return only services archived after this time.  ISO 8601 format (e.g. 2020-10-26T05:24:11+00:00). (optional)
     * @param  \DateTime $maxArchivingDate Return only services archived before this time.  ISO 8601 format (e.g. 2020-10-26T05:24:11+00:00). (optional)
     * @param  int $skip Skip the first n services. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceArchivedListGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\VmOpenApiArchivedServiceBase[]|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServiceArchivedListGetWithHttpInfo($archivingType, $organizationId, $take, $minArchivingDate = null, $maxArchivingDate = null, $skip = null, string $contentType = self::contentTypes['apiV11ServiceArchivedListGet'][0])
    {
        $request = $this->apiV11ServiceArchivedListGetRequest($archivingType, $organizationId, $take, $minArchivingDate, $maxArchivingDate, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\VmOpenApiArchivedServiceBase[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\VmOpenApiArchivedServiceBase[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\VmOpenApiArchivedServiceBase[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\VmOpenApiArchivedServiceBase[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\VmOpenApiArchivedServiceBase[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServiceArchivedListGetAsync
     *
     * Fetches automatically/manually archived services
     *
     * @param  ArchivingType $archivingType How service was archived. (required)
     * @param  string $organizationId Return only services belonging to this organization. (required)
     * @param  int $take How many services to return. (required)
     * @param  \DateTime $minArchivingDate Return only services archived after this time.  ISO 8601 format (e.g. 2020-10-26T05:24:11+00:00). (optional)
     * @param  \DateTime $maxArchivingDate Return only services archived before this time.  ISO 8601 format (e.g. 2020-10-26T05:24:11+00:00). (optional)
     * @param  int $skip Skip the first n services. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceArchivedListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceArchivedListGetAsync($archivingType, $organizationId, $take, $minArchivingDate = null, $maxArchivingDate = null, $skip = null, string $contentType = self::contentTypes['apiV11ServiceArchivedListGet'][0])
    {
        return $this->apiV11ServiceArchivedListGetAsyncWithHttpInfo($archivingType, $organizationId, $take, $minArchivingDate, $maxArchivingDate, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServiceArchivedListGetAsyncWithHttpInfo
     *
     * Fetches automatically/manually archived services
     *
     * @param  ArchivingType $archivingType How service was archived. (required)
     * @param  string $organizationId Return only services belonging to this organization. (required)
     * @param  int $take How many services to return. (required)
     * @param  \DateTime $minArchivingDate Return only services archived after this time.  ISO 8601 format (e.g. 2020-10-26T05:24:11+00:00). (optional)
     * @param  \DateTime $maxArchivingDate Return only services archived before this time.  ISO 8601 format (e.g. 2020-10-26T05:24:11+00:00). (optional)
     * @param  int $skip Skip the first n services. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceArchivedListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceArchivedListGetAsyncWithHttpInfo($archivingType, $organizationId, $take, $minArchivingDate = null, $maxArchivingDate = null, $skip = null, string $contentType = self::contentTypes['apiV11ServiceArchivedListGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\VmOpenApiArchivedServiceBase[]';
        $request = $this->apiV11ServiceArchivedListGetRequest($archivingType, $organizationId, $take, $minArchivingDate, $maxArchivingDate, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServiceArchivedListGet'
     *
     * @param  ArchivingType $archivingType How service was archived. (required)
     * @param  string $organizationId Return only services belonging to this organization. (required)
     * @param  int $take How many services to return. (required)
     * @param  \DateTime $minArchivingDate Return only services archived after this time.  ISO 8601 format (e.g. 2020-10-26T05:24:11+00:00). (optional)
     * @param  \DateTime $maxArchivingDate Return only services archived before this time.  ISO 8601 format (e.g. 2020-10-26T05:24:11+00:00). (optional)
     * @param  int $skip Skip the first n services. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceArchivedListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServiceArchivedListGetRequest($archivingType, $organizationId, $take, $minArchivingDate = null, $maxArchivingDate = null, $skip = null, string $contentType = self::contentTypes['apiV11ServiceArchivedListGet'][0])
    {

        // verify the required parameter 'archivingType' is set
        if ($archivingType === null || (is_array($archivingType) && count($archivingType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $archivingType when calling apiV11ServiceArchivedListGet'
            );
        }

        // verify the required parameter 'organizationId' is set
        if ($organizationId === null || (is_array($organizationId) && count($organizationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organizationId when calling apiV11ServiceArchivedListGet'
            );
        }

        // verify the required parameter 'take' is set
        if ($take === null || (is_array($take) && count($take) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $take when calling apiV11ServiceArchivedListGet'
            );
        }
        if ($take > 100) {
            throw new \InvalidArgumentException('invalid value for "$take" when calling ServiceApi.apiV11ServiceArchivedListGet, must be smaller than or equal to 100.');
        }
        if ($take < 0) {
            throw new \InvalidArgumentException('invalid value for "$take" when calling ServiceApi.apiV11ServiceArchivedListGet, must be bigger than or equal to 0.');
        }
        


        if ($skip !== null && $skip > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ServiceApi.apiV11ServiceArchivedListGet, must be smaller than or equal to 2147483647.');
        }
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ServiceApi.apiV11ServiceArchivedListGet, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/api/v11/Service/archived/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $archivingType,
            'ArchivingType', // param base name
            'ArchivingType', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $organizationId,
            'OrganizationId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $minArchivingDate,
            'MinArchivingDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $maxArchivingDate,
            'MaxArchivingDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'Skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'Take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ServiceAreaAreaCodeCodeGet
     *
     * Gets a list of published services related to defined area and code.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $area The area type (required)
     * @param  string $code The code related to area (required)
     * @param  bool $includeWholeCountry Indicates if services marked for whole country (or whole country except Åland) should be included. (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceAreaAreaCodeCodeGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServiceAreaAreaCodeCodeGet($area, $code, $includeWholeCountry = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceAreaAreaCodeCodeGet'][0])
    {
        list($response) = $this->apiV11ServiceAreaAreaCodeCodeGetWithHttpInfo($area, $code, $includeWholeCountry, $date, $dateBefore, $page, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServiceAreaAreaCodeCodeGetWithHttpInfo
     *
     * Gets a list of published services related to defined area and code.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $area The area type (required)
     * @param  string $code The code related to area (required)
     * @param  bool $includeWholeCountry Indicates if services marked for whole country (or whole country except Åland) should be included. (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceAreaAreaCodeCodeGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServiceAreaAreaCodeCodeGetWithHttpInfo($area, $code, $includeWholeCountry = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceAreaAreaCodeCodeGet'][0])
    {
        $request = $this->apiV11ServiceAreaAreaCodeCodeGetRequest($area, $code, $includeWholeCountry, $date, $dateBefore, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServiceAreaAreaCodeCodeGetAsync
     *
     * Gets a list of published services related to defined area and code.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $area The area type (required)
     * @param  string $code The code related to area (required)
     * @param  bool $includeWholeCountry Indicates if services marked for whole country (or whole country except Åland) should be included. (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceAreaAreaCodeCodeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceAreaAreaCodeCodeGetAsync($area, $code, $includeWholeCountry = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceAreaAreaCodeCodeGet'][0])
    {
        return $this->apiV11ServiceAreaAreaCodeCodeGetAsyncWithHttpInfo($area, $code, $includeWholeCountry, $date, $dateBefore, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServiceAreaAreaCodeCodeGetAsyncWithHttpInfo
     *
     * Gets a list of published services related to defined area and code.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $area The area type (required)
     * @param  string $code The code related to area (required)
     * @param  bool $includeWholeCountry Indicates if services marked for whole country (or whole country except Åland) should be included. (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceAreaAreaCodeCodeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceAreaAreaCodeCodeGetAsyncWithHttpInfo($area, $code, $includeWholeCountry = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceAreaAreaCodeCodeGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
        $request = $this->apiV11ServiceAreaAreaCodeCodeGetRequest($area, $code, $includeWholeCountry, $date, $dateBefore, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServiceAreaAreaCodeCodeGet'
     *
     * @param  string $area The area type (required)
     * @param  string $code The code related to area (required)
     * @param  bool $includeWholeCountry Indicates if services marked for whole country (or whole country except Åland) should be included. (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceAreaAreaCodeCodeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServiceAreaAreaCodeCodeGetRequest($area, $code, $includeWholeCountry = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceAreaAreaCodeCodeGet'][0])
    {

        // verify the required parameter 'area' is set
        if ($area === null || (is_array($area) && count($area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $area when calling apiV11ServiceAreaAreaCodeCodeGet'
            );
        }

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling apiV11ServiceAreaAreaCodeCodeGet'
            );
        }






        $resourcePath = '/api/v11/Service/area/{area}/code/{code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeWholeCountry,
            'includeWholeCountry', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateBefore,
            'dateBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($area !== null) {
            $resourcePath = str_replace(
                '{' . 'area' . '}',
                ObjectSerializer::toPathValue($area),
                $resourcePath
            );
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ServiceGet
     *
     * Gets all the published services within PTV as a list of service ids and names.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  Archived items can be fetched by setting status parameter as &#39;Archived&#39; and withdrawn items can be fetched by setting status parameter as &#39;Withdrawn&#39;.
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published, archived or withdrawn state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServiceGet($date = null, $dateBefore = null, $page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11ServiceGet'][0])
    {
        list($response) = $this->apiV11ServiceGetWithHttpInfo($date, $dateBefore, $page, $status, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServiceGetWithHttpInfo
     *
     * Gets all the published services within PTV as a list of service ids and names.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  Archived items can be fetched by setting status parameter as &#39;Archived&#39; and withdrawn items can be fetched by setting status parameter as &#39;Withdrawn&#39;.
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published, archived or withdrawn state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServiceGetWithHttpInfo($date = null, $dateBefore = null, $page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11ServiceGet'][0])
    {
        $request = $this->apiV11ServiceGetRequest($date, $dateBefore, $page, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServiceGetAsync
     *
     * Gets all the published services within PTV as a list of service ids and names.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  Archived items can be fetched by setting status parameter as &#39;Archived&#39; and withdrawn items can be fetched by setting status parameter as &#39;Withdrawn&#39;.
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published, archived or withdrawn state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceGetAsync($date = null, $dateBefore = null, $page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11ServiceGet'][0])
    {
        return $this->apiV11ServiceGetAsyncWithHttpInfo($date, $dateBefore, $page, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServiceGetAsyncWithHttpInfo
     *
     * Gets all the published services within PTV as a list of service ids and names.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  Archived items can be fetched by setting status parameter as &#39;Archived&#39; and withdrawn items can be fetched by setting status parameter as &#39;Withdrawn&#39;.
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published, archived or withdrawn state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceGetAsyncWithHttpInfo($date = null, $dateBefore = null, $page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11ServiceGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
        $request = $this->apiV11ServiceGetRequest($date, $dateBefore, $page, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServiceGet'
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published, archived or withdrawn state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServiceGetRequest($date = null, $dateBefore = null, $page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11ServiceGet'][0])
    {






        $resourcePath = '/api/v11/Service';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateBefore,
            'dateBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ServiceIdGet
     *
     * Fetches all the information related to a single service.
     *
     * @param  string $id Guid (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceIdGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiService|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServiceIdGet($id, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceIdGet'][0])
    {
        list($response) = $this->apiV11ServiceIdGetWithHttpInfo($id, $showHeader, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServiceIdGetWithHttpInfo
     *
     * Fetches all the information related to a single service.
     *
     * @param  string $id Guid (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceIdGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V11VmOpenApiService|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServiceIdGetWithHttpInfo($id, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceIdGet'][0])
    {
        $request = $this->apiV11ServiceIdGetRequest($id, $showHeader, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V11VmOpenApiService', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V11VmOpenApiService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServiceIdGetAsync
     *
     * Fetches all the information related to a single service.
     *
     * @param  string $id Guid (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceIdGetAsync($id, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceIdGet'][0])
    {
        return $this->apiV11ServiceIdGetAsyncWithHttpInfo($id, $showHeader, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServiceIdGetAsyncWithHttpInfo
     *
     * Fetches all the information related to a single service.
     *
     * @param  string $id Guid (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceIdGetAsyncWithHttpInfo($id, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceIdGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
        $request = $this->apiV11ServiceIdGetRequest($id, $showHeader, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServiceIdGet'
     *
     * @param  string $id Guid (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServiceIdGetRequest($id, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV11ServiceIdGet'
            );
        }



        $resourcePath = '/api/v11/Service/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $showHeader,
            'showHeader', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ServiceIdPut
     *
     * Updates the defined service with the data provided as input.
     *
     * @param  string $id Service identifier (required)
     * @param  bool $attachProposedChannels Indicates if service channels attached into general description should automatically be attached into the service. (optional)
     * @param  \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceInBase $v9VmOpenApiServiceInBase The service data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceIdPut'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiService|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServiceIdPut($id, $attachProposedChannels = null, $v9VmOpenApiServiceInBase = null, string $contentType = self::contentTypes['apiV11ServiceIdPut'][0])
    {
        list($response) = $this->apiV11ServiceIdPutWithHttpInfo($id, $attachProposedChannels, $v9VmOpenApiServiceInBase, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServiceIdPutWithHttpInfo
     *
     * Updates the defined service with the data provided as input.
     *
     * @param  string $id Service identifier (required)
     * @param  bool $attachProposedChannels Indicates if service channels attached into general description should automatically be attached into the service. (optional)
     * @param  \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceInBase $v9VmOpenApiServiceInBase The service data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceIdPut'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V11VmOpenApiService|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServiceIdPutWithHttpInfo($id, $attachProposedChannels = null, $v9VmOpenApiServiceInBase = null, string $contentType = self::contentTypes['apiV11ServiceIdPut'][0])
    {
        $request = $this->apiV11ServiceIdPutRequest($id, $attachProposedChannels, $v9VmOpenApiServiceInBase, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V11VmOpenApiService', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V11VmOpenApiService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServiceIdPutAsync
     *
     * Updates the defined service with the data provided as input.
     *
     * @param  string $id Service identifier (required)
     * @param  bool $attachProposedChannels Indicates if service channels attached into general description should automatically be attached into the service. (optional)
     * @param  \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceInBase $v9VmOpenApiServiceInBase The service data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceIdPutAsync($id, $attachProposedChannels = null, $v9VmOpenApiServiceInBase = null, string $contentType = self::contentTypes['apiV11ServiceIdPut'][0])
    {
        return $this->apiV11ServiceIdPutAsyncWithHttpInfo($id, $attachProposedChannels, $v9VmOpenApiServiceInBase, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServiceIdPutAsyncWithHttpInfo
     *
     * Updates the defined service with the data provided as input.
     *
     * @param  string $id Service identifier (required)
     * @param  bool $attachProposedChannels Indicates if service channels attached into general description should automatically be attached into the service. (optional)
     * @param  \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceInBase $v9VmOpenApiServiceInBase The service data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceIdPutAsyncWithHttpInfo($id, $attachProposedChannels = null, $v9VmOpenApiServiceInBase = null, string $contentType = self::contentTypes['apiV11ServiceIdPut'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
        $request = $this->apiV11ServiceIdPutRequest($id, $attachProposedChannels, $v9VmOpenApiServiceInBase, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServiceIdPut'
     *
     * @param  string $id Service identifier (required)
     * @param  bool $attachProposedChannels Indicates if service channels attached into general description should automatically be attached into the service. (optional)
     * @param  \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceInBase $v9VmOpenApiServiceInBase The service data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServiceIdPutRequest($id, $attachProposedChannels = null, $v9VmOpenApiServiceInBase = null, string $contentType = self::contentTypes['apiV11ServiceIdPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV11ServiceIdPut'
            );
        }




        $resourcePath = '/api/v11/Service/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $attachProposedChannels,
            'attachProposedChannels', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v9VmOpenApiServiceInBase)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v9VmOpenApiServiceInBase));
            } else {
                $httpBody = $v9VmOpenApiServiceInBase;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ServiceIndustrialClassGet
     *
     * Gets a list of published services for defined industrial class.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $uri Industrial class uri, e.g. http://www.stat.fi/meta/luokitukset/toimiala/001-2008/46909 (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceIndustrialClassGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServiceIndustrialClassGet($uri = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceIndustrialClassGet'][0])
    {
        list($response) = $this->apiV11ServiceIndustrialClassGetWithHttpInfo($uri, $date, $dateBefore, $page, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServiceIndustrialClassGetWithHttpInfo
     *
     * Gets a list of published services for defined industrial class.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $uri Industrial class uri, e.g. http://www.stat.fi/meta/luokitukset/toimiala/001-2008/46909 (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceIndustrialClassGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServiceIndustrialClassGetWithHttpInfo($uri = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceIndustrialClassGet'][0])
    {
        $request = $this->apiV11ServiceIndustrialClassGetRequest($uri, $date, $dateBefore, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServiceIndustrialClassGetAsync
     *
     * Gets a list of published services for defined industrial class.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $uri Industrial class uri, e.g. http://www.stat.fi/meta/luokitukset/toimiala/001-2008/46909 (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceIndustrialClassGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceIndustrialClassGetAsync($uri = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceIndustrialClassGet'][0])
    {
        return $this->apiV11ServiceIndustrialClassGetAsyncWithHttpInfo($uri, $date, $dateBefore, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServiceIndustrialClassGetAsyncWithHttpInfo
     *
     * Gets a list of published services for defined industrial class.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $uri Industrial class uri, e.g. http://www.stat.fi/meta/luokitukset/toimiala/001-2008/46909 (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceIndustrialClassGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceIndustrialClassGetAsyncWithHttpInfo($uri = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceIndustrialClassGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
        $request = $this->apiV11ServiceIndustrialClassGetRequest($uri, $date, $dateBefore, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServiceIndustrialClassGet'
     *
     * @param  string $uri Industrial class uri, e.g. http://www.stat.fi/meta/luokitukset/toimiala/001-2008/46909 (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceIndustrialClassGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServiceIndustrialClassGetRequest($uri = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceIndustrialClassGet'][0])
    {






        $resourcePath = '/api/v11/Service/industrialClass';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $uri,
            'uri', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateBefore,
            'dateBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ServiceListAreaAreaCodeCodeGet
     *
     * Fetches all the information of published services related to certain area and code.  User can set serviceWithGD parameter to true to include possible attached general description data into the service data.  In this case general description related descriptions are marked with prefix &#39;GD_&#39; to separate them from service related descriptions.
     *
     * @param  string $area The area type. (required)
     * @param  string $code The code related to area. (required)
     * @param  bool $includeWholeCountry Indicates if services marked to provide services for whole country (or whole country except Åland) should be included. (optional, default to false)
     * @param  bool $serviceWithGD Indicates if general description data should be attached within the service data. (optional, default to false)
     * @param  int $page The page to be fetched. (optional, default to 1)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceListAreaAreaCodeCodeGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiServicesWithPaging|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServiceListAreaAreaCodeCodeGet($area, $code, $includeWholeCountry = false, $serviceWithGD = false, $page = 1, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceListAreaAreaCodeCodeGet'][0])
    {
        list($response) = $this->apiV11ServiceListAreaAreaCodeCodeGetWithHttpInfo($area, $code, $includeWholeCountry, $serviceWithGD, $page, $showHeader, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServiceListAreaAreaCodeCodeGetWithHttpInfo
     *
     * Fetches all the information of published services related to certain area and code.  User can set serviceWithGD parameter to true to include possible attached general description data into the service data.  In this case general description related descriptions are marked with prefix &#39;GD_&#39; to separate them from service related descriptions.
     *
     * @param  string $area The area type. (required)
     * @param  string $code The code related to area. (required)
     * @param  bool $includeWholeCountry Indicates if services marked to provide services for whole country (or whole country except Åland) should be included. (optional, default to false)
     * @param  bool $serviceWithGD Indicates if general description data should be attached within the service data. (optional, default to false)
     * @param  int $page The page to be fetched. (optional, default to 1)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceListAreaAreaCodeCodeGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V11VmOpenApiServicesWithPaging|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServiceListAreaAreaCodeCodeGetWithHttpInfo($area, $code, $includeWholeCountry = false, $serviceWithGD = false, $page = 1, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceListAreaAreaCodeCodeGet'][0])
    {
        $request = $this->apiV11ServiceListAreaAreaCodeCodeGetRequest($area, $code, $includeWholeCountry, $serviceWithGD, $page, $showHeader, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiServicesWithPaging' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiServicesWithPaging' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V11VmOpenApiServicesWithPaging', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiServicesWithPaging';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V11VmOpenApiServicesWithPaging',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServiceListAreaAreaCodeCodeGetAsync
     *
     * Fetches all the information of published services related to certain area and code.  User can set serviceWithGD parameter to true to include possible attached general description data into the service data.  In this case general description related descriptions are marked with prefix &#39;GD_&#39; to separate them from service related descriptions.
     *
     * @param  string $area The area type. (required)
     * @param  string $code The code related to area. (required)
     * @param  bool $includeWholeCountry Indicates if services marked to provide services for whole country (or whole country except Åland) should be included. (optional, default to false)
     * @param  bool $serviceWithGD Indicates if general description data should be attached within the service data. (optional, default to false)
     * @param  int $page The page to be fetched. (optional, default to 1)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceListAreaAreaCodeCodeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceListAreaAreaCodeCodeGetAsync($area, $code, $includeWholeCountry = false, $serviceWithGD = false, $page = 1, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceListAreaAreaCodeCodeGet'][0])
    {
        return $this->apiV11ServiceListAreaAreaCodeCodeGetAsyncWithHttpInfo($area, $code, $includeWholeCountry, $serviceWithGD, $page, $showHeader, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServiceListAreaAreaCodeCodeGetAsyncWithHttpInfo
     *
     * Fetches all the information of published services related to certain area and code.  User can set serviceWithGD parameter to true to include possible attached general description data into the service data.  In this case general description related descriptions are marked with prefix &#39;GD_&#39; to separate them from service related descriptions.
     *
     * @param  string $area The area type. (required)
     * @param  string $code The code related to area. (required)
     * @param  bool $includeWholeCountry Indicates if services marked to provide services for whole country (or whole country except Åland) should be included. (optional, default to false)
     * @param  bool $serviceWithGD Indicates if general description data should be attached within the service data. (optional, default to false)
     * @param  int $page The page to be fetched. (optional, default to 1)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceListAreaAreaCodeCodeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceListAreaAreaCodeCodeGetAsyncWithHttpInfo($area, $code, $includeWholeCountry = false, $serviceWithGD = false, $page = 1, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceListAreaAreaCodeCodeGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiServicesWithPaging';
        $request = $this->apiV11ServiceListAreaAreaCodeCodeGetRequest($area, $code, $includeWholeCountry, $serviceWithGD, $page, $showHeader, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServiceListAreaAreaCodeCodeGet'
     *
     * @param  string $area The area type. (required)
     * @param  string $code The code related to area. (required)
     * @param  bool $includeWholeCountry Indicates if services marked to provide services for whole country (or whole country except Åland) should be included. (optional, default to false)
     * @param  bool $serviceWithGD Indicates if general description data should be attached within the service data. (optional, default to false)
     * @param  int $page The page to be fetched. (optional, default to 1)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceListAreaAreaCodeCodeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServiceListAreaAreaCodeCodeGetRequest($area, $code, $includeWholeCountry = false, $serviceWithGD = false, $page = 1, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceListAreaAreaCodeCodeGet'][0])
    {

        // verify the required parameter 'area' is set
        if ($area === null || (is_array($area) && count($area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $area when calling apiV11ServiceListAreaAreaCodeCodeGet'
            );
        }

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling apiV11ServiceListAreaAreaCodeCodeGet'
            );
        }






        $resourcePath = '/api/v11/Service/list/area/{area}/code/{code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeWholeCountry,
            'includeWholeCountry', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serviceWithGD,
            'serviceWithGD', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $showHeader,
            'showHeader', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($area !== null) {
            $resourcePath = str_replace(
                '{' . 'area' . '}',
                ObjectSerializer::toPathValue($area),
                $resourcePath
            );
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ServiceListGet
     *
     * Fetches all the information related to requested services.
     *
     * @param  string $guids Comma separated list of guids. Max 100 can be added into list. (optional)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceListGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiService[]|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServiceListGet($guids = null, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceListGet'][0])
    {
        list($response) = $this->apiV11ServiceListGetWithHttpInfo($guids, $showHeader, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServiceListGetWithHttpInfo
     *
     * Fetches all the information related to requested services.
     *
     * @param  string $guids Comma separated list of guids. Max 100 can be added into list. (optional)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceListGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V11VmOpenApiService[]|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServiceListGetWithHttpInfo($guids = null, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceListGet'][0])
    {
        $request = $this->apiV11ServiceListGetRequest($guids, $showHeader, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V11VmOpenApiService[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V11VmOpenApiService[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServiceListGetAsync
     *
     * Fetches all the information related to requested services.
     *
     * @param  string $guids Comma separated list of guids. Max 100 can be added into list. (optional)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceListGetAsync($guids = null, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceListGet'][0])
    {
        return $this->apiV11ServiceListGetAsyncWithHttpInfo($guids, $showHeader, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServiceListGetAsyncWithHttpInfo
     *
     * Fetches all the information related to requested services.
     *
     * @param  string $guids Comma separated list of guids. Max 100 can be added into list. (optional)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceListGetAsyncWithHttpInfo($guids = null, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceListGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService[]';
        $request = $this->apiV11ServiceListGetRequest($guids, $showHeader, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServiceListGet'
     *
     * @param  string $guids Comma separated list of guids. Max 100 can be added into list. (optional)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServiceListGetRequest($guids = null, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceListGet'][0])
    {




        $resourcePath = '/api/v11/Service/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $guids,
            'guids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $showHeader,
            'showHeader', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ServiceListOrganizationGet
     *
     * Fetches all the information of the services related to certain organization. Either organizationId, code or oid needs to be added as a parameter.  User can also set serviceWithGD parameter to true to include possible attached general description data into the service data.  In this case general description related descriptions are marked with prefix &#39;GD_&#39; to separate them from service related descriptions.
     *
     * @param  string $organizationId Organization guid. (optional)
     * @param  string $code Organization business code. (optional)
     * @param  string $oid Organization oid. (optional)
     * @param  bool $serviceWithGD Indicates if general description data should be attached within the service data. (optional, default to false)
     * @param  int $page The page to be fetched. (optional, default to 1)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceListOrganizationGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiServicesWithPaging|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServiceListOrganizationGet($organizationId = null, $code = null, $oid = null, $serviceWithGD = false, $page = 1, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceListOrganizationGet'][0])
    {
        list($response) = $this->apiV11ServiceListOrganizationGetWithHttpInfo($organizationId, $code, $oid, $serviceWithGD, $page, $showHeader, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServiceListOrganizationGetWithHttpInfo
     *
     * Fetches all the information of the services related to certain organization. Either organizationId, code or oid needs to be added as a parameter.  User can also set serviceWithGD parameter to true to include possible attached general description data into the service data.  In this case general description related descriptions are marked with prefix &#39;GD_&#39; to separate them from service related descriptions.
     *
     * @param  string $organizationId Organization guid. (optional)
     * @param  string $code Organization business code. (optional)
     * @param  string $oid Organization oid. (optional)
     * @param  bool $serviceWithGD Indicates if general description data should be attached within the service data. (optional, default to false)
     * @param  int $page The page to be fetched. (optional, default to 1)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceListOrganizationGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V11VmOpenApiServicesWithPaging|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServiceListOrganizationGetWithHttpInfo($organizationId = null, $code = null, $oid = null, $serviceWithGD = false, $page = 1, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceListOrganizationGet'][0])
    {
        $request = $this->apiV11ServiceListOrganizationGetRequest($organizationId, $code, $oid, $serviceWithGD, $page, $showHeader, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiServicesWithPaging' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiServicesWithPaging' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V11VmOpenApiServicesWithPaging', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiServicesWithPaging';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V11VmOpenApiServicesWithPaging',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServiceListOrganizationGetAsync
     *
     * Fetches all the information of the services related to certain organization. Either organizationId, code or oid needs to be added as a parameter.  User can also set serviceWithGD parameter to true to include possible attached general description data into the service data.  In this case general description related descriptions are marked with prefix &#39;GD_&#39; to separate them from service related descriptions.
     *
     * @param  string $organizationId Organization guid. (optional)
     * @param  string $code Organization business code. (optional)
     * @param  string $oid Organization oid. (optional)
     * @param  bool $serviceWithGD Indicates if general description data should be attached within the service data. (optional, default to false)
     * @param  int $page The page to be fetched. (optional, default to 1)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceListOrganizationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceListOrganizationGetAsync($organizationId = null, $code = null, $oid = null, $serviceWithGD = false, $page = 1, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceListOrganizationGet'][0])
    {
        return $this->apiV11ServiceListOrganizationGetAsyncWithHttpInfo($organizationId, $code, $oid, $serviceWithGD, $page, $showHeader, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServiceListOrganizationGetAsyncWithHttpInfo
     *
     * Fetches all the information of the services related to certain organization. Either organizationId, code or oid needs to be added as a parameter.  User can also set serviceWithGD parameter to true to include possible attached general description data into the service data.  In this case general description related descriptions are marked with prefix &#39;GD_&#39; to separate them from service related descriptions.
     *
     * @param  string $organizationId Organization guid. (optional)
     * @param  string $code Organization business code. (optional)
     * @param  string $oid Organization oid. (optional)
     * @param  bool $serviceWithGD Indicates if general description data should be attached within the service data. (optional, default to false)
     * @param  int $page The page to be fetched. (optional, default to 1)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceListOrganizationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceListOrganizationGetAsyncWithHttpInfo($organizationId = null, $code = null, $oid = null, $serviceWithGD = false, $page = 1, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceListOrganizationGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiServicesWithPaging';
        $request = $this->apiV11ServiceListOrganizationGetRequest($organizationId, $code, $oid, $serviceWithGD, $page, $showHeader, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServiceListOrganizationGet'
     *
     * @param  string $organizationId Organization guid. (optional)
     * @param  string $code Organization business code. (optional)
     * @param  string $oid Organization oid. (optional)
     * @param  bool $serviceWithGD Indicates if general description data should be attached within the service data. (optional, default to false)
     * @param  int $page The page to be fetched. (optional, default to 1)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceListOrganizationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServiceListOrganizationGetRequest($organizationId = null, $code = null, $oid = null, $serviceWithGD = false, $page = 1, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceListOrganizationGet'][0])
    {








        $resourcePath = '/api/v11/Service/list/organization';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $organizationId,
            'organizationId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $code,
            'code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $oid,
            'oid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serviceWithGD,
            'serviceWithGD', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $showHeader,
            'showHeader', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ServicePost
     *
     * Creates a new service with the data provided as input.
     *
     * @param  bool $attachProposedChannels Indicates if service channels attached into general description should automatically be attached into the service. (optional)
     * @param  \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceIn $v9VmOpenApiServiceIn The service data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServicePost'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiService|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServicePost($attachProposedChannels = null, $v9VmOpenApiServiceIn = null, string $contentType = self::contentTypes['apiV11ServicePost'][0])
    {
        list($response) = $this->apiV11ServicePostWithHttpInfo($attachProposedChannels, $v9VmOpenApiServiceIn, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServicePostWithHttpInfo
     *
     * Creates a new service with the data provided as input.
     *
     * @param  bool $attachProposedChannels Indicates if service channels attached into general description should automatically be attached into the service. (optional)
     * @param  \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceIn $v9VmOpenApiServiceIn The service data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServicePost'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V11VmOpenApiService|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServicePostWithHttpInfo($attachProposedChannels = null, $v9VmOpenApiServiceIn = null, string $contentType = self::contentTypes['apiV11ServicePost'][0])
    {
        $request = $this->apiV11ServicePostRequest($attachProposedChannels, $v9VmOpenApiServiceIn, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V11VmOpenApiService', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V11VmOpenApiService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServicePostAsync
     *
     * Creates a new service with the data provided as input.
     *
     * @param  bool $attachProposedChannels Indicates if service channels attached into general description should automatically be attached into the service. (optional)
     * @param  \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceIn $v9VmOpenApiServiceIn The service data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServicePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServicePostAsync($attachProposedChannels = null, $v9VmOpenApiServiceIn = null, string $contentType = self::contentTypes['apiV11ServicePost'][0])
    {
        return $this->apiV11ServicePostAsyncWithHttpInfo($attachProposedChannels, $v9VmOpenApiServiceIn, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServicePostAsyncWithHttpInfo
     *
     * Creates a new service with the data provided as input.
     *
     * @param  bool $attachProposedChannels Indicates if service channels attached into general description should automatically be attached into the service. (optional)
     * @param  \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceIn $v9VmOpenApiServiceIn The service data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServicePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServicePostAsyncWithHttpInfo($attachProposedChannels = null, $v9VmOpenApiServiceIn = null, string $contentType = self::contentTypes['apiV11ServicePost'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
        $request = $this->apiV11ServicePostRequest($attachProposedChannels, $v9VmOpenApiServiceIn, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServicePost'
     *
     * @param  bool $attachProposedChannels Indicates if service channels attached into general description should automatically be attached into the service. (optional)
     * @param  \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceIn $v9VmOpenApiServiceIn The service data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServicePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServicePostRequest($attachProposedChannels = null, $v9VmOpenApiServiceIn = null, string $contentType = self::contentTypes['apiV11ServicePost'][0])
    {




        $resourcePath = '/api/v11/Service';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $attachProposedChannels,
            'attachProposedChannels', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v9VmOpenApiServiceIn)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v9VmOpenApiServiceIn));
            } else {
                $httpBody = $v9VmOpenApiServiceIn;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ServiceServiceChannelServiceChannelIdGet
     *
     * Gets a list of published services for defined service channel.  Services joined to service channel after certain date can be fetched by adding date as query string parameter.  Services joined to service channel before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $serviceChannelId Guid (required)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceChannelServiceChannelIdGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServiceServiceChannelServiceChannelIdGet($serviceChannelId, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceServiceChannelServiceChannelIdGet'][0])
    {
        list($response) = $this->apiV11ServiceServiceChannelServiceChannelIdGetWithHttpInfo($serviceChannelId, $date, $dateBefore, $page, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServiceServiceChannelServiceChannelIdGetWithHttpInfo
     *
     * Gets a list of published services for defined service channel.  Services joined to service channel after certain date can be fetched by adding date as query string parameter.  Services joined to service channel before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $serviceChannelId Guid (required)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceChannelServiceChannelIdGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServiceServiceChannelServiceChannelIdGetWithHttpInfo($serviceChannelId, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceServiceChannelServiceChannelIdGet'][0])
    {
        $request = $this->apiV11ServiceServiceChannelServiceChannelIdGetRequest($serviceChannelId, $date, $dateBefore, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServiceServiceChannelServiceChannelIdGetAsync
     *
     * Gets a list of published services for defined service channel.  Services joined to service channel after certain date can be fetched by adding date as query string parameter.  Services joined to service channel before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $serviceChannelId Guid (required)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceChannelServiceChannelIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceServiceChannelServiceChannelIdGetAsync($serviceChannelId, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceServiceChannelServiceChannelIdGet'][0])
    {
        return $this->apiV11ServiceServiceChannelServiceChannelIdGetAsyncWithHttpInfo($serviceChannelId, $date, $dateBefore, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServiceServiceChannelServiceChannelIdGetAsyncWithHttpInfo
     *
     * Gets a list of published services for defined service channel.  Services joined to service channel after certain date can be fetched by adding date as query string parameter.  Services joined to service channel before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $serviceChannelId Guid (required)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceChannelServiceChannelIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceServiceChannelServiceChannelIdGetAsyncWithHttpInfo($serviceChannelId, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceServiceChannelServiceChannelIdGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
        $request = $this->apiV11ServiceServiceChannelServiceChannelIdGetRequest($serviceChannelId, $date, $dateBefore, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServiceServiceChannelServiceChannelIdGet'
     *
     * @param  string $serviceChannelId Guid (required)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceChannelServiceChannelIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServiceServiceChannelServiceChannelIdGetRequest($serviceChannelId, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceServiceChannelServiceChannelIdGet'][0])
    {

        // verify the required parameter 'serviceChannelId' is set
        if ($serviceChannelId === null || (is_array($serviceChannelId) && count($serviceChannelId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serviceChannelId when calling apiV11ServiceServiceChannelServiceChannelIdGet'
            );
        }





        $resourcePath = '/api/v11/Service/serviceChannel/{serviceChannelId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateBefore,
            'dateBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($serviceChannelId !== null) {
            $resourcePath = str_replace(
                '{' . 'serviceChannelId' . '}',
                ObjectSerializer::toPathValue($serviceChannelId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ServiceServiceClassGet
     *
     * Gets a list of published services for defined service class.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $uri Service class uri, e.g. http://urn.fi/URN:NBN:fi:au:ptvl:v1065 (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceClassGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServiceServiceClassGet($uri = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceServiceClassGet'][0])
    {
        list($response) = $this->apiV11ServiceServiceClassGetWithHttpInfo($uri, $date, $dateBefore, $page, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServiceServiceClassGetWithHttpInfo
     *
     * Gets a list of published services for defined service class.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $uri Service class uri, e.g. http://urn.fi/URN:NBN:fi:au:ptvl:v1065 (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceClassGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServiceServiceClassGetWithHttpInfo($uri = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceServiceClassGet'][0])
    {
        $request = $this->apiV11ServiceServiceClassGetRequest($uri, $date, $dateBefore, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServiceServiceClassGetAsync
     *
     * Gets a list of published services for defined service class.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $uri Service class uri, e.g. http://urn.fi/URN:NBN:fi:au:ptvl:v1065 (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceClassGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceServiceClassGetAsync($uri = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceServiceClassGet'][0])
    {
        return $this->apiV11ServiceServiceClassGetAsyncWithHttpInfo($uri, $date, $dateBefore, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServiceServiceClassGetAsyncWithHttpInfo
     *
     * Gets a list of published services for defined service class.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $uri Service class uri, e.g. http://urn.fi/URN:NBN:fi:au:ptvl:v1065 (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceClassGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceServiceClassGetAsyncWithHttpInfo($uri = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceServiceClassGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
        $request = $this->apiV11ServiceServiceClassGetRequest($uri, $date, $dateBefore, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServiceServiceClassGet'
     *
     * @param  string $uri Service class uri, e.g. http://urn.fi/URN:NBN:fi:au:ptvl:v1065 (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceClassGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServiceServiceClassGetRequest($uri = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceServiceClassGet'][0])
    {






        $resourcePath = '/api/v11/Service/serviceClass';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $uri,
            'uri', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateBefore,
            'dateBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ServiceServiceWithGDIdGet
     *
     * Fetches all the information related to a single service. If general description is attached also general description data is returned within the service data.  General description related descriptions are marked with prefix &#39;GD_&#39; to separate them from service related descriptions.
     *
     * @param  string $id Guid (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceWithGDIdGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiService|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServiceServiceWithGDIdGet($id, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceServiceWithGDIdGet'][0])
    {
        list($response) = $this->apiV11ServiceServiceWithGDIdGetWithHttpInfo($id, $showHeader, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServiceServiceWithGDIdGetWithHttpInfo
     *
     * Fetches all the information related to a single service. If general description is attached also general description data is returned within the service data.  General description related descriptions are marked with prefix &#39;GD_&#39; to separate them from service related descriptions.
     *
     * @param  string $id Guid (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceWithGDIdGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V11VmOpenApiService|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServiceServiceWithGDIdGetWithHttpInfo($id, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceServiceWithGDIdGet'][0])
    {
        $request = $this->apiV11ServiceServiceWithGDIdGetRequest($id, $showHeader, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V11VmOpenApiService', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V11VmOpenApiService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServiceServiceWithGDIdGetAsync
     *
     * Fetches all the information related to a single service. If general description is attached also general description data is returned within the service data.  General description related descriptions are marked with prefix &#39;GD_&#39; to separate them from service related descriptions.
     *
     * @param  string $id Guid (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceWithGDIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceServiceWithGDIdGetAsync($id, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceServiceWithGDIdGet'][0])
    {
        return $this->apiV11ServiceServiceWithGDIdGetAsyncWithHttpInfo($id, $showHeader, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServiceServiceWithGDIdGetAsyncWithHttpInfo
     *
     * Fetches all the information related to a single service. If general description is attached also general description data is returned within the service data.  General description related descriptions are marked with prefix &#39;GD_&#39; to separate them from service related descriptions.
     *
     * @param  string $id Guid (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceWithGDIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceServiceWithGDIdGetAsyncWithHttpInfo($id, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceServiceWithGDIdGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
        $request = $this->apiV11ServiceServiceWithGDIdGetRequest($id, $showHeader, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServiceServiceWithGDIdGet'
     *
     * @param  string $id Guid (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceWithGDIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServiceServiceWithGDIdGetRequest($id, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceServiceWithGDIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV11ServiceServiceWithGDIdGet'
            );
        }



        $resourcePath = '/api/v11/Service/serviceWithGD/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $showHeader,
            'showHeader', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ServiceServiceWithGDListGet
     *
     * Fetches all the information related to requests services. If general description is attached to a service also general description data is returned within the service data.  General description related descriptions are marked with prefix &#39;GD_&#39; to separate them from service related descriptions.
     *
     * @param  string $guids Comma separated list of guids. Max 100 can be added into list. (optional)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceWithGDListGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiService[]|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServiceServiceWithGDListGet($guids = null, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceServiceWithGDListGet'][0])
    {
        list($response) = $this->apiV11ServiceServiceWithGDListGetWithHttpInfo($guids, $showHeader, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServiceServiceWithGDListGetWithHttpInfo
     *
     * Fetches all the information related to requests services. If general description is attached to a service also general description data is returned within the service data.  General description related descriptions are marked with prefix &#39;GD_&#39; to separate them from service related descriptions.
     *
     * @param  string $guids Comma separated list of guids. Max 100 can be added into list. (optional)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceWithGDListGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V11VmOpenApiService[]|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServiceServiceWithGDListGetWithHttpInfo($guids = null, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceServiceWithGDListGet'][0])
    {
        $request = $this->apiV11ServiceServiceWithGDListGetRequest($guids, $showHeader, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V11VmOpenApiService[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V11VmOpenApiService[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServiceServiceWithGDListGetAsync
     *
     * Fetches all the information related to requests services. If general description is attached to a service also general description data is returned within the service data.  General description related descriptions are marked with prefix &#39;GD_&#39; to separate them from service related descriptions.
     *
     * @param  string $guids Comma separated list of guids. Max 100 can be added into list. (optional)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceWithGDListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceServiceWithGDListGetAsync($guids = null, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceServiceWithGDListGet'][0])
    {
        return $this->apiV11ServiceServiceWithGDListGetAsyncWithHttpInfo($guids, $showHeader, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServiceServiceWithGDListGetAsyncWithHttpInfo
     *
     * Fetches all the information related to requests services. If general description is attached to a service also general description data is returned within the service data.  General description related descriptions are marked with prefix &#39;GD_&#39; to separate them from service related descriptions.
     *
     * @param  string $guids Comma separated list of guids. Max 100 can be added into list. (optional)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceWithGDListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceServiceWithGDListGetAsyncWithHttpInfo($guids = null, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceServiceWithGDListGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService[]';
        $request = $this->apiV11ServiceServiceWithGDListGetRequest($guids, $showHeader, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServiceServiceWithGDListGet'
     *
     * @param  string $guids Comma separated list of guids. Max 100 can be added into list. (optional)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceServiceWithGDListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServiceServiceWithGDListGetRequest($guids = null, $showHeader = false, string $contentType = self::contentTypes['apiV11ServiceServiceWithGDListGet'][0])
    {




        $resourcePath = '/api/v11/Service/serviceWithGD/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $guids,
            'guids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $showHeader,
            'showHeader', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ServiceSourceIdSourceIdPut
     *
     * Updates the defined service with the data provided as input.
     *
     * @param  string $sourceId External source identifier (required)
     * @param  bool $attachProposedChannels Indicates if service channels attached into general description should automatically be attached into the service. (optional)
     * @param  \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceInBase $v9VmOpenApiServiceInBase The service data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceSourceIdSourceIdPut'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiService|\Tampere\PtvV11\PtvModel\IVmError|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServiceSourceIdSourceIdPut($sourceId, $attachProposedChannels = null, $v9VmOpenApiServiceInBase = null, string $contentType = self::contentTypes['apiV11ServiceSourceIdSourceIdPut'][0])
    {
        list($response) = $this->apiV11ServiceSourceIdSourceIdPutWithHttpInfo($sourceId, $attachProposedChannels, $v9VmOpenApiServiceInBase, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServiceSourceIdSourceIdPutWithHttpInfo
     *
     * Updates the defined service with the data provided as input.
     *
     * @param  string $sourceId External source identifier (required)
     * @param  bool $attachProposedChannels Indicates if service channels attached into general description should automatically be attached into the service. (optional)
     * @param  \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceInBase $v9VmOpenApiServiceInBase The service data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceSourceIdSourceIdPut'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V11VmOpenApiService|\Tampere\PtvV11\PtvModel\IVmError|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServiceSourceIdSourceIdPutWithHttpInfo($sourceId, $attachProposedChannels = null, $v9VmOpenApiServiceInBase = null, string $contentType = self::contentTypes['apiV11ServiceSourceIdSourceIdPut'][0])
    {
        $request = $this->apiV11ServiceSourceIdSourceIdPutRequest($sourceId, $attachProposedChannels, $v9VmOpenApiServiceInBase, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V11VmOpenApiService', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V11VmOpenApiService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServiceSourceIdSourceIdPutAsync
     *
     * Updates the defined service with the data provided as input.
     *
     * @param  string $sourceId External source identifier (required)
     * @param  bool $attachProposedChannels Indicates if service channels attached into general description should automatically be attached into the service. (optional)
     * @param  \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceInBase $v9VmOpenApiServiceInBase The service data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceSourceIdSourceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceSourceIdSourceIdPutAsync($sourceId, $attachProposedChannels = null, $v9VmOpenApiServiceInBase = null, string $contentType = self::contentTypes['apiV11ServiceSourceIdSourceIdPut'][0])
    {
        return $this->apiV11ServiceSourceIdSourceIdPutAsyncWithHttpInfo($sourceId, $attachProposedChannels, $v9VmOpenApiServiceInBase, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServiceSourceIdSourceIdPutAsyncWithHttpInfo
     *
     * Updates the defined service with the data provided as input.
     *
     * @param  string $sourceId External source identifier (required)
     * @param  bool $attachProposedChannels Indicates if service channels attached into general description should automatically be attached into the service. (optional)
     * @param  \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceInBase $v9VmOpenApiServiceInBase The service data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceSourceIdSourceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceSourceIdSourceIdPutAsyncWithHttpInfo($sourceId, $attachProposedChannels = null, $v9VmOpenApiServiceInBase = null, string $contentType = self::contentTypes['apiV11ServiceSourceIdSourceIdPut'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
        $request = $this->apiV11ServiceSourceIdSourceIdPutRequest($sourceId, $attachProposedChannels, $v9VmOpenApiServiceInBase, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServiceSourceIdSourceIdPut'
     *
     * @param  string $sourceId External source identifier (required)
     * @param  bool $attachProposedChannels Indicates if service channels attached into general description should automatically be attached into the service. (optional)
     * @param  \Tampere\PtvV11\PtvModel\V9VmOpenApiServiceInBase $v9VmOpenApiServiceInBase The service data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceSourceIdSourceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServiceSourceIdSourceIdPutRequest($sourceId, $attachProposedChannels = null, $v9VmOpenApiServiceInBase = null, string $contentType = self::contentTypes['apiV11ServiceSourceIdSourceIdPut'][0])
    {

        // verify the required parameter 'sourceId' is set
        if ($sourceId === null || (is_array($sourceId) && count($sourceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sourceId when calling apiV11ServiceSourceIdSourceIdPut'
            );
        }




        $resourcePath = '/api/v11/Service/sourceId/{sourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $attachProposedChannels,
            'attachProposedChannels', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($sourceId !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceId' . '}',
                ObjectSerializer::toPathValue($sourceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v9VmOpenApiServiceInBase)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v9VmOpenApiServiceInBase));
            } else {
                $httpBody = $v9VmOpenApiServiceInBase;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ServiceTargetGroupGet
     *
     * Gets a list of published services for defined target group.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $uri Target group uri, e.g. http://urn.fi/URN:NBN:fi:au:ptvl:v2001 (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceTargetGroupGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServiceTargetGroupGet($uri = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceTargetGroupGet'][0])
    {
        list($response) = $this->apiV11ServiceTargetGroupGetWithHttpInfo($uri, $date, $dateBefore, $page, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServiceTargetGroupGetWithHttpInfo
     *
     * Gets a list of published services for defined target group.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $uri Target group uri, e.g. http://urn.fi/URN:NBN:fi:au:ptvl:v2001 (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceTargetGroupGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServiceTargetGroupGetWithHttpInfo($uri = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceTargetGroupGet'][0])
    {
        $request = $this->apiV11ServiceTargetGroupGetRequest($uri, $date, $dateBefore, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServiceTargetGroupGetAsync
     *
     * Gets a list of published services for defined target group.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $uri Target group uri, e.g. http://urn.fi/URN:NBN:fi:au:ptvl:v2001 (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceTargetGroupGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceTargetGroupGetAsync($uri = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceTargetGroupGet'][0])
    {
        return $this->apiV11ServiceTargetGroupGetAsyncWithHttpInfo($uri, $date, $dateBefore, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServiceTargetGroupGetAsyncWithHttpInfo
     *
     * Gets a list of published services for defined target group.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $uri Target group uri, e.g. http://urn.fi/URN:NBN:fi:au:ptvl:v2001 (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceTargetGroupGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceTargetGroupGetAsyncWithHttpInfo($uri = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceTargetGroupGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
        $request = $this->apiV11ServiceTargetGroupGetRequest($uri, $date, $dateBefore, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServiceTargetGroupGet'
     *
     * @param  string $uri Target group uri, e.g. http://urn.fi/URN:NBN:fi:au:ptvl:v2001 (optional)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceTargetGroupGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServiceTargetGroupGetRequest($uri = null, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceTargetGroupGet'][0])
    {






        $resourcePath = '/api/v11/Service/targetGroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $uri,
            'uri', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateBefore,
            'dateBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ServiceTypeTypeGet
     *
     * Gets a list of published services of defined service type.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $type Service type (required)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceTypeTypeGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ServiceTypeTypeGet($type, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceTypeTypeGet'][0])
    {
        list($response) = $this->apiV11ServiceTypeTypeGetWithHttpInfo($type, $date, $dateBefore, $page, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ServiceTypeTypeGetWithHttpInfo
     *
     * Gets a list of published services of defined service type.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $type Service type (required)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceTypeTypeGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ServiceTypeTypeGetWithHttpInfo($type, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceTypeTypeGet'][0])
    {
        $request = $this->apiV11ServiceTypeTypeGetRequest($type, $date, $dateBefore, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ServiceTypeTypeGetAsync
     *
     * Gets a list of published services of defined service type.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $type Service type (required)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceTypeTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceTypeTypeGetAsync($type, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceTypeTypeGet'][0])
    {
        return $this->apiV11ServiceTypeTypeGetAsyncWithHttpInfo($type, $date, $dateBefore, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ServiceTypeTypeGetAsyncWithHttpInfo
     *
     * Gets a list of published services of defined service type.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $type Service type (required)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceTypeTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ServiceTypeTypeGetAsyncWithHttpInfo($type, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceTypeTypeGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
        $request = $this->apiV11ServiceTypeTypeGetRequest($type, $date, $dateBefore, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ServiceTypeTypeGet'
     *
     * @param  string $type Service type (required)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ServiceTypeTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ServiceTypeTypeGetRequest($type, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11ServiceTypeTypeGet'][0])
    {

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling apiV11ServiceTypeTypeGet'
            );
        }





        $resourcePath = '/api/v11/Service/type/{type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateBefore,
            'dateBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
