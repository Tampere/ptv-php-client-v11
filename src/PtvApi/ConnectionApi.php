<?php
/**
 * ConnectionApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * The version of the OpenAPI document: v11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvApi;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Tampere\PtvV11\ApiException;
use Tampere\PtvV11\Configuration;
use Tampere\PtvV11\HeaderSelector;
use Tampere\PtvV11\ObjectSerializer;

/**
 * ConnectionApi Class Doc Comment
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConnectionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV11ConnectionASTIServiceChannelIdServiceChannelIdPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV11ConnectionASTIServiceIdServiceIdPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV11ConnectionASTIServiceSourceIdServiceSourceIdPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV11ConnectionPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV11ConnectionServiceIdServiceIdPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV11ConnectionServiceSourceIdServiceSourceIdPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV11ConnectionSourcePost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV11ConnectionASTIServiceChannelIdServiceChannelIdPut
     *
     * Updates connections between a service channel and services with extra data.  Request includes services for one certain service channel and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI connections for a service channel set &#39;deleteAllServiceRelations&#39; property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.
     *
     * @param  string $serviceChannelId Service channel identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiChannelServicesIn $v11VmOpenApiChannelServicesIn A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionASTIServiceChannelIdServiceChannelIdPut'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceChannels|\Tampere\PtvV11\PtvModel\IVmError|string[]|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ConnectionASTIServiceChannelIdServiceChannelIdPut($serviceChannelId, $v11VmOpenApiChannelServicesIn = null, string $contentType = self::contentTypes['apiV11ConnectionASTIServiceChannelIdServiceChannelIdPut'][0])
    {
        list($response) = $this->apiV11ConnectionASTIServiceChannelIdServiceChannelIdPutWithHttpInfo($serviceChannelId, $v11VmOpenApiChannelServicesIn, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ConnectionASTIServiceChannelIdServiceChannelIdPutWithHttpInfo
     *
     * Updates connections between a service channel and services with extra data.  Request includes services for one certain service channel and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI connections for a service channel set &#39;deleteAllServiceRelations&#39; property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.
     *
     * @param  string $serviceChannelId Service channel identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiChannelServicesIn $v11VmOpenApiChannelServicesIn A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionASTIServiceChannelIdServiceChannelIdPut'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceChannels|\Tampere\PtvV11\PtvModel\IVmError|string[]|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ConnectionASTIServiceChannelIdServiceChannelIdPutWithHttpInfo($serviceChannelId, $v11VmOpenApiChannelServicesIn = null, string $contentType = self::contentTypes['apiV11ConnectionASTIServiceChannelIdServiceChannelIdPut'][0])
    {
        $request = $this->apiV11ConnectionASTIServiceChannelIdServiceChannelIdPutRequest($serviceChannelId, $v11VmOpenApiChannelServicesIn, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiServiceChannels' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiServiceChannels' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V11VmOpenApiServiceChannels', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiServiceChannels';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V11VmOpenApiServiceChannels',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ConnectionASTIServiceChannelIdServiceChannelIdPutAsync
     *
     * Updates connections between a service channel and services with extra data.  Request includes services for one certain service channel and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI connections for a service channel set &#39;deleteAllServiceRelations&#39; property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.
     *
     * @param  string $serviceChannelId Service channel identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiChannelServicesIn $v11VmOpenApiChannelServicesIn A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionASTIServiceChannelIdServiceChannelIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ConnectionASTIServiceChannelIdServiceChannelIdPutAsync($serviceChannelId, $v11VmOpenApiChannelServicesIn = null, string $contentType = self::contentTypes['apiV11ConnectionASTIServiceChannelIdServiceChannelIdPut'][0])
    {
        return $this->apiV11ConnectionASTIServiceChannelIdServiceChannelIdPutAsyncWithHttpInfo($serviceChannelId, $v11VmOpenApiChannelServicesIn, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ConnectionASTIServiceChannelIdServiceChannelIdPutAsyncWithHttpInfo
     *
     * Updates connections between a service channel and services with extra data.  Request includes services for one certain service channel and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI connections for a service channel set &#39;deleteAllServiceRelations&#39; property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.
     *
     * @param  string $serviceChannelId Service channel identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiChannelServicesIn $v11VmOpenApiChannelServicesIn A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionASTIServiceChannelIdServiceChannelIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ConnectionASTIServiceChannelIdServiceChannelIdPutAsyncWithHttpInfo($serviceChannelId, $v11VmOpenApiChannelServicesIn = null, string $contentType = self::contentTypes['apiV11ConnectionASTIServiceChannelIdServiceChannelIdPut'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiServiceChannels';
        $request = $this->apiV11ConnectionASTIServiceChannelIdServiceChannelIdPutRequest($serviceChannelId, $v11VmOpenApiChannelServicesIn, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ConnectionASTIServiceChannelIdServiceChannelIdPut'
     *
     * @param  string $serviceChannelId Service channel identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiChannelServicesIn $v11VmOpenApiChannelServicesIn A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionASTIServiceChannelIdServiceChannelIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ConnectionASTIServiceChannelIdServiceChannelIdPutRequest($serviceChannelId, $v11VmOpenApiChannelServicesIn = null, string $contentType = self::contentTypes['apiV11ConnectionASTIServiceChannelIdServiceChannelIdPut'][0])
    {

        // verify the required parameter 'serviceChannelId' is set
        if ($serviceChannelId === null || (is_array($serviceChannelId) && count($serviceChannelId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serviceChannelId when calling apiV11ConnectionASTIServiceChannelIdServiceChannelIdPut'
            );
        }



        $resourcePath = '/api/v11/Connection/ASTI/serviceChannelId/{serviceChannelId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serviceChannelId !== null) {
            $resourcePath = str_replace(
                '{' . 'serviceChannelId' . '}',
                ObjectSerializer::toPathValue($serviceChannelId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v11VmOpenApiChannelServicesIn)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v11VmOpenApiChannelServicesIn));
            } else {
                $httpBody = $v11VmOpenApiChannelServicesIn;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ConnectionASTIServiceIdServiceIdPut
     *
     * Updates connections between a service and service channels with extra data.  Request includes service channels for one certain service and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI service channel connections for a service, set &#39;deleteAllChannelRelations&#39; property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.
     *
     * @param  string $serviceId Service identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationAstiInBase $v11VmOpenApiServiceAndChannelRelationAstiInBase A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionASTIServiceIdServiceIdPut'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiService|\Tampere\PtvV11\PtvModel\IVmError|string[]|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ConnectionASTIServiceIdServiceIdPut($serviceId, $v11VmOpenApiServiceAndChannelRelationAstiInBase = null, string $contentType = self::contentTypes['apiV11ConnectionASTIServiceIdServiceIdPut'][0])
    {
        list($response) = $this->apiV11ConnectionASTIServiceIdServiceIdPutWithHttpInfo($serviceId, $v11VmOpenApiServiceAndChannelRelationAstiInBase, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ConnectionASTIServiceIdServiceIdPutWithHttpInfo
     *
     * Updates connections between a service and service channels with extra data.  Request includes service channels for one certain service and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI service channel connections for a service, set &#39;deleteAllChannelRelations&#39; property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.
     *
     * @param  string $serviceId Service identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationAstiInBase $v11VmOpenApiServiceAndChannelRelationAstiInBase A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionASTIServiceIdServiceIdPut'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V11VmOpenApiService|\Tampere\PtvV11\PtvModel\IVmError|string[]|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ConnectionASTIServiceIdServiceIdPutWithHttpInfo($serviceId, $v11VmOpenApiServiceAndChannelRelationAstiInBase = null, string $contentType = self::contentTypes['apiV11ConnectionASTIServiceIdServiceIdPut'][0])
    {
        $request = $this->apiV11ConnectionASTIServiceIdServiceIdPutRequest($serviceId, $v11VmOpenApiServiceAndChannelRelationAstiInBase, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V11VmOpenApiService', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V11VmOpenApiService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ConnectionASTIServiceIdServiceIdPutAsync
     *
     * Updates connections between a service and service channels with extra data.  Request includes service channels for one certain service and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI service channel connections for a service, set &#39;deleteAllChannelRelations&#39; property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.
     *
     * @param  string $serviceId Service identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationAstiInBase $v11VmOpenApiServiceAndChannelRelationAstiInBase A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionASTIServiceIdServiceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ConnectionASTIServiceIdServiceIdPutAsync($serviceId, $v11VmOpenApiServiceAndChannelRelationAstiInBase = null, string $contentType = self::contentTypes['apiV11ConnectionASTIServiceIdServiceIdPut'][0])
    {
        return $this->apiV11ConnectionASTIServiceIdServiceIdPutAsyncWithHttpInfo($serviceId, $v11VmOpenApiServiceAndChannelRelationAstiInBase, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ConnectionASTIServiceIdServiceIdPutAsyncWithHttpInfo
     *
     * Updates connections between a service and service channels with extra data.  Request includes service channels for one certain service and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI service channel connections for a service, set &#39;deleteAllChannelRelations&#39; property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.
     *
     * @param  string $serviceId Service identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationAstiInBase $v11VmOpenApiServiceAndChannelRelationAstiInBase A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionASTIServiceIdServiceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ConnectionASTIServiceIdServiceIdPutAsyncWithHttpInfo($serviceId, $v11VmOpenApiServiceAndChannelRelationAstiInBase = null, string $contentType = self::contentTypes['apiV11ConnectionASTIServiceIdServiceIdPut'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
        $request = $this->apiV11ConnectionASTIServiceIdServiceIdPutRequest($serviceId, $v11VmOpenApiServiceAndChannelRelationAstiInBase, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ConnectionASTIServiceIdServiceIdPut'
     *
     * @param  string $serviceId Service identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationAstiInBase $v11VmOpenApiServiceAndChannelRelationAstiInBase A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionASTIServiceIdServiceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ConnectionASTIServiceIdServiceIdPutRequest($serviceId, $v11VmOpenApiServiceAndChannelRelationAstiInBase = null, string $contentType = self::contentTypes['apiV11ConnectionASTIServiceIdServiceIdPut'][0])
    {

        // verify the required parameter 'serviceId' is set
        if ($serviceId === null || (is_array($serviceId) && count($serviceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serviceId when calling apiV11ConnectionASTIServiceIdServiceIdPut'
            );
        }



        $resourcePath = '/api/v11/Connection/ASTI/serviceId/{serviceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serviceId !== null) {
            $resourcePath = str_replace(
                '{' . 'serviceId' . '}',
                ObjectSerializer::toPathValue($serviceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v11VmOpenApiServiceAndChannelRelationAstiInBase)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v11VmOpenApiServiceAndChannelRelationAstiInBase));
            } else {
                $httpBody = $v11VmOpenApiServiceAndChannelRelationAstiInBase;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ConnectionASTIServiceSourceIdServiceSourceIdPut
     *
     * Updates connections between a service and service channels with extra data. External source ids are used.  Request includes service channels for one certain service and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI service channel connections for a service set &#39;deleteAllChannelRelations&#39; property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.
     *
     * @param  string $serviceSourceId External source identifier for service (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationBySourceAsti $v11VmOpenApiServiceAndChannelRelationBySourceAsti A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionASTIServiceSourceIdServiceSourceIdPut'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiService|\Tampere\PtvV11\PtvModel\IVmError|string[]|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ConnectionASTIServiceSourceIdServiceSourceIdPut($serviceSourceId, $v11VmOpenApiServiceAndChannelRelationBySourceAsti = null, string $contentType = self::contentTypes['apiV11ConnectionASTIServiceSourceIdServiceSourceIdPut'][0])
    {
        list($response) = $this->apiV11ConnectionASTIServiceSourceIdServiceSourceIdPutWithHttpInfo($serviceSourceId, $v11VmOpenApiServiceAndChannelRelationBySourceAsti, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ConnectionASTIServiceSourceIdServiceSourceIdPutWithHttpInfo
     *
     * Updates connections between a service and service channels with extra data. External source ids are used.  Request includes service channels for one certain service and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI service channel connections for a service set &#39;deleteAllChannelRelations&#39; property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.
     *
     * @param  string $serviceSourceId External source identifier for service (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationBySourceAsti $v11VmOpenApiServiceAndChannelRelationBySourceAsti A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionASTIServiceSourceIdServiceSourceIdPut'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V11VmOpenApiService|\Tampere\PtvV11\PtvModel\IVmError|string[]|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ConnectionASTIServiceSourceIdServiceSourceIdPutWithHttpInfo($serviceSourceId, $v11VmOpenApiServiceAndChannelRelationBySourceAsti = null, string $contentType = self::contentTypes['apiV11ConnectionASTIServiceSourceIdServiceSourceIdPut'][0])
    {
        $request = $this->apiV11ConnectionASTIServiceSourceIdServiceSourceIdPutRequest($serviceSourceId, $v11VmOpenApiServiceAndChannelRelationBySourceAsti, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V11VmOpenApiService', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V11VmOpenApiService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ConnectionASTIServiceSourceIdServiceSourceIdPutAsync
     *
     * Updates connections between a service and service channels with extra data. External source ids are used.  Request includes service channels for one certain service and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI service channel connections for a service set &#39;deleteAllChannelRelations&#39; property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.
     *
     * @param  string $serviceSourceId External source identifier for service (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationBySourceAsti $v11VmOpenApiServiceAndChannelRelationBySourceAsti A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionASTIServiceSourceIdServiceSourceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ConnectionASTIServiceSourceIdServiceSourceIdPutAsync($serviceSourceId, $v11VmOpenApiServiceAndChannelRelationBySourceAsti = null, string $contentType = self::contentTypes['apiV11ConnectionASTIServiceSourceIdServiceSourceIdPut'][0])
    {
        return $this->apiV11ConnectionASTIServiceSourceIdServiceSourceIdPutAsyncWithHttpInfo($serviceSourceId, $v11VmOpenApiServiceAndChannelRelationBySourceAsti, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ConnectionASTIServiceSourceIdServiceSourceIdPutAsyncWithHttpInfo
     *
     * Updates connections between a service and service channels with extra data. External source ids are used.  Request includes service channels for one certain service and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI service channel connections for a service set &#39;deleteAllChannelRelations&#39; property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.
     *
     * @param  string $serviceSourceId External source identifier for service (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationBySourceAsti $v11VmOpenApiServiceAndChannelRelationBySourceAsti A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionASTIServiceSourceIdServiceSourceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ConnectionASTIServiceSourceIdServiceSourceIdPutAsyncWithHttpInfo($serviceSourceId, $v11VmOpenApiServiceAndChannelRelationBySourceAsti = null, string $contentType = self::contentTypes['apiV11ConnectionASTIServiceSourceIdServiceSourceIdPut'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
        $request = $this->apiV11ConnectionASTIServiceSourceIdServiceSourceIdPutRequest($serviceSourceId, $v11VmOpenApiServiceAndChannelRelationBySourceAsti, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ConnectionASTIServiceSourceIdServiceSourceIdPut'
     *
     * @param  string $serviceSourceId External source identifier for service (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationBySourceAsti $v11VmOpenApiServiceAndChannelRelationBySourceAsti A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionASTIServiceSourceIdServiceSourceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ConnectionASTIServiceSourceIdServiceSourceIdPutRequest($serviceSourceId, $v11VmOpenApiServiceAndChannelRelationBySourceAsti = null, string $contentType = self::contentTypes['apiV11ConnectionASTIServiceSourceIdServiceSourceIdPut'][0])
    {

        // verify the required parameter 'serviceSourceId' is set
        if ($serviceSourceId === null || (is_array($serviceSourceId) && count($serviceSourceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serviceSourceId when calling apiV11ConnectionASTIServiceSourceIdServiceSourceIdPut'
            );
        }



        $resourcePath = '/api/v11/Connection/ASTI/serviceSourceId/{serviceSourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serviceSourceId !== null) {
            $resourcePath = str_replace(
                '{' . 'serviceSourceId' . '}',
                ObjectSerializer::toPathValue($serviceSourceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v11VmOpenApiServiceAndChannelRelationBySourceAsti)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v11VmOpenApiServiceAndChannelRelationBySourceAsti));
            } else {
                $httpBody = $v11VmOpenApiServiceAndChannelRelationBySourceAsti;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ConnectionPost
     *
     * Creates a connections between services and service channels with extra data.
     *
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelIn[] $v11VmOpenApiServiceAndChannelIn A list of services and service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionPost'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]|string[]|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ConnectionPost($v11VmOpenApiServiceAndChannelIn = null, string $contentType = self::contentTypes['apiV11ConnectionPost'][0])
    {
        list($response) = $this->apiV11ConnectionPostWithHttpInfo($v11VmOpenApiServiceAndChannelIn, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ConnectionPostWithHttpInfo
     *
     * Creates a connections between services and service channels with extra data.
     *
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelIn[] $v11VmOpenApiServiceAndChannelIn A list of services and service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionPost'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[]|string[]|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ConnectionPostWithHttpInfo($v11VmOpenApiServiceAndChannelIn = null, string $contentType = self::contentTypes['apiV11ConnectionPost'][0])
    {
        $request = $this->apiV11ConnectionPostRequest($v11VmOpenApiServiceAndChannelIn, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ConnectionPostAsync
     *
     * Creates a connections between services and service channels with extra data.
     *
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelIn[] $v11VmOpenApiServiceAndChannelIn A list of services and service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ConnectionPostAsync($v11VmOpenApiServiceAndChannelIn = null, string $contentType = self::contentTypes['apiV11ConnectionPost'][0])
    {
        return $this->apiV11ConnectionPostAsyncWithHttpInfo($v11VmOpenApiServiceAndChannelIn, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ConnectionPostAsyncWithHttpInfo
     *
     * Creates a connections between services and service channels with extra data.
     *
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelIn[] $v11VmOpenApiServiceAndChannelIn A list of services and service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ConnectionPostAsyncWithHttpInfo($v11VmOpenApiServiceAndChannelIn = null, string $contentType = self::contentTypes['apiV11ConnectionPost'][0])
    {
        $returnType = 'string[]';
        $request = $this->apiV11ConnectionPostRequest($v11VmOpenApiServiceAndChannelIn, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ConnectionPost'
     *
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelIn[] $v11VmOpenApiServiceAndChannelIn A list of services and service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ConnectionPostRequest($v11VmOpenApiServiceAndChannelIn = null, string $contentType = self::contentTypes['apiV11ConnectionPost'][0])
    {



        $resourcePath = '/api/v11/Connection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v11VmOpenApiServiceAndChannelIn)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v11VmOpenApiServiceAndChannelIn));
            } else {
                $httpBody = $v11VmOpenApiServiceAndChannelIn;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ConnectionServiceIdServiceIdPut
     *
     * Updates connections between a service and service channels with extra data.  Request includes service channels for one certain service so regular connections missing from request are removed.  ASTI connections are left as they are.  To delete all regular service channel connections for a service, set &#39;deleteAllChannelRelations&#39; property to true.
     *
     * @param  string $serviceId Service identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationInBase $v11VmOpenApiServiceAndChannelRelationInBase A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionServiceIdServiceIdPut'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiService|\Tampere\PtvV11\PtvModel\IVmError|string[]|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ConnectionServiceIdServiceIdPut($serviceId, $v11VmOpenApiServiceAndChannelRelationInBase = null, string $contentType = self::contentTypes['apiV11ConnectionServiceIdServiceIdPut'][0])
    {
        list($response) = $this->apiV11ConnectionServiceIdServiceIdPutWithHttpInfo($serviceId, $v11VmOpenApiServiceAndChannelRelationInBase, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ConnectionServiceIdServiceIdPutWithHttpInfo
     *
     * Updates connections between a service and service channels with extra data.  Request includes service channels for one certain service so regular connections missing from request are removed.  ASTI connections are left as they are.  To delete all regular service channel connections for a service, set &#39;deleteAllChannelRelations&#39; property to true.
     *
     * @param  string $serviceId Service identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationInBase $v11VmOpenApiServiceAndChannelRelationInBase A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionServiceIdServiceIdPut'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V11VmOpenApiService|\Tampere\PtvV11\PtvModel\IVmError|string[]|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ConnectionServiceIdServiceIdPutWithHttpInfo($serviceId, $v11VmOpenApiServiceAndChannelRelationInBase = null, string $contentType = self::contentTypes['apiV11ConnectionServiceIdServiceIdPut'][0])
    {
        $request = $this->apiV11ConnectionServiceIdServiceIdPutRequest($serviceId, $v11VmOpenApiServiceAndChannelRelationInBase, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V11VmOpenApiService', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V11VmOpenApiService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ConnectionServiceIdServiceIdPutAsync
     *
     * Updates connections between a service and service channels with extra data.  Request includes service channels for one certain service so regular connections missing from request are removed.  ASTI connections are left as they are.  To delete all regular service channel connections for a service, set &#39;deleteAllChannelRelations&#39; property to true.
     *
     * @param  string $serviceId Service identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationInBase $v11VmOpenApiServiceAndChannelRelationInBase A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionServiceIdServiceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ConnectionServiceIdServiceIdPutAsync($serviceId, $v11VmOpenApiServiceAndChannelRelationInBase = null, string $contentType = self::contentTypes['apiV11ConnectionServiceIdServiceIdPut'][0])
    {
        return $this->apiV11ConnectionServiceIdServiceIdPutAsyncWithHttpInfo($serviceId, $v11VmOpenApiServiceAndChannelRelationInBase, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ConnectionServiceIdServiceIdPutAsyncWithHttpInfo
     *
     * Updates connections between a service and service channels with extra data.  Request includes service channels for one certain service so regular connections missing from request are removed.  ASTI connections are left as they are.  To delete all regular service channel connections for a service, set &#39;deleteAllChannelRelations&#39; property to true.
     *
     * @param  string $serviceId Service identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationInBase $v11VmOpenApiServiceAndChannelRelationInBase A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionServiceIdServiceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ConnectionServiceIdServiceIdPutAsyncWithHttpInfo($serviceId, $v11VmOpenApiServiceAndChannelRelationInBase = null, string $contentType = self::contentTypes['apiV11ConnectionServiceIdServiceIdPut'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
        $request = $this->apiV11ConnectionServiceIdServiceIdPutRequest($serviceId, $v11VmOpenApiServiceAndChannelRelationInBase, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ConnectionServiceIdServiceIdPut'
     *
     * @param  string $serviceId Service identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationInBase $v11VmOpenApiServiceAndChannelRelationInBase A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionServiceIdServiceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ConnectionServiceIdServiceIdPutRequest($serviceId, $v11VmOpenApiServiceAndChannelRelationInBase = null, string $contentType = self::contentTypes['apiV11ConnectionServiceIdServiceIdPut'][0])
    {

        // verify the required parameter 'serviceId' is set
        if ($serviceId === null || (is_array($serviceId) && count($serviceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serviceId when calling apiV11ConnectionServiceIdServiceIdPut'
            );
        }



        $resourcePath = '/api/v11/Connection/serviceId/{serviceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serviceId !== null) {
            $resourcePath = str_replace(
                '{' . 'serviceId' . '}',
                ObjectSerializer::toPathValue($serviceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v11VmOpenApiServiceAndChannelRelationInBase)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v11VmOpenApiServiceAndChannelRelationInBase));
            } else {
                $httpBody = $v11VmOpenApiServiceAndChannelRelationInBase;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ConnectionServiceSourceIdServiceSourceIdPut
     *
     * Updates connections between a service and service channels with extra data. External source ids are used.  Request includes service channels for one certain service so service channels missing from request are removed.  To delete all service channel connections for a service set &#39;deleteAllChannelRelations&#39; property to true.  ASTI connections are not removed - data for those connections can be updated though.
     *
     * @param  string $serviceSourceId External source identifier for service (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationBySourceInBase $v11VmOpenApiServiceAndChannelRelationBySourceInBase A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionServiceSourceIdServiceSourceIdPut'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V11VmOpenApiService|\Tampere\PtvV11\PtvModel\IVmError|string[]|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ConnectionServiceSourceIdServiceSourceIdPut($serviceSourceId, $v11VmOpenApiServiceAndChannelRelationBySourceInBase = null, string $contentType = self::contentTypes['apiV11ConnectionServiceSourceIdServiceSourceIdPut'][0])
    {
        list($response) = $this->apiV11ConnectionServiceSourceIdServiceSourceIdPutWithHttpInfo($serviceSourceId, $v11VmOpenApiServiceAndChannelRelationBySourceInBase, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ConnectionServiceSourceIdServiceSourceIdPutWithHttpInfo
     *
     * Updates connections between a service and service channels with extra data. External source ids are used.  Request includes service channels for one certain service so service channels missing from request are removed.  To delete all service channel connections for a service set &#39;deleteAllChannelRelations&#39; property to true.  ASTI connections are not removed - data for those connections can be updated though.
     *
     * @param  string $serviceSourceId External source identifier for service (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationBySourceInBase $v11VmOpenApiServiceAndChannelRelationBySourceInBase A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionServiceSourceIdServiceSourceIdPut'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V11VmOpenApiService|\Tampere\PtvV11\PtvModel\IVmError|string[]|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ConnectionServiceSourceIdServiceSourceIdPutWithHttpInfo($serviceSourceId, $v11VmOpenApiServiceAndChannelRelationBySourceInBase = null, string $contentType = self::contentTypes['apiV11ConnectionServiceSourceIdServiceSourceIdPut'][0])
    {
        $request = $this->apiV11ConnectionServiceSourceIdServiceSourceIdPutRequest($serviceSourceId, $v11VmOpenApiServiceAndChannelRelationBySourceInBase, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V11VmOpenApiService' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V11VmOpenApiService', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V11VmOpenApiService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ConnectionServiceSourceIdServiceSourceIdPutAsync
     *
     * Updates connections between a service and service channels with extra data. External source ids are used.  Request includes service channels for one certain service so service channels missing from request are removed.  To delete all service channel connections for a service set &#39;deleteAllChannelRelations&#39; property to true.  ASTI connections are not removed - data for those connections can be updated though.
     *
     * @param  string $serviceSourceId External source identifier for service (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationBySourceInBase $v11VmOpenApiServiceAndChannelRelationBySourceInBase A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionServiceSourceIdServiceSourceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ConnectionServiceSourceIdServiceSourceIdPutAsync($serviceSourceId, $v11VmOpenApiServiceAndChannelRelationBySourceInBase = null, string $contentType = self::contentTypes['apiV11ConnectionServiceSourceIdServiceSourceIdPut'][0])
    {
        return $this->apiV11ConnectionServiceSourceIdServiceSourceIdPutAsyncWithHttpInfo($serviceSourceId, $v11VmOpenApiServiceAndChannelRelationBySourceInBase, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ConnectionServiceSourceIdServiceSourceIdPutAsyncWithHttpInfo
     *
     * Updates connections between a service and service channels with extra data. External source ids are used.  Request includes service channels for one certain service so service channels missing from request are removed.  To delete all service channel connections for a service set &#39;deleteAllChannelRelations&#39; property to true.  ASTI connections are not removed - data for those connections can be updated though.
     *
     * @param  string $serviceSourceId External source identifier for service (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationBySourceInBase $v11VmOpenApiServiceAndChannelRelationBySourceInBase A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionServiceSourceIdServiceSourceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ConnectionServiceSourceIdServiceSourceIdPutAsyncWithHttpInfo($serviceSourceId, $v11VmOpenApiServiceAndChannelRelationBySourceInBase = null, string $contentType = self::contentTypes['apiV11ConnectionServiceSourceIdServiceSourceIdPut'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V11VmOpenApiService';
        $request = $this->apiV11ConnectionServiceSourceIdServiceSourceIdPutRequest($serviceSourceId, $v11VmOpenApiServiceAndChannelRelationBySourceInBase, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ConnectionServiceSourceIdServiceSourceIdPut'
     *
     * @param  string $serviceSourceId External source identifier for service (required)
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationBySourceInBase $v11VmOpenApiServiceAndChannelRelationBySourceInBase A list of service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionServiceSourceIdServiceSourceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ConnectionServiceSourceIdServiceSourceIdPutRequest($serviceSourceId, $v11VmOpenApiServiceAndChannelRelationBySourceInBase = null, string $contentType = self::contentTypes['apiV11ConnectionServiceSourceIdServiceSourceIdPut'][0])
    {

        // verify the required parameter 'serviceSourceId' is set
        if ($serviceSourceId === null || (is_array($serviceSourceId) && count($serviceSourceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serviceSourceId when calling apiV11ConnectionServiceSourceIdServiceSourceIdPut'
            );
        }



        $resourcePath = '/api/v11/Connection/serviceSourceId/{serviceSourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serviceSourceId !== null) {
            $resourcePath = str_replace(
                '{' . 'serviceSourceId' . '}',
                ObjectSerializer::toPathValue($serviceSourceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v11VmOpenApiServiceAndChannelRelationBySourceInBase)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v11VmOpenApiServiceAndChannelRelationBySourceInBase));
            } else {
                $httpBody = $v11VmOpenApiServiceAndChannelRelationBySourceInBase;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11ConnectionSourcePost
     *
     * Creates a connections between services and service channels with extra data. External source ids are used.
     *
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationBySource[] $v11VmOpenApiServiceAndChannelRelationBySource A list of services and service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionSourcePost'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]|string[]|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11ConnectionSourcePost($v11VmOpenApiServiceAndChannelRelationBySource = null, string $contentType = self::contentTypes['apiV11ConnectionSourcePost'][0])
    {
        list($response) = $this->apiV11ConnectionSourcePostWithHttpInfo($v11VmOpenApiServiceAndChannelRelationBySource, $contentType);
        return $response;
    }

    /**
     * Operation apiV11ConnectionSourcePostWithHttpInfo
     *
     * Creates a connections between services and service channels with extra data. External source ids are used.
     *
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationBySource[] $v11VmOpenApiServiceAndChannelRelationBySource A list of services and service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionSourcePost'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[]|string[]|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11ConnectionSourcePostWithHttpInfo($v11VmOpenApiServiceAndChannelRelationBySource = null, string $contentType = self::contentTypes['apiV11ConnectionSourcePost'][0])
    {
        $request = $this->apiV11ConnectionSourcePostRequest($v11VmOpenApiServiceAndChannelRelationBySource, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11ConnectionSourcePostAsync
     *
     * Creates a connections between services and service channels with extra data. External source ids are used.
     *
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationBySource[] $v11VmOpenApiServiceAndChannelRelationBySource A list of services and service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionSourcePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ConnectionSourcePostAsync($v11VmOpenApiServiceAndChannelRelationBySource = null, string $contentType = self::contentTypes['apiV11ConnectionSourcePost'][0])
    {
        return $this->apiV11ConnectionSourcePostAsyncWithHttpInfo($v11VmOpenApiServiceAndChannelRelationBySource, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11ConnectionSourcePostAsyncWithHttpInfo
     *
     * Creates a connections between services and service channels with extra data. External source ids are used.
     *
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationBySource[] $v11VmOpenApiServiceAndChannelRelationBySource A list of services and service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionSourcePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11ConnectionSourcePostAsyncWithHttpInfo($v11VmOpenApiServiceAndChannelRelationBySource = null, string $contentType = self::contentTypes['apiV11ConnectionSourcePost'][0])
    {
        $returnType = 'string[]';
        $request = $this->apiV11ConnectionSourcePostRequest($v11VmOpenApiServiceAndChannelRelationBySource, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11ConnectionSourcePost'
     *
     * @param  \Tampere\PtvV11\PtvModel\V11VmOpenApiServiceAndChannelRelationBySource[] $v11VmOpenApiServiceAndChannelRelationBySource A list of services and service channels. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11ConnectionSourcePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11ConnectionSourcePostRequest($v11VmOpenApiServiceAndChannelRelationBySource = null, string $contentType = self::contentTypes['apiV11ConnectionSourcePost'][0])
    {



        $resourcePath = '/api/v11/Connection/Source';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v11VmOpenApiServiceAndChannelRelationBySource)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v11VmOpenApiServiceAndChannelRelationBySource));
            } else {
                $httpBody = $v11VmOpenApiServiceAndChannelRelationBySource;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
