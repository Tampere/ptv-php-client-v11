<?php
/**
 * CommonApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * The version of the OpenAPI document: v11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvApi;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Tampere\PtvV11\ApiException;
use Tampere\PtvV11\Configuration;
use Tampere\PtvV11\HeaderSelector;
use Tampere\PtvV11\ObjectSerializer;

/**
 * CommonApi Class Doc Comment
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CommonApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV11CommonChannelsWithoutServicesGet' => [
            'application/json',
        ],
        'apiV11CommonEntitiesByOrganizationOrganizationIdGet' => [
            'application/json',
        ],
        'apiV11CommonExpiringServiceChannelsGet' => [
            'application/json',
        ],
        'apiV11CommonNotMaintainedServiceChannelsGet' => [
            'application/json',
        ],
        'apiV11CommonNotMaintainedServicesGet' => [
            'application/json',
        ],
        'apiV11CommonServicesWithoutChannelsGet' => [
            'application/json',
        ],
        'apiV11CommonTranslationGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV11CommonChannelsWithoutServicesGet
     *
     * Gets information of user&#39;s organization&#39;s channels that have no connections to services.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonChannelsWithoutServicesGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiTasks|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11CommonChannelsWithoutServicesGet($page = 1, string $contentType = self::contentTypes['apiV11CommonChannelsWithoutServicesGet'][0])
    {
        list($response) = $this->apiV11CommonChannelsWithoutServicesGetWithHttpInfo($page, $contentType);
        return $response;
    }

    /**
     * Operation apiV11CommonChannelsWithoutServicesGetWithHttpInfo
     *
     * Gets information of user&#39;s organization&#39;s channels that have no connections to services.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonChannelsWithoutServicesGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\VmOpenApiTasks|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11CommonChannelsWithoutServicesGetWithHttpInfo($page = 1, string $contentType = self::contentTypes['apiV11CommonChannelsWithoutServicesGet'][0])
    {
        $request = $this->apiV11CommonChannelsWithoutServicesGetRequest($page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\VmOpenApiTasks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\VmOpenApiTasks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\VmOpenApiTasks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\VmOpenApiTasks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\VmOpenApiTasks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11CommonChannelsWithoutServicesGetAsync
     *
     * Gets information of user&#39;s organization&#39;s channels that have no connections to services.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonChannelsWithoutServicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11CommonChannelsWithoutServicesGetAsync($page = 1, string $contentType = self::contentTypes['apiV11CommonChannelsWithoutServicesGet'][0])
    {
        return $this->apiV11CommonChannelsWithoutServicesGetAsyncWithHttpInfo($page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11CommonChannelsWithoutServicesGetAsyncWithHttpInfo
     *
     * Gets information of user&#39;s organization&#39;s channels that have no connections to services.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonChannelsWithoutServicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11CommonChannelsWithoutServicesGetAsyncWithHttpInfo($page = 1, string $contentType = self::contentTypes['apiV11CommonChannelsWithoutServicesGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\VmOpenApiTasks';
        $request = $this->apiV11CommonChannelsWithoutServicesGetRequest($page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11CommonChannelsWithoutServicesGet'
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonChannelsWithoutServicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11CommonChannelsWithoutServicesGetRequest($page = 1, string $contentType = self::contentTypes['apiV11CommonChannelsWithoutServicesGet'][0])
    {



        $resourcePath = '/api/v11/Common/ChannelsWithoutServices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11CommonEntitiesByOrganizationOrganizationIdGet
     *
     * Gets a list of published services and service channels by organization.  Services/channels created/modified after certain date can be fetched by adding date as query string parameter.  Services/channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $organizationId Guid (required)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonEntitiesByOrganizationOrganizationIdGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiEntityGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11CommonEntitiesByOrganizationOrganizationIdGet($organizationId, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11CommonEntitiesByOrganizationOrganizationIdGet'][0])
    {
        list($response) = $this->apiV11CommonEntitiesByOrganizationOrganizationIdGetWithHttpInfo($organizationId, $date, $dateBefore, $page, $contentType);
        return $response;
    }

    /**
     * Operation apiV11CommonEntitiesByOrganizationOrganizationIdGetWithHttpInfo
     *
     * Gets a list of published services and service channels by organization.  Services/channels created/modified after certain date can be fetched by adding date as query string parameter.  Services/channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $organizationId Guid (required)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonEntitiesByOrganizationOrganizationIdGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\VmOpenApiEntityGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11CommonEntitiesByOrganizationOrganizationIdGetWithHttpInfo($organizationId, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11CommonEntitiesByOrganizationOrganizationIdGet'][0])
    {
        $request = $this->apiV11CommonEntitiesByOrganizationOrganizationIdGetRequest($organizationId, $date, $dateBefore, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\VmOpenApiEntityGuidPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\VmOpenApiEntityGuidPage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\VmOpenApiEntityGuidPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\VmOpenApiEntityGuidPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\VmOpenApiEntityGuidPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11CommonEntitiesByOrganizationOrganizationIdGetAsync
     *
     * Gets a list of published services and service channels by organization.  Services/channels created/modified after certain date can be fetched by adding date as query string parameter.  Services/channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $organizationId Guid (required)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonEntitiesByOrganizationOrganizationIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11CommonEntitiesByOrganizationOrganizationIdGetAsync($organizationId, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11CommonEntitiesByOrganizationOrganizationIdGet'][0])
    {
        return $this->apiV11CommonEntitiesByOrganizationOrganizationIdGetAsyncWithHttpInfo($organizationId, $date, $dateBefore, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11CommonEntitiesByOrganizationOrganizationIdGetAsyncWithHttpInfo
     *
     * Gets a list of published services and service channels by organization.  Services/channels created/modified after certain date can be fetched by adding date as query string parameter.  Services/channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  string $organizationId Guid (required)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonEntitiesByOrganizationOrganizationIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11CommonEntitiesByOrganizationOrganizationIdGetAsyncWithHttpInfo($organizationId, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11CommonEntitiesByOrganizationOrganizationIdGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\VmOpenApiEntityGuidPage';
        $request = $this->apiV11CommonEntitiesByOrganizationOrganizationIdGetRequest($organizationId, $date, $dateBefore, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11CommonEntitiesByOrganizationOrganizationIdGet'
     *
     * @param  string $organizationId Guid (required)
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonEntitiesByOrganizationOrganizationIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11CommonEntitiesByOrganizationOrganizationIdGetRequest($organizationId, $date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11CommonEntitiesByOrganizationOrganizationIdGet'][0])
    {

        // verify the required parameter 'organizationId' is set
        if ($organizationId === null || (is_array($organizationId) && count($organizationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organizationId when calling apiV11CommonEntitiesByOrganizationOrganizationIdGet'
            );
        }





        $resourcePath = '/api/v11/Common/EntitiesByOrganization/{organizationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateBefore,
            'dateBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organizationId !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organizationId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11CommonExpiringServiceChannelsGet
     *
     * Gets information of user&#39;s organization&#39;s expiring service channels.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published or draft state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonExpiringServiceChannelsGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiExpiringTask|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11CommonExpiringServiceChannelsGet($page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11CommonExpiringServiceChannelsGet'][0])
    {
        list($response) = $this->apiV11CommonExpiringServiceChannelsGetWithHttpInfo($page, $status, $contentType);
        return $response;
    }

    /**
     * Operation apiV11CommonExpiringServiceChannelsGetWithHttpInfo
     *
     * Gets information of user&#39;s organization&#39;s expiring service channels.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published or draft state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonExpiringServiceChannelsGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\VmOpenApiExpiringTask|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11CommonExpiringServiceChannelsGetWithHttpInfo($page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11CommonExpiringServiceChannelsGet'][0])
    {
        $request = $this->apiV11CommonExpiringServiceChannelsGetRequest($page, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\VmOpenApiExpiringTask' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\VmOpenApiExpiringTask' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\VmOpenApiExpiringTask', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\VmOpenApiExpiringTask';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\VmOpenApiExpiringTask',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11CommonExpiringServiceChannelsGetAsync
     *
     * Gets information of user&#39;s organization&#39;s expiring service channels.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published or draft state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonExpiringServiceChannelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11CommonExpiringServiceChannelsGetAsync($page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11CommonExpiringServiceChannelsGet'][0])
    {
        return $this->apiV11CommonExpiringServiceChannelsGetAsyncWithHttpInfo($page, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11CommonExpiringServiceChannelsGetAsyncWithHttpInfo
     *
     * Gets information of user&#39;s organization&#39;s expiring service channels.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published or draft state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonExpiringServiceChannelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11CommonExpiringServiceChannelsGetAsyncWithHttpInfo($page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11CommonExpiringServiceChannelsGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\VmOpenApiExpiringTask';
        $request = $this->apiV11CommonExpiringServiceChannelsGetRequest($page, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11CommonExpiringServiceChannelsGet'
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published or draft state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonExpiringServiceChannelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11CommonExpiringServiceChannelsGetRequest($page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11CommonExpiringServiceChannelsGet'][0])
    {




        $resourcePath = '/api/v11/Common/ExpiringServiceChannels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11CommonNotMaintainedServiceChannelsGet
     *
     * Gets information of user&#39;s organization&#39;s not updated channels.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published or draft state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonNotMaintainedServiceChannelsGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiNotUpdatedTask|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11CommonNotMaintainedServiceChannelsGet($page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11CommonNotMaintainedServiceChannelsGet'][0])
    {
        list($response) = $this->apiV11CommonNotMaintainedServiceChannelsGetWithHttpInfo($page, $status, $contentType);
        return $response;
    }

    /**
     * Operation apiV11CommonNotMaintainedServiceChannelsGetWithHttpInfo
     *
     * Gets information of user&#39;s organization&#39;s not updated channels.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published or draft state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonNotMaintainedServiceChannelsGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\VmOpenApiNotUpdatedTask|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11CommonNotMaintainedServiceChannelsGetWithHttpInfo($page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11CommonNotMaintainedServiceChannelsGet'][0])
    {
        $request = $this->apiV11CommonNotMaintainedServiceChannelsGetRequest($page, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\VmOpenApiNotUpdatedTask' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\VmOpenApiNotUpdatedTask' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\VmOpenApiNotUpdatedTask', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\VmOpenApiNotUpdatedTask';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\VmOpenApiNotUpdatedTask',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11CommonNotMaintainedServiceChannelsGetAsync
     *
     * Gets information of user&#39;s organization&#39;s not updated channels.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published or draft state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonNotMaintainedServiceChannelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11CommonNotMaintainedServiceChannelsGetAsync($page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11CommonNotMaintainedServiceChannelsGet'][0])
    {
        return $this->apiV11CommonNotMaintainedServiceChannelsGetAsyncWithHttpInfo($page, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11CommonNotMaintainedServiceChannelsGetAsyncWithHttpInfo
     *
     * Gets information of user&#39;s organization&#39;s not updated channels.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published or draft state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonNotMaintainedServiceChannelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11CommonNotMaintainedServiceChannelsGetAsyncWithHttpInfo($page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11CommonNotMaintainedServiceChannelsGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\VmOpenApiNotUpdatedTask';
        $request = $this->apiV11CommonNotMaintainedServiceChannelsGetRequest($page, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11CommonNotMaintainedServiceChannelsGet'
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published or draft state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonNotMaintainedServiceChannelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11CommonNotMaintainedServiceChannelsGetRequest($page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11CommonNotMaintainedServiceChannelsGet'][0])
    {




        $resourcePath = '/api/v11/Common/NotMaintainedServiceChannels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11CommonNotMaintainedServicesGet
     *
     * Gets information of user&#39;s organization&#39;s not updated services.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published or draft state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonNotMaintainedServicesGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiNotUpdatedTask|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11CommonNotMaintainedServicesGet($page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11CommonNotMaintainedServicesGet'][0])
    {
        list($response) = $this->apiV11CommonNotMaintainedServicesGetWithHttpInfo($page, $status, $contentType);
        return $response;
    }

    /**
     * Operation apiV11CommonNotMaintainedServicesGetWithHttpInfo
     *
     * Gets information of user&#39;s organization&#39;s not updated services.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published or draft state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonNotMaintainedServicesGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\VmOpenApiNotUpdatedTask|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11CommonNotMaintainedServicesGetWithHttpInfo($page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11CommonNotMaintainedServicesGet'][0])
    {
        $request = $this->apiV11CommonNotMaintainedServicesGetRequest($page, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\VmOpenApiNotUpdatedTask' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\VmOpenApiNotUpdatedTask' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\VmOpenApiNotUpdatedTask', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\VmOpenApiNotUpdatedTask';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\VmOpenApiNotUpdatedTask',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11CommonNotMaintainedServicesGetAsync
     *
     * Gets information of user&#39;s organization&#39;s not updated services.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published or draft state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonNotMaintainedServicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11CommonNotMaintainedServicesGetAsync($page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11CommonNotMaintainedServicesGet'][0])
    {
        return $this->apiV11CommonNotMaintainedServicesGetAsyncWithHttpInfo($page, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11CommonNotMaintainedServicesGetAsyncWithHttpInfo
     *
     * Gets information of user&#39;s organization&#39;s not updated services.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published or draft state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonNotMaintainedServicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11CommonNotMaintainedServicesGetAsyncWithHttpInfo($page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11CommonNotMaintainedServicesGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\VmOpenApiNotUpdatedTask';
        $request = $this->apiV11CommonNotMaintainedServicesGetRequest($page, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11CommonNotMaintainedServicesGet'
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $status Set status to get items either in published or draft state. (optional, default to 'Published')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonNotMaintainedServicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11CommonNotMaintainedServicesGetRequest($page = 1, $status = 'Published', string $contentType = self::contentTypes['apiV11CommonNotMaintainedServicesGet'][0])
    {




        $resourcePath = '/api/v11/Common/NotMaintainedServices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11CommonServicesWithoutChannelsGet
     *
     * Gets information of user&#39;s organization&#39;s services that have no connections to channels.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonServicesWithoutChannelsGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiTasks|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11CommonServicesWithoutChannelsGet($page = 1, string $contentType = self::contentTypes['apiV11CommonServicesWithoutChannelsGet'][0])
    {
        list($response) = $this->apiV11CommonServicesWithoutChannelsGetWithHttpInfo($page, $contentType);
        return $response;
    }

    /**
     * Operation apiV11CommonServicesWithoutChannelsGetWithHttpInfo
     *
     * Gets information of user&#39;s organization&#39;s services that have no connections to channels.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonServicesWithoutChannelsGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\VmOpenApiTasks|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11CommonServicesWithoutChannelsGetWithHttpInfo($page = 1, string $contentType = self::contentTypes['apiV11CommonServicesWithoutChannelsGet'][0])
    {
        $request = $this->apiV11CommonServicesWithoutChannelsGetRequest($page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\VmOpenApiTasks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\VmOpenApiTasks' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\VmOpenApiTasks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\VmOpenApiTasks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\VmOpenApiTasks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11CommonServicesWithoutChannelsGetAsync
     *
     * Gets information of user&#39;s organization&#39;s services that have no connections to channels.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonServicesWithoutChannelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11CommonServicesWithoutChannelsGetAsync($page = 1, string $contentType = self::contentTypes['apiV11CommonServicesWithoutChannelsGet'][0])
    {
        return $this->apiV11CommonServicesWithoutChannelsGetAsyncWithHttpInfo($page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11CommonServicesWithoutChannelsGetAsyncWithHttpInfo
     *
     * Gets information of user&#39;s organization&#39;s services that have no connections to channels.
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonServicesWithoutChannelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11CommonServicesWithoutChannelsGetAsyncWithHttpInfo($page = 1, string $contentType = self::contentTypes['apiV11CommonServicesWithoutChannelsGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\VmOpenApiTasks';
        $request = $this->apiV11CommonServicesWithoutChannelsGetRequest($page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11CommonServicesWithoutChannelsGet'
     *
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonServicesWithoutChannelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11CommonServicesWithoutChannelsGetRequest($page = 1, string $contentType = self::contentTypes['apiV11CommonServicesWithoutChannelsGet'][0])
    {



        $resourcePath = '/api/v11/Common/ServicesWithoutChannels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11CommonTranslationGet
     *
     * Gets information of translation processes within PTV.  Translation items created/modified after certain date can be fetched by adding date as query string parameter.  Translation items created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonTranslationGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\VmOpenApiTranslationItemsPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11CommonTranslationGet($date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11CommonTranslationGet'][0])
    {
        list($response) = $this->apiV11CommonTranslationGetWithHttpInfo($date, $dateBefore, $page, $contentType);
        return $response;
    }

    /**
     * Operation apiV11CommonTranslationGetWithHttpInfo
     *
     * Gets information of translation processes within PTV.  Translation items created/modified after certain date can be fetched by adding date as query string parameter.  Translation items created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonTranslationGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\VmOpenApiTranslationItemsPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11CommonTranslationGetWithHttpInfo($date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11CommonTranslationGet'][0])
    {
        $request = $this->apiV11CommonTranslationGetRequest($date, $dateBefore, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\VmOpenApiTranslationItemsPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\VmOpenApiTranslationItemsPage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\VmOpenApiTranslationItemsPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\VmOpenApiTranslationItemsPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\VmOpenApiTranslationItemsPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11CommonTranslationGetAsync
     *
     * Gets information of translation processes within PTV.  Translation items created/modified after certain date can be fetched by adding date as query string parameter.  Translation items created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonTranslationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11CommonTranslationGetAsync($date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11CommonTranslationGet'][0])
    {
        return $this->apiV11CommonTranslationGetAsyncWithHttpInfo($date, $dateBefore, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11CommonTranslationGetAsyncWithHttpInfo
     *
     * Gets information of translation processes within PTV.  Translation items created/modified after certain date can be fetched by adding date as query string parameter.  Translation items created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonTranslationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11CommonTranslationGetAsyncWithHttpInfo($date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11CommonTranslationGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\VmOpenApiTranslationItemsPage';
        $request = $this->apiV11CommonTranslationGetRequest($date, $dateBefore, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11CommonTranslationGet'
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page number to be fetched. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11CommonTranslationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11CommonTranslationGetRequest($date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11CommonTranslationGet'][0])
    {





        $resourcePath = '/api/v11/Common/Translation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateBefore,
            'dateBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
