<?php
/**
 * GeneralDescriptionApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Open Api version 11
 *
 * Here you can see listed all the PTV Open Api methods.
 *
 * The version of the OpenAPI document: v11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tampere\PtvV11\PtvApi;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Tampere\PtvV11\ApiException;
use Tampere\PtvV11\Configuration;
use Tampere\PtvV11\HeaderSelector;
use Tampere\PtvV11\ObjectSerializer;

/**
 * GeneralDescriptionApi Class Doc Comment
 *
 * @category Class
 * @package  Tampere\PtvV11
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GeneralDescriptionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV11GeneralDescriptionGet' => [
            'application/json',
        ],
        'apiV11GeneralDescriptionIdGet' => [
            'application/json',
        ],
        'apiV11GeneralDescriptionIdPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV11GeneralDescriptionListGet' => [
            'application/json',
        ],
        'apiV11GeneralDescriptionNewGdListGet' => [
            'application/json',
        ],
        'apiV11GeneralDescriptionPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV11GeneralDescriptionGet
     *
     * Gets all the statutory service general descriptions within PTV as a list of ids and names.  General descriptions created/modified after certain date can be fetched by adding date as query string parameter.  General descriptions created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page to be fetched. Page numbering starts from one. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11GeneralDescriptionGet($date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11GeneralDescriptionGet'][0])
    {
        list($response) = $this->apiV11GeneralDescriptionGetWithHttpInfo($date, $dateBefore, $page, $contentType);
        return $response;
    }

    /**
     * Operation apiV11GeneralDescriptionGetWithHttpInfo
     *
     * Gets all the statutory service general descriptions within PTV as a list of ids and names.  General descriptions created/modified after certain date can be fetched by adding date as query string parameter.  General descriptions created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page to be fetched. Page numbering starts from one. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11GeneralDescriptionGetWithHttpInfo($date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11GeneralDescriptionGet'][0])
    {
        $request = $this->apiV11GeneralDescriptionGetRequest($date, $dateBefore, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11GeneralDescriptionGetAsync
     *
     * Gets all the statutory service general descriptions within PTV as a list of ids and names.  General descriptions created/modified after certain date can be fetched by adding date as query string parameter.  General descriptions created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page to be fetched. Page numbering starts from one. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11GeneralDescriptionGetAsync($date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11GeneralDescriptionGet'][0])
    {
        return $this->apiV11GeneralDescriptionGetAsyncWithHttpInfo($date, $dateBefore, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11GeneralDescriptionGetAsyncWithHttpInfo
     *
     * Gets all the statutory service general descriptions within PTV as a list of ids and names.  General descriptions created/modified after certain date can be fetched by adding date as query string parameter.  General descriptions created/modified before certain date can be fetched by adding dateBefore as query string parameter.
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page to be fetched. Page numbering starts from one. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11GeneralDescriptionGetAsyncWithHttpInfo($date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11GeneralDescriptionGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
        $request = $this->apiV11GeneralDescriptionGetRequest($date, $dateBefore, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11GeneralDescriptionGet'
     *
     * @param  \DateTime $date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  \DateTime $dateBefore Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (UTC). (optional)
     * @param  int $page The page to be fetched. Page numbering starts from one. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11GeneralDescriptionGetRequest($date = null, $dateBefore = null, $page = 1, string $contentType = self::contentTypes['apiV11GeneralDescriptionGet'][0])
    {





        $resourcePath = '/api/v11/GeneralDescription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateBefore,
            'dateBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11GeneralDescriptionIdGet
     *
     * Fetches all the information related to a single statutory service general description.
     *
     * @param  string $id Statutory service general description guid (id of the entity) to fetch. (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionIdGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11GeneralDescriptionIdGet($id, $showHeader = false, string $contentType = self::contentTypes['apiV11GeneralDescriptionIdGet'][0])
    {
        list($response) = $this->apiV11GeneralDescriptionIdGetWithHttpInfo($id, $showHeader, $contentType);
        return $response;
    }

    /**
     * Operation apiV11GeneralDescriptionIdGetWithHttpInfo
     *
     * Fetches all the information related to a single statutory service general description.
     *
     * @param  string $id Statutory service general description guid (id of the entity) to fetch. (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionIdGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11GeneralDescriptionIdGetWithHttpInfo($id, $showHeader = false, string $contentType = self::contentTypes['apiV11GeneralDescriptionIdGet'][0])
    {
        $request = $this->apiV11GeneralDescriptionIdGetRequest($id, $showHeader, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11GeneralDescriptionIdGetAsync
     *
     * Fetches all the information related to a single statutory service general description.
     *
     * @param  string $id Statutory service general description guid (id of the entity) to fetch. (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11GeneralDescriptionIdGetAsync($id, $showHeader = false, string $contentType = self::contentTypes['apiV11GeneralDescriptionIdGet'][0])
    {
        return $this->apiV11GeneralDescriptionIdGetAsyncWithHttpInfo($id, $showHeader, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11GeneralDescriptionIdGetAsyncWithHttpInfo
     *
     * Fetches all the information related to a single statutory service general description.
     *
     * @param  string $id Statutory service general description guid (id of the entity) to fetch. (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11GeneralDescriptionIdGetAsyncWithHttpInfo($id, $showHeader = false, string $contentType = self::contentTypes['apiV11GeneralDescriptionIdGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription';
        $request = $this->apiV11GeneralDescriptionIdGetRequest($id, $showHeader, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11GeneralDescriptionIdGet'
     *
     * @param  string $id Statutory service general description guid (id of the entity) to fetch. (required)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11GeneralDescriptionIdGetRequest($id, $showHeader = false, string $contentType = self::contentTypes['apiV11GeneralDescriptionIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV11GeneralDescriptionIdGet'
            );
        }



        $resourcePath = '/api/v11/GeneralDescription/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $showHeader,
            'showHeader', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11GeneralDescriptionIdPut
     *
     * Updates the defined general description with the data provided as input.
     *
     * @param  string $id Statutory service general description identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescriptionInBase $v10VmOpenApiGeneralDescriptionInBase The general description data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionIdPut'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11GeneralDescriptionIdPut($id, $v10VmOpenApiGeneralDescriptionInBase = null, string $contentType = self::contentTypes['apiV11GeneralDescriptionIdPut'][0])
    {
        list($response) = $this->apiV11GeneralDescriptionIdPutWithHttpInfo($id, $v10VmOpenApiGeneralDescriptionInBase, $contentType);
        return $response;
    }

    /**
     * Operation apiV11GeneralDescriptionIdPutWithHttpInfo
     *
     * Updates the defined general description with the data provided as input.
     *
     * @param  string $id Statutory service general description identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescriptionInBase $v10VmOpenApiGeneralDescriptionInBase The general description data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionIdPut'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11GeneralDescriptionIdPutWithHttpInfo($id, $v10VmOpenApiGeneralDescriptionInBase = null, string $contentType = self::contentTypes['apiV11GeneralDescriptionIdPut'][0])
    {
        $request = $this->apiV11GeneralDescriptionIdPutRequest($id, $v10VmOpenApiGeneralDescriptionInBase, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11GeneralDescriptionIdPutAsync
     *
     * Updates the defined general description with the data provided as input.
     *
     * @param  string $id Statutory service general description identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescriptionInBase $v10VmOpenApiGeneralDescriptionInBase The general description data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11GeneralDescriptionIdPutAsync($id, $v10VmOpenApiGeneralDescriptionInBase = null, string $contentType = self::contentTypes['apiV11GeneralDescriptionIdPut'][0])
    {
        return $this->apiV11GeneralDescriptionIdPutAsyncWithHttpInfo($id, $v10VmOpenApiGeneralDescriptionInBase, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11GeneralDescriptionIdPutAsyncWithHttpInfo
     *
     * Updates the defined general description with the data provided as input.
     *
     * @param  string $id Statutory service general description identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescriptionInBase $v10VmOpenApiGeneralDescriptionInBase The general description data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11GeneralDescriptionIdPutAsyncWithHttpInfo($id, $v10VmOpenApiGeneralDescriptionInBase = null, string $contentType = self::contentTypes['apiV11GeneralDescriptionIdPut'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription';
        $request = $this->apiV11GeneralDescriptionIdPutRequest($id, $v10VmOpenApiGeneralDescriptionInBase, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11GeneralDescriptionIdPut'
     *
     * @param  string $id Statutory service general description identifier (required)
     * @param  \Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescriptionInBase $v10VmOpenApiGeneralDescriptionInBase The general description data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11GeneralDescriptionIdPutRequest($id, $v10VmOpenApiGeneralDescriptionInBase = null, string $contentType = self::contentTypes['apiV11GeneralDescriptionIdPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV11GeneralDescriptionIdPut'
            );
        }



        $resourcePath = '/api/v11/GeneralDescription/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v10VmOpenApiGeneralDescriptionInBase)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v10VmOpenApiGeneralDescriptionInBase));
            } else {
                $httpBody = $v10VmOpenApiGeneralDescriptionInBase;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11GeneralDescriptionListGet
     *
     * Fetches all the information related to requested statutory service general descriptions.
     *
     * @param  string $guids Comma separated list of guids. Max 100 can be added into list. (optional)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionListGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription[]|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11GeneralDescriptionListGet($guids = null, $showHeader = false, string $contentType = self::contentTypes['apiV11GeneralDescriptionListGet'][0])
    {
        list($response) = $this->apiV11GeneralDescriptionListGetWithHttpInfo($guids, $showHeader, $contentType);
        return $response;
    }

    /**
     * Operation apiV11GeneralDescriptionListGetWithHttpInfo
     *
     * Fetches all the information related to requested statutory service general descriptions.
     *
     * @param  string $guids Comma separated list of guids. Max 100 can be added into list. (optional)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionListGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription[]|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11GeneralDescriptionListGetWithHttpInfo($guids = null, $showHeader = false, string $contentType = self::contentTypes['apiV11GeneralDescriptionListGet'][0])
    {
        $request = $this->apiV11GeneralDescriptionListGetRequest($guids, $showHeader, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11GeneralDescriptionListGetAsync
     *
     * Fetches all the information related to requested statutory service general descriptions.
     *
     * @param  string $guids Comma separated list of guids. Max 100 can be added into list. (optional)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11GeneralDescriptionListGetAsync($guids = null, $showHeader = false, string $contentType = self::contentTypes['apiV11GeneralDescriptionListGet'][0])
    {
        return $this->apiV11GeneralDescriptionListGetAsyncWithHttpInfo($guids, $showHeader, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11GeneralDescriptionListGetAsyncWithHttpInfo
     *
     * Fetches all the information related to requested statutory service general descriptions.
     *
     * @param  string $guids Comma separated list of guids. Max 100 can be added into list. (optional)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11GeneralDescriptionListGetAsyncWithHttpInfo($guids = null, $showHeader = false, string $contentType = self::contentTypes['apiV11GeneralDescriptionListGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription[]';
        $request = $this->apiV11GeneralDescriptionListGetRequest($guids, $showHeader, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11GeneralDescriptionListGet'
     *
     * @param  string $guids Comma separated list of guids. Max 100 can be added into list. (optional)
     * @param  bool $showHeader  (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11GeneralDescriptionListGetRequest($guids = null, $showHeader = false, string $contentType = self::contentTypes['apiV11GeneralDescriptionListGet'][0])
    {




        $resourcePath = '/api/v11/GeneralDescription/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $guids,
            'guids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $showHeader,
            'showHeader', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11GeneralDescriptionNewGdListGet
     *
     * Gets the new statutory service general descriptions within PTV as a list of ids and names.
     *
     * @param  int $page The page to be fetched. Page numbering starts from one. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionNewGdListGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11GeneralDescriptionNewGdListGet($page = 1, string $contentType = self::contentTypes['apiV11GeneralDescriptionNewGdListGet'][0])
    {
        list($response) = $this->apiV11GeneralDescriptionNewGdListGetWithHttpInfo($page, $contentType);
        return $response;
    }

    /**
     * Operation apiV11GeneralDescriptionNewGdListGetWithHttpInfo
     *
     * Gets the new statutory service general descriptions within PTV as a list of ids and names.
     *
     * @param  int $page The page to be fetched. Page numbering starts from one. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionNewGdListGet'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11GeneralDescriptionNewGdListGetWithHttpInfo($page = 1, string $contentType = self::contentTypes['apiV11GeneralDescriptionNewGdListGet'][0])
    {
        $request = $this->apiV11GeneralDescriptionNewGdListGetRequest($page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11GeneralDescriptionNewGdListGetAsync
     *
     * Gets the new statutory service general descriptions within PTV as a list of ids and names.
     *
     * @param  int $page The page to be fetched. Page numbering starts from one. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionNewGdListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11GeneralDescriptionNewGdListGetAsync($page = 1, string $contentType = self::contentTypes['apiV11GeneralDescriptionNewGdListGet'][0])
    {
        return $this->apiV11GeneralDescriptionNewGdListGetAsyncWithHttpInfo($page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11GeneralDescriptionNewGdListGetAsyncWithHttpInfo
     *
     * Gets the new statutory service general descriptions within PTV as a list of ids and names.
     *
     * @param  int $page The page to be fetched. Page numbering starts from one. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionNewGdListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11GeneralDescriptionNewGdListGetAsyncWithHttpInfo($page = 1, string $contentType = self::contentTypes['apiV11GeneralDescriptionNewGdListGet'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V3VmOpenApiGuidPage';
        $request = $this->apiV11GeneralDescriptionNewGdListGetRequest($page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11GeneralDescriptionNewGdListGet'
     *
     * @param  int $page The page to be fetched. Page numbering starts from one. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionNewGdListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11GeneralDescriptionNewGdListGetRequest($page = 1, string $contentType = self::contentTypes['apiV11GeneralDescriptionNewGdListGet'][0])
    {



        $resourcePath = '/api/v11/GeneralDescription/newGdList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV11GeneralDescriptionPost
     *
     * Creates a new general description with the data provided as input.
     *
     * @param  \Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescriptionIn $v10VmOpenApiGeneralDescriptionIn The general description data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionPost'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError
     */
    public function apiV11GeneralDescriptionPost($v10VmOpenApiGeneralDescriptionIn = null, string $contentType = self::contentTypes['apiV11GeneralDescriptionPost'][0])
    {
        list($response) = $this->apiV11GeneralDescriptionPostWithHttpInfo($v10VmOpenApiGeneralDescriptionIn, $contentType);
        return $response;
    }

    /**
     * Operation apiV11GeneralDescriptionPostWithHttpInfo
     *
     * Creates a new general description with the data provided as input.
     *
     * @param  \Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescriptionIn $v10VmOpenApiGeneralDescriptionIn The general description data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionPost'] to see the possible values for this operation
     *
     * @throws \Tampere\PtvV11\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription|array<string,string[]>|\Tampere\PtvV11\PtvModel\IVmError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV11GeneralDescriptionPostWithHttpInfo($v10VmOpenApiGeneralDescriptionIn = null, string $contentType = self::contentTypes['apiV11GeneralDescriptionPost'][0])
    {
        $request = $this->apiV11GeneralDescriptionPostRequest($v10VmOpenApiGeneralDescriptionIn, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,string[]>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string[]>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string[]>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Tampere\PtvV11\PtvModel\IVmError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tampere\PtvV11\PtvModel\IVmError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tampere\PtvV11\PtvModel\IVmError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string[]>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tampere\PtvV11\PtvModel\IVmError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV11GeneralDescriptionPostAsync
     *
     * Creates a new general description with the data provided as input.
     *
     * @param  \Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescriptionIn $v10VmOpenApiGeneralDescriptionIn The general description data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11GeneralDescriptionPostAsync($v10VmOpenApiGeneralDescriptionIn = null, string $contentType = self::contentTypes['apiV11GeneralDescriptionPost'][0])
    {
        return $this->apiV11GeneralDescriptionPostAsyncWithHttpInfo($v10VmOpenApiGeneralDescriptionIn, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV11GeneralDescriptionPostAsyncWithHttpInfo
     *
     * Creates a new general description with the data provided as input.
     *
     * @param  \Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescriptionIn $v10VmOpenApiGeneralDescriptionIn The general description data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV11GeneralDescriptionPostAsyncWithHttpInfo($v10VmOpenApiGeneralDescriptionIn = null, string $contentType = self::contentTypes['apiV11GeneralDescriptionPost'][0])
    {
        $returnType = '\Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescription';
        $request = $this->apiV11GeneralDescriptionPostRequest($v10VmOpenApiGeneralDescriptionIn, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV11GeneralDescriptionPost'
     *
     * @param  \Tampere\PtvV11\PtvModel\V10VmOpenApiGeneralDescriptionIn $v10VmOpenApiGeneralDescriptionIn The general description data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV11GeneralDescriptionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV11GeneralDescriptionPostRequest($v10VmOpenApiGeneralDescriptionIn = null, string $contentType = self::contentTypes['apiV11GeneralDescriptionPost'][0])
    {



        $resourcePath = '/api/v11/GeneralDescription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v10VmOpenApiGeneralDescriptionIn)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v10VmOpenApiGeneralDescriptionIn));
            } else {
                $httpBody = $v10VmOpenApiGeneralDescriptionIn;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
